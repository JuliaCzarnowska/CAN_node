
C:\Users\Julia\Documents\stm_projekty\CAN_node\TrueSTUDIO\CAN_node\Debug\CAN_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000177c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001888  08001888  00011888  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080018b4  080018b4  000118b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080018b8  080018b8  000118b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080018bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000100  20000004  080018c0  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000104  080018c0  00020104  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_line   00002e5b  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00007275  00000000  00000000  00022e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000015f7  00000000  00000000  0002a0fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000004d8  00000000  00000000  0002b6f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006d0  00000000  00000000  0002bbd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002586  00000000  00000000  0002c2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001bf1  00000000  00000000  0002e826  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00030417  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000bec  00000000  00000000  00030498  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08001870 	.word	0x08001870

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08001870 	.word	0x08001870

0800014c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800014c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800014e:	e003      	b.n	8000158 <LoopCopyDataInit>

08000150 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000150:	4b0b      	ldr	r3, [pc, #44]	; (8000180 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000152:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000154:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000156:	3104      	adds	r1, #4

08000158 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000158:	480a      	ldr	r0, [pc, #40]	; (8000184 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800015c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800015e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000160:	d3f6      	bcc.n	8000150 <CopyDataInit>
  ldr r2, =_sbss
 8000162:	4a0a      	ldr	r2, [pc, #40]	; (800018c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000164:	e002      	b.n	800016c <LoopFillZerobss>

08000166 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000166:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000168:	f842 3b04 	str.w	r3, [r2], #4

0800016c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800016c:	4b08      	ldr	r3, [pc, #32]	; (8000190 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800016e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000170:	d3f9      	bcc.n	8000166 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000172:	f000 fa01 	bl	8000578 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000176:	f001 fb55 	bl	8001824 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800017a:	f000 f8a5 	bl	80002c8 <main>
  bx lr
 800017e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000180:	080018bc 	.word	0x080018bc
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000184:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000188:	20000004 	.word	0x20000004
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 800018c:	20000004 	.word	0x20000004
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000190:	20000104 	.word	0x20000104

08000194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000194:	e7fe      	b.n	8000194 <ADC1_2_IRQHandler>
	...

08000198 <UART_TO_CAN_Transfer>:

/* USER CODE BEGIN 0 */

void UART_TO_CAN_Transfer()
{
	hcan.pTxMsg->DLC = uartRxMsg[1];
 8000198:	4910      	ldr	r1, [pc, #64]	; (80001dc <UART_TO_CAN_Transfer+0x44>)
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

void UART_TO_CAN_Transfer()
{
 800019a:	b530      	push	{r4, r5, lr}
	hcan.pTxMsg->DLC = uartRxMsg[1];
 800019c:	460a      	mov	r2, r1
 800019e:	4b10      	ldr	r3, [pc, #64]	; (80001e0 <UART_TO_CAN_Transfer+0x48>)
 80001a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80001a2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80001a6:	f100 0415 	add.w	r4, r0, #21
 80001aa:	6103      	str	r3, [r0, #16]
 80001ac:	3301      	adds	r3, #1
 80001ae:	440b      	add	r3, r1
	for(int i = 0; i < hcan.pTxMsg->DLC; i++)
 80001b0:	429a      	cmp	r2, r3
 80001b2:	d004      	beq.n	80001be <UART_TO_CAN_Transfer+0x26>
	{
		hcan.pTxMsg->Data[i+2] = uartRxMsg[i+2];
 80001b4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80001b8:	f804 5f01 	strb.w	r5, [r4, #1]!
 80001bc:	e7f8      	b.n	80001b0 <UART_TO_CAN_Transfer+0x18>
	unsigned int id[4];
	id[0] = (unsigned int) ((uartRxMsg[11] << 24) & 0x1F000000);
	id[1] = (unsigned int) ((uartRxMsg[12] << 16) & 0xFF0000);
	id[2] = (unsigned int) ((uartRxMsg[13] << 8) & 0xFF00);
	id[3] = (unsigned int) (uartRxMsg[14] & 0xFF);
	hcan.pTxMsg->ExtId = id[0]|id[1]|id[2]|id[3];
 80001be:	7b4a      	ldrb	r2, [r1, #13]
 80001c0:	7b8b      	ldrb	r3, [r1, #14]
 80001c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80001c6:	7aca      	ldrb	r2, [r1, #11]
 80001c8:	0612      	lsls	r2, r2, #24
 80001ca:	f002 52f8 	and.w	r2, r2, #520093696	; 0x1f000000
 80001ce:	4313      	orrs	r3, r2
 80001d0:	7b0a      	ldrb	r2, [r1, #12]
 80001d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80001d6:	6043      	str	r3, [r0, #4]
 80001d8:	bd30      	pop	{r4, r5, pc}
 80001da:	bf00      	nop
 80001dc:	200000a4 	.word	0x200000a4
 80001e0:	20000064 	.word	0x20000064

080001e4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{HAL_GPIO_WritePin( LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80001e4:	b508      	push	{r3, lr}
 80001e6:	2201      	movs	r2, #1
 80001e8:	2120      	movs	r1, #32
 80001ea:	4802      	ldr	r0, [pc, #8]	; (80001f4 <Error_Handler+0x10>)
 80001ec:	f000 fd3e 	bl	8000c6c <HAL_GPIO_WritePin>
 80001f0:	e7fe      	b.n	80001f0 <Error_Handler+0xc>
 80001f2:	bf00      	nop
 80001f4:	40010800 	.word	0x40010800

080001f8 <HAL_UART_RxCpltCallback>:
/* Private function prototypes -----------------------------------------------*/
void UART_TO_CAN_Transfer();
void CAN_TO_UART_Transfer();

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 80001f8:	b510      	push	{r4, lr}
//	HAL_GPIO_WritePin( LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
	if(uartRxMsg[0] == ARINC_MSG){
 80001fa:	4b13      	ldr	r3, [pc, #76]	; (8000248 <HAL_UART_RxCpltCallback+0x50>)
 80001fc:	781c      	ldrb	r4, [r3, #0]
 80001fe:	2c01      	cmp	r4, #1
 8000200:	d10d      	bne.n	800021e <HAL_UART_RxCpltCallback+0x26>
		UART_TO_CAN_Transfer();
 8000202:	f7ff ffc9 	bl	8000198 <UART_TO_CAN_Transfer>
		if(HAL_CAN_Transmit(&hcan, 10) != HAL_OK)
 8000206:	210a      	movs	r1, #10
 8000208:	4810      	ldr	r0, [pc, #64]	; (800024c <HAL_UART_RxCpltCallback+0x54>)
 800020a:	f000 fafd 	bl	8000808 <HAL_CAN_Transmit>
 800020e:	b1a0      	cbz	r0, 800023a <HAL_UART_RxCpltCallback+0x42>
		{
			HAL_GPIO_WritePin( LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000210:	4622      	mov	r2, r4
 8000212:	2120      	movs	r1, #32
 8000214:	480e      	ldr	r0, [pc, #56]	; (8000250 <HAL_UART_RxCpltCallback+0x58>)
 8000216:	f000 fd29 	bl	8000c6c <HAL_GPIO_WritePin>
		    /* Reception Error */
		    Error_Handler();
 800021a:	f7ff ffe3 	bl	80001e4 <Error_Handler>
		}
	}else if(uartRxMsg[0] == CTRL_MSG){
 800021e:	2c02      	cmp	r4, #2
 8000220:	d10b      	bne.n	800023a <HAL_UART_RxCpltCallback+0x42>
		HAL_UART_Transmit(&huart2, (uint8_t*) &uartTxMsg, 15, 100);
 8000222:	2364      	movs	r3, #100	; 0x64
 8000224:	220f      	movs	r2, #15
 8000226:	490b      	ldr	r1, [pc, #44]	; (8000254 <HAL_UART_RxCpltCallback+0x5c>)
 8000228:	480b      	ldr	r0, [pc, #44]	; (8000258 <HAL_UART_RxCpltCallback+0x60>)
 800022a:	f001 f9a9 	bl	8001580 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) &uartTxMsg, 15, 100);
 800022e:	2364      	movs	r3, #100	; 0x64
 8000230:	220f      	movs	r2, #15
 8000232:	4908      	ldr	r1, [pc, #32]	; (8000254 <HAL_UART_RxCpltCallback+0x5c>)
 8000234:	4808      	ldr	r0, [pc, #32]	; (8000258 <HAL_UART_RxCpltCallback+0x60>)
 8000236:	f001 f9a3 	bl	8001580 <HAL_UART_Transmit>
	}

	HAL_UART_Receive_IT(&huart2, uartRxMsg, MSG_PKT_SIZE);
}
 800023a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}else if(uartRxMsg[0] == CTRL_MSG){
		HAL_UART_Transmit(&huart2, (uint8_t*) &uartTxMsg, 15, 100);
		HAL_UART_Transmit(&huart2, (uint8_t*) &uartTxMsg, 15, 100);
	}

	HAL_UART_Receive_IT(&huart2, uartRxMsg, MSG_PKT_SIZE);
 800023e:	220f      	movs	r2, #15
 8000240:	4901      	ldr	r1, [pc, #4]	; (8000248 <HAL_UART_RxCpltCallback+0x50>)
 8000242:	4805      	ldr	r0, [pc, #20]	; (8000258 <HAL_UART_RxCpltCallback+0x60>)
 8000244:	f001 b9f8 	b.w	8001638 <HAL_UART_Receive_IT>
 8000248:	200000a4 	.word	0x200000a4
 800024c:	20000064 	.word	0x20000064
 8000250:	40010800 	.word	0x40010800
 8000254:	200000b3 	.word	0x200000b3
 8000258:	200000c4 	.word	0x200000c4

0800025c <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800025c:	b510      	push	{r4, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025e:	2301      	movs	r3, #1
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000260:	b090      	sub	sp, #64	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000262:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000264:	2310      	movs	r3, #16
 8000266:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000268:	2300      	movs	r3, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800026c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000270:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000274:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000276:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000278:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f000 fcfb 	bl	8000c74 <HAL_RCC_OscConfig>
 800027e:	b108      	cbz	r0, 8000284 <SystemClock_Config+0x28>
  {
    Error_Handler();
 8000280:	f7ff ffb0 	bl	80001e4 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000284:	230f      	movs	r3, #15
 8000286:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000288:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028e:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000290:	4621      	mov	r1, r4
 8000292:	a801      	add	r0, sp, #4

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000294:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000296:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000298:	f000 ff94 	bl	80011c4 <HAL_RCC_ClockConfig>
 800029c:	4604      	mov	r4, r0
 800029e:	2800      	cmp	r0, #0
 80002a0:	d1ee      	bne.n	8000280 <SystemClock_Config+0x24>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80002a2:	f001 f841 	bl	8001328 <HAL_RCC_GetHCLKFreq>
 80002a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80002ae:	f000 fbdd 	bl	8000a6c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80002b2:	2004      	movs	r0, #4
 80002b4:	f000 fbf0 	bl	8000a98 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80002b8:	4622      	mov	r2, r4
 80002ba:	4621      	mov	r1, r4
 80002bc:	f04f 30ff 	mov.w	r0, #4294967295
 80002c0:	f000 fb94 	bl	80009ec <HAL_NVIC_SetPriority>
}
 80002c4:	b010      	add	sp, #64	; 0x40
 80002c6:	bd10      	pop	{r4, pc}

080002c8 <main>:
//	if(hcan.pRxMsg->ExtId == 0x82501C0){HAL_GPIO_WritePin( LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);}
}
/* USER CODE END 0 */

int main(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b08c      	sub	sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002cc:	f000 f98c 	bl	80005e8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80002d0:	f7ff ffc4 	bl	800025c <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d4:	4b3f      	ldr	r3, [pc, #252]	; (80003d4 <main+0x10c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002d6:	2120      	movs	r1, #32
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d8:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002da:	483f      	ldr	r0, [pc, #252]	; (80003d8 <main+0x110>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002dc:	f042 0204 	orr.w	r2, r2, #4
 80002e0:	619a      	str	r2, [r3, #24]
 80002e2:	699b      	ldr	r3, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002e4:	2200      	movs	r2, #0
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e6:	f003 0304 	and.w	r3, r3, #4
 80002ea:	9301      	str	r3, [sp, #4]
 80002ec:	9b01      	ldr	r3, [sp, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002ee:	f000 fcbd 	bl	8000c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80002f2:	2320      	movs	r3, #32
 80002f4:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002f6:	4838      	ldr	r0, [pc, #224]	; (80003d8 <main+0x110>)
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f8:	2302      	movs	r3, #2
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002fa:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002fc:	a902      	add	r1, sp, #8
  CAN_FilterConfTypeDef  		sFilterConfig;
  static CanTxMsgTypeDef        TxMessage;
  static CanRxMsgTypeDef        RxMessage;

  /*##-1- Configure the CAN peripheral #######################################*/
  hcan.pTxMsg = &TxMessage;
 80002fe:	4c37      	ldr	r4, [pc, #220]	; (80003dc <main+0x114>)
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000300:	9305      	str	r3, [sp, #20]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000302:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000304:	f000 fbda 	bl	8000abc <HAL_GPIO_Init>
  CAN_FilterConfTypeDef  		sFilterConfig;
  static CanTxMsgTypeDef        TxMessage;
  static CanRxMsgTypeDef        RxMessage;

  /*##-1- Configure the CAN peripheral #######################################*/
  hcan.pTxMsg = &TxMessage;
 8000308:	4b35      	ldr	r3, [pc, #212]	; (80003e0 <main+0x118>)
  hcan.pRxMsg = &RxMessage;

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 16;
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 800030a:	2710      	movs	r7, #16
  CAN_FilterConfTypeDef  		sFilterConfig;
  static CanTxMsgTypeDef        TxMessage;
  static CanRxMsgTypeDef        RxMessage;

  /*##-1- Configure the CAN peripheral #######################################*/
  hcan.pTxMsg = &TxMessage;
 800030c:	6323      	str	r3, [r4, #48]	; 0x30
  hcan.pRxMsg = &RxMessage;
 800030e:	4b35      	ldr	r3, [pc, #212]	; (80003e4 <main+0x11c>)

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 16;
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000310:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
  static CanTxMsgTypeDef        TxMessage;
  static CanRxMsgTypeDef        RxMessage;

  /*##-1- Configure the CAN peripheral #######################################*/
  hcan.pTxMsg = &TxMessage;
  hcan.pRxMsg = &RxMessage;
 8000314:	6363      	str	r3, [r4, #52]	; 0x34

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 16;
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000316:	4b34      	ldr	r3, [pc, #208]	; (80003e8 <main+0x120>)
  hcan.Init.ABOM = DISABLE;
  hcan.Init.AWUM = DISABLE;
  hcan.Init.NART = DISABLE;
  hcan.Init.RFLM = DISABLE;
  hcan.Init.TXFP = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000318:	4620      	mov	r0, r4
  hcan.pTxMsg = &TxMessage;
  hcan.pRxMsg = &RxMessage;

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 16;
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 800031a:	e884 4088 	stmia.w	r4, {r3, r7, lr}
  hcan.Init.SJW = CAN_SJW_1TQ;
 800031e:	2300      	movs	r3, #0
 8000320:	60e3      	str	r3, [r4, #12]
  hcan.Init.BS1 = CAN_BS1_1TQ;
 8000322:	6123      	str	r3, [r4, #16]
  hcan.Init.BS2 = CAN_BS2_1TQ;
 8000324:	6163      	str	r3, [r4, #20]
  hcan.Init.TTCM = DISABLE;
 8000326:	61a3      	str	r3, [r4, #24]
  hcan.Init.ABOM = DISABLE;
 8000328:	61e3      	str	r3, [r4, #28]
  hcan.Init.AWUM = DISABLE;
 800032a:	6223      	str	r3, [r4, #32]
  hcan.Init.NART = DISABLE;
 800032c:	6263      	str	r3, [r4, #36]	; 0x24
  hcan.Init.RFLM = DISABLE;
 800032e:	62a3      	str	r3, [r4, #40]	; 0x28
  hcan.Init.TXFP = DISABLE;
 8000330:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000332:	f000 f9eb 	bl	800070c <HAL_CAN_Init>
 8000336:	b108      	cbz	r0, 800033c <main+0x74>
  {

    Error_Handler();
 8000338:	f7ff ff54 	bl	80001e4 <Error_Handler>
  }

  /*##-2- Configure the CAN Filter ###########################################*/
  sFilterConfig.FilterNumber = 0;
 800033c:	9007      	str	r0, [sp, #28]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800033e:	9008      	str	r0, [sp, #32]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
  sFilterConfig.FilterIdHigh = 0x0000;
 8000340:	9002      	str	r0, [sp, #8]
  sFilterConfig.FilterIdLow = 0x0000;
 8000342:	9003      	str	r0, [sp, #12]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000344:	9004      	str	r0, [sp, #16]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000346:	9005      	str	r0, [sp, #20]
  sFilterConfig.FilterFIFOAssignment = 0;
 8000348:	9006      	str	r0, [sp, #24]
  sFilterConfig.FilterActivation = ENABLE;
  sFilterConfig.BankNumber = 14;
 800034a:	230e      	movs	r3, #14

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800034c:	a902      	add	r1, sp, #8
 800034e:	4620      	mov	r0, r4
  }

  /*##-2- Configure the CAN Filter ###########################################*/
  sFilterConfig.FilterNumber = 0;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000350:	9609      	str	r6, [sp, #36]	; 0x24
  sFilterConfig.FilterIdHigh = 0x0000;
  sFilterConfig.FilterIdLow = 0x0000;
  sFilterConfig.FilterMaskIdHigh = 0x0000;
  sFilterConfig.FilterMaskIdLow = 0x0000;
  sFilterConfig.FilterFIFOAssignment = 0;
  sFilterConfig.FilterActivation = ENABLE;
 8000352:	960a      	str	r6, [sp, #40]	; 0x28
  sFilterConfig.BankNumber = 14;
 8000354:	930b      	str	r3, [sp, #44]	; 0x2c

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000356:	f000 f974 	bl	8000642 <HAL_CAN_ConfigFilter>
 800035a:	2800      	cmp	r0, #0
 800035c:	d1ec      	bne.n	8000338 <main+0x70>
    /* Filter configuration Error */
    Error_Handler();
  }

  /*##-3- Configure Transmission process #####################################*/
  hcan.pTxMsg->StdId = 0x00;
 800035e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  hcan.pTxMsg->ExtId = 0xE9E1AC3;
 8000360:	4a22      	ldr	r2, [pc, #136]	; (80003ec <main+0x124>)

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8000362:	4d23      	ldr	r5, [pc, #140]	; (80003f0 <main+0x128>)
    Error_Handler();
  }

  /*##-3- Configure Transmission process #####################################*/
  hcan.pTxMsg->StdId = 0x00;
  hcan.pTxMsg->ExtId = 0xE9E1AC3;
 8000364:	605a      	str	r2, [r3, #4]
  hcan.pTxMsg->RTR = CAN_RTR_DATA;
  hcan.pTxMsg->IDE = CAN_ID_EXT;
 8000366:	2204      	movs	r2, #4
 8000368:	609a      	str	r2, [r3, #8]
  hcan.pTxMsg->DLC = 8;
 800036a:	2708      	movs	r7, #8
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 800036c:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <main+0x12c>)
    /* Filter configuration Error */
    Error_Handler();
  }

  /*##-3- Configure Transmission process #####################################*/
  hcan.pTxMsg->StdId = 0x00;
 800036e:	6018      	str	r0, [r3, #0]
  hcan.pTxMsg->ExtId = 0xE9E1AC3;
  hcan.pTxMsg->RTR = CAN_RTR_DATA;
 8000370:	60d8      	str	r0, [r3, #12]
  hcan.pTxMsg->IDE = CAN_ID_EXT;
  hcan.pTxMsg->DLC = 8;
 8000372:	611f      	str	r7, [r3, #16]
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8000374:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000378:	e885 000c 	stmia.w	r5, {r2, r3}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800037c:	60a8      	str	r0, [r5, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800037e:	60e8      	str	r0, [r5, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000380:	6128      	str	r0, [r5, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000382:	230c      	movs	r3, #12
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000384:	61a8      	str	r0, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000386:	61e8      	str	r0, [r5, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000388:	4628      	mov	r0, r5
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800038a:	616b      	str	r3, [r5, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800038c:	f001 f8cc 	bl	8001528 <HAL_UART_Init>
 8000390:	4680      	mov	r8, r0
 8000392:	2800      	cmp	r0, #0
 8000394:	d1d0      	bne.n	8000338 <main+0x70>


  /* USER CODE BEGIN 2 */

  //start listening for uart messages
  HAL_UART_Receive_IT(&huart2, uartRxMsg, 15);
 8000396:	220f      	movs	r2, #15
 8000398:	4917      	ldr	r1, [pc, #92]	; (80003f8 <main+0x130>)
 800039a:	4628      	mov	r0, r5
 800039c:	f001 f94c 	bl	8001638 <HAL_UART_Receive_IT>
  HAL_CAN_Receive_IT(&hcan, CAN_FIFO0);
 80003a0:	4641      	mov	r1, r8
 80003a2:	4620      	mov	r0, r4
 80003a4:	f000 fade 	bl	8000964 <HAL_CAN_Receive_IT>

  //creating an UART message

  // byte count
  uartTxMsg[0] = 0x08;
 80003a8:	4b14      	ldr	r3, [pc, #80]	; (80003fc <main+0x134>)
  // CAN_MSG.data[8]
  uartTxMsg[1] = 0x13;
 80003aa:	2213      	movs	r2, #19
 80003ac:	705a      	strb	r2, [r3, #1]
  uartTxMsg[2] = 0x43;
 80003ae:	2243      	movs	r2, #67	; 0x43
 80003b0:	709a      	strb	r2, [r3, #2]
  uartTxMsg[3] = 0x43;
 80003b2:	70da      	strb	r2, [r3, #3]
  uartTxMsg[4] = 0x43;
 80003b4:	711a      	strb	r2, [r3, #4]
  uartTxMsg[5] = 0x43;
 80003b6:	715a      	strb	r2, [r3, #5]
  uartTxMsg[6] = 0x43;
 80003b8:	719a      	strb	r2, [r3, #6]
  uartTxMsg[7] = 0x43;
 80003ba:	71da      	strb	r2, [r3, #7]
  uartTxMsg[8] = 0x43;
 80003bc:	721a      	strb	r2, [r3, #8]
  // frame type
  uartTxMsg[9] = DATA_FRAME;
  // identifier
  uartTxMsg[10] = 0x08;
  uartTxMsg[11] = 0x26;
 80003be:	2226      	movs	r2, #38	; 0x26
 80003c0:	72da      	strb	r2, [r3, #11]
  uartTxMsg[12] = 0x01;
  uartTxMsg[13] = 0xC0;
 80003c2:	22c0      	movs	r2, #192	; 0xc0
  HAL_CAN_Receive_IT(&hcan, CAN_FIFO0);

  //creating an UART message

  // byte count
  uartTxMsg[0] = 0x08;
 80003c4:	701f      	strb	r7, [r3, #0]
  uartTxMsg[5] = 0x43;
  uartTxMsg[6] = 0x43;
  uartTxMsg[7] = 0x43;
  uartTxMsg[8] = 0x43;
  // frame type
  uartTxMsg[9] = DATA_FRAME;
 80003c6:	725e      	strb	r6, [r3, #9]
  // identifier
  uartTxMsg[10] = 0x08;
 80003c8:	729f      	strb	r7, [r3, #10]
  uartTxMsg[11] = 0x26;
  uartTxMsg[12] = 0x01;
 80003ca:	731e      	strb	r6, [r3, #12]
  uartTxMsg[13] = 0xC0;
 80003cc:	735a      	strb	r2, [r3, #13]
  // opcode
  uartTxMsg[14] = ARINC_MSG;
 80003ce:	739e      	strb	r6, [r3, #14]
 80003d0:	e7fe      	b.n	80003d0 <main+0x108>
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40010800 	.word	0x40010800
 80003dc:	20000064 	.word	0x20000064
 80003e0:	20000020 	.word	0x20000020
 80003e4:	2000003c 	.word	0x2000003c
 80003e8:	40006400 	.word	0x40006400
 80003ec:	0e9e1ac3 	.word	0x0e9e1ac3
 80003f0:	200000c4 	.word	0x200000c4
 80003f4:	40004400 	.word	0x40004400
 80003f8:	200000a4 	.word	0x200000a4
 80003fc:	200000b3 	.word	0x200000b3

08000400 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000400:	4b20      	ldr	r3, [pc, #128]	; (8000484 <HAL_MspInit+0x84>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000402:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000404:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000406:	2003      	movs	r0, #3
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000408:	f042 0201 	orr.w	r2, r2, #1
 800040c:	619a      	str	r2, [r3, #24]
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0301 	and.w	r3, r3, #1
 8000414:	9301      	str	r3, [sp, #4]
 8000416:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000418:	f000 fad6 	bl	80009c8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800041c:	2200      	movs	r2, #0
 800041e:	4611      	mov	r1, r2
 8000420:	f06f 000b 	mvn.w	r0, #11
 8000424:	f000 fae2 	bl	80009ec <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000428:	2200      	movs	r2, #0
 800042a:	4611      	mov	r1, r2
 800042c:	f06f 000a 	mvn.w	r0, #10
 8000430:	f000 fadc 	bl	80009ec <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000434:	2200      	movs	r2, #0
 8000436:	4611      	mov	r1, r2
 8000438:	f06f 0009 	mvn.w	r0, #9
 800043c:	f000 fad6 	bl	80009ec <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000440:	2200      	movs	r2, #0
 8000442:	4611      	mov	r1, r2
 8000444:	f06f 0004 	mvn.w	r0, #4
 8000448:	f000 fad0 	bl	80009ec <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800044c:	2200      	movs	r2, #0
 800044e:	4611      	mov	r1, r2
 8000450:	f06f 0003 	mvn.w	r0, #3
 8000454:	f000 faca 	bl	80009ec <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000458:	2200      	movs	r2, #0
 800045a:	4611      	mov	r1, r2
 800045c:	f06f 0001 	mvn.w	r0, #1
 8000460:	f000 fac4 	bl	80009ec <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000464:	2200      	movs	r2, #0
 8000466:	4611      	mov	r1, r2
 8000468:	f04f 30ff 	mov.w	r0, #4294967295
 800046c:	f000 fabe 	bl	80009ec <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Disabled 
    */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000470:	4a05      	ldr	r2, [pc, #20]	; (8000488 <HAL_MspInit+0x88>)
 8000472:	6853      	ldr	r3, [r2, #4]
 8000474:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000478:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800047c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047e:	b003      	add	sp, #12
 8000480:	f85d fb04 	ldr.w	pc, [sp], #4
 8000484:	40021000 	.word	0x40021000
 8000488:	40010000 	.word	0x40010000

0800048c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800048c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 800048e:	6802      	ldr	r2, [r0, #0]
 8000490:	4b12      	ldr	r3, [pc, #72]	; (80004dc <HAL_CAN_MspInit+0x50>)
 8000492:	429a      	cmp	r2, r3
 8000494:	d11f      	bne.n	80004d6 <HAL_CAN_MspInit+0x4a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000496:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 800049a:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 800049c:	a902      	add	r1, sp, #8
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800049e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80004a2:	61da      	str	r2, [r3, #28]
 80004a4:	69db      	ldr	r3, [r3, #28]
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 80004a6:	480e      	ldr	r0, [pc, #56]	; (80004e0 <HAL_CAN_MspInit+0x54>)
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	9b01      	ldr	r3, [sp, #4]
  
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin;
 80004b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80004b4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b6:	2300      	movs	r3, #0
 80004b8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 80004bc:	f000 fafe 	bl	8000abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAN_TX_Pin;
 80004c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004c4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c6:	2302      	movs	r3, #2
 80004c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 80004ca:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = CAN_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004cc:	2303      	movs	r3, #3
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 80004ce:	4804      	ldr	r0, [pc, #16]	; (80004e0 <HAL_CAN_MspInit+0x54>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = CAN_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 80004d2:	f000 faf3 	bl	8000abc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80004d6:	b007      	add	sp, #28
 80004d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80004dc:	40006400 	.word	0x40006400
 80004e0:	40010800 	.word	0x40010800

080004e4 <HAL_UART_MspInit>:
  /* USER CODE END CAN1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004e4:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80004e6:	6802      	ldr	r2, [r0, #0]
 80004e8:	4b16      	ldr	r3, [pc, #88]	; (8000544 <HAL_UART_MspInit+0x60>)
  /* USER CODE END CAN1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004ea:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d126      	bne.n	800053e <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004f0:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80004f4:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80004f6:	a902      	add	r1, sp, #8
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004f8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80004fc:	61da      	str	r2, [r3, #28]
 80004fe:	69db      	ldr	r3, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8000500:	4811      	ldr	r0, [pc, #68]	; (8000548 <HAL_UART_MspInit+0x64>)
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000506:	9301      	str	r3, [sp, #4]
 8000508:	9b01      	ldr	r3, [sp, #4]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 800050a:	2304      	movs	r3, #4
 800050c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050e:	2302      	movs	r3, #2
 8000510:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000512:	2303      	movs	r3, #3
 8000514:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8000516:	f000 fad1 	bl	8000abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART2_RX_Pin;
 800051a:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051c:	2400      	movs	r4, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 800051e:	eb0d 0103 	add.w	r1, sp, r3
 8000522:	4809      	ldr	r0, [pc, #36]	; (8000548 <HAL_UART_MspInit+0x64>)
    GPIO_InitStruct.Pin = USART2_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = USART2_RX_Pin;
 8000524:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000526:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 800052a:	f000 fac7 	bl	8000abc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800052e:	2026      	movs	r0, #38	; 0x26
 8000530:	4622      	mov	r2, r4
 8000532:	4621      	mov	r1, r4
 8000534:	f000 fa5a 	bl	80009ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000538:	2026      	movs	r0, #38	; 0x26
 800053a:	f000 fa8b 	bl	8000a54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800053e:	b006      	add	sp, #24
 8000540:	bd10      	pop	{r4, pc}
 8000542:	bf00      	nop
 8000544:	40004400 	.word	0x40004400
 8000548:	40010800 	.word	0x40010800

0800054c <NMI_Handler>:
 800054c:	4770      	bx	lr

0800054e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800054e:	e7fe      	b.n	800054e <HardFault_Handler>

08000550 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000550:	e7fe      	b.n	8000550 <MemManage_Handler>

08000552 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000552:	e7fe      	b.n	8000552 <BusFault_Handler>

08000554 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000554:	e7fe      	b.n	8000554 <UsageFault_Handler>

08000556 <SVC_Handler>:
 8000556:	4770      	bx	lr

08000558 <DebugMon_Handler>:
 8000558:	4770      	bx	lr

0800055a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800055a:	4770      	bx	lr

0800055c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800055c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055e:	f000 f855 	bl	800060c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000562:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8000566:	f000 baa4 	b.w	8000ab2 <HAL_SYSTICK_IRQHandler>
	...

0800056c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800056c:	4801      	ldr	r0, [pc, #4]	; (8000574 <USART2_IRQHandler+0x8>)
 800056e:	f001 b897 	b.w	80016a0 <HAL_UART_IRQHandler>
 8000572:	bf00      	nop
 8000574:	200000c4 	.word	0x200000c4

08000578 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <SystemInit+0x40>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	f042 0201 	orr.w	r2, r2, #1
 8000580:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000582:	6859      	ldr	r1, [r3, #4]
 8000584:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <SystemInit+0x44>)
 8000586:	400a      	ands	r2, r1
 8000588:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000590:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000594:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800059c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800059e:	685a      	ldr	r2, [r3, #4]
 80005a0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80005a4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80005a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80005aa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005ac:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <SystemInit+0x48>)
 80005ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000
 80005bc:	f8ff0000 	.word	0xf8ff0000
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b510      	push	{r4, lr}
 80005c6:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80005c8:	f000 feae 	bl	8001328 <HAL_RCC_GetHCLKFreq>
 80005cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80005d4:	f000 fa4a 	bl	8000a6c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80005d8:	2200      	movs	r2, #0
 80005da:	4621      	mov	r1, r4
 80005dc:	f04f 30ff 	mov.w	r0, #4294967295
 80005e0:	f000 fa04 	bl	80009ec <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80005e4:	2000      	movs	r0, #0
 80005e6:	bd10      	pop	{r4, pc}

080005e8 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e8:	4a07      	ldr	r2, [pc, #28]	; (8000608 <HAL_Init+0x20>)
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ea:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ec:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ee:	2003      	movs	r0, #3
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f0:	f043 0310 	orr.w	r3, r3, #16
 80005f4:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f6:	f000 f9e7 	bl	80009c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff ffe2 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000600:	f7ff fefe 	bl	8000400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000604:	2000      	movs	r0, #0
 8000606:	bd08      	pop	{r3, pc}
 8000608:	40022000 	.word	0x40022000

0800060c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800060c:	4a02      	ldr	r2, [pc, #8]	; (8000618 <HAL_IncTick+0xc>)
 800060e:	6813      	ldr	r3, [r2, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000060 	.word	0x20000060

0800061c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800061c:	4b01      	ldr	r3, [pc, #4]	; (8000624 <HAL_GetTick+0x8>)
 800061e:	6818      	ldr	r0, [r3, #0]
}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000060 	.word	0x20000060

08000628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000628:	b513      	push	{r0, r1, r4, lr}
 800062a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800062c:	f7ff fff6 	bl	800061c <HAL_GetTick>
 8000630:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000632:	f7ff fff3 	bl	800061c <HAL_GetTick>
 8000636:	9b01      	ldr	r3, [sp, #4]
 8000638:	1b00      	subs	r0, r0, r4
 800063a:	4298      	cmp	r0, r3
 800063c:	d3f9      	bcc.n	8000632 <HAL_Delay+0xa>
  {
  }
}
 800063e:	b002      	add	sp, #8
 8000640:	bd10      	pop	{r4, pc}

08000642 <HAL_CAN_ConfigFilter>:
  
  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 8000642:	6803      	ldr	r3, [r0, #0]
  * @param  sFilterConfig: pointer to a CAN_FilterConfTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef* hcan, CAN_FilterConfTypeDef* sFilterConfig)
{
 8000644:	b570      	push	{r4, r5, r6, lr}
  
  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 8000646:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 800064a:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;
 800064c:	694a      	ldr	r2, [r1, #20]

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 800064e:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8000652:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;
 8000656:	2401      	movs	r4, #1

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 8000658:	f040 0001 	orr.w	r0, r0, #1
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;
 800065c:	4094      	lsls	r4, r2

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 800065e:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
             CAN_FMR_CAN2SB                              ,
             CAN_FMR_FINIT                              |
             (uint32_t)(sFilterConfig->BankNumber << 8)   );
  
  /* Filter Deactivation */
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 8000662:	43e0      	mvns	r0, r4
 8000664:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
 8000668:	4005      	ands	r5, r0
 800066a:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c
  
  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800066e:	69cd      	ldr	r5, [r1, #28]
 8000670:	b97d      	cbnz	r5, 8000692 <HAL_CAN_ConfigFilter+0x50>
  {
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8000672:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
 8000676:	68ce      	ldr	r6, [r1, #12]
  
  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
  {
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8000678:	4005      	ands	r5, r0
 800067a:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
 800067e:	888d      	ldrh	r5, [r1, #4]
 8000680:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8000684:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8000688:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 800068c:	688e      	ldr	r6, [r1, #8]
 800068e:	880d      	ldrh	r5, [r1, #0]
 8000690:	e010      	b.n	80006b4 <HAL_CAN_ConfigFilter+0x72>
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh);
  }

  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000692:	2d01      	cmp	r5, #1
 8000694:	d112      	bne.n	80006bc <HAL_CAN_ConfigFilter+0x7a>
  {
    /* 32-bit scale for the filter */
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8000696:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
 800069a:	680e      	ldr	r6, [r1, #0]
  }

  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
  {
    /* 32-bit scale for the filter */
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 800069c:	4325      	orrs	r5, r4
 800069e:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
 80006a2:	888d      	ldrh	r5, [r1, #4]
 80006a4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80006a8:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
  {
    /* 32-bit scale for the filter */
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80006ac:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 80006b0:	688e      	ldr	r6, [r1, #8]
 80006b2:	898d      	ldrh	r5, [r1, #12]
 80006b4:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80006b8:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow);
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80006bc:	698a      	ldr	r2, [r1, #24]
 80006be:	b91a      	cbnz	r2, 80006c8 <HAL_CAN_ConfigFilter+0x86>
  {
    /*Id/Mask mode for the filter*/
    CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 80006c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80006c4:	4002      	ands	r2, r0
 80006c6:	e002      	b.n	80006ce <HAL_CAN_ConfigFilter+0x8c>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 80006c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80006cc:	4322      	orrs	r2, r4
 80006ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80006d2:	690a      	ldr	r2, [r1, #16]
 80006d4:	b92a      	cbnz	r2, 80006e2 <HAL_CAN_ConfigFilter+0xa0>
  {
    /* FIFO 0 assignation for the filter */
    CLEAR_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 80006d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80006da:	4010      	ands	r0, r2
 80006dc:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
 80006e0:	e004      	b.n	80006ec <HAL_CAN_ConfigFilter+0xaa>
  }
  else
  {
    /* FIFO 1 assignation for the filter */
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 80006e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80006e6:	4322      	orrs	r2, r4
 80006e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 80006ec:	6a0a      	ldr	r2, [r1, #32]
  /* Leave the initialisation mode for the filter */
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
  
  /* Return function status */
  return HAL_OK;
}
 80006ee:	2000      	movs	r0, #0
    /* FIFO 1 assignation for the filter */
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 80006f0:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
 80006f2:	bf02      	ittt	eq
 80006f4:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 80006f8:	4314      	orreq	r4, r2
 80006fa:	f8c3 421c 	streq.w	r4, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
 80006fe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000702:	f022 0201 	bic.w	r2, r2, #1
 8000706:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Return function status */
  return HAL_OK;
}
 800070a:	bd70      	pop	{r4, r5, r6, pc}

0800070c <HAL_CAN_Init>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 800070c:	b570      	push	{r4, r5, r6, lr}
  uint32_t status = CAN_INITSTATUS_FAILED;  /* Default init status */
  uint32_t tickstart = 0;
  uint32_t tmp_mcr = 0;
  
  /* Check CAN handle */
  if(hcan == NULL)
 800070e:	4604      	mov	r4, r0
 8000710:	2800      	cmp	r0, #0
 8000712:	d076      	beq.n	8000802 <HAL_CAN_Init+0xf6>
  assert_param(IS_CAN_SJW(hcan->Init.SJW));
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  
  if(hcan->State == HAL_CAN_STATE_RESET)
 8000714:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000718:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800071c:	b91b      	cbnz	r3, 8000726 <HAL_CAN_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 800071e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 8000722:	f7ff feb3 	bl	800048c <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 8000726:	2302      	movs	r3, #2
 8000728:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800072c:	6823      	ldr	r3, [r4, #0]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	f022 0202 	bic.w	r2, r2, #2
 8000734:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	f042 0201 	orr.w	r2, r2, #1
 800073c:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();   
 800073e:	f7ff ff6d 	bl	800061c <HAL_GetTick>
 8000742:	4606      	mov	r6, r0
  
  /* Wait the acknowledge */
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000744:	6822      	ldr	r2, [r4, #0]
 8000746:	6853      	ldr	r3, [r2, #4]
 8000748:	f013 0501 	ands.w	r5, r3, #1
 800074c:	d105      	bne.n	800075a <HAL_CAN_Init+0x4e>
  {
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 800074e:	f7ff ff65 	bl	800061c <HAL_GetTick>
 8000752:	1b80      	subs	r0, r0, r6
 8000754:	280a      	cmp	r0, #10
 8000756:	d9f5      	bls.n	8000744 <HAL_CAN_Init+0x38>
 8000758:	e041      	b.n	80007de <HAL_CAN_Init+0xd2>
      return HAL_TIMEOUT;
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 800075a:	6853      	ldr	r3, [r2, #4]
 800075c:	07d9      	lsls	r1, r3, #31
 800075e:	d54d      	bpl.n	80007fc <HAL_CAN_Init+0xf0>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 8000760:	69a3      	ldr	r3, [r4, #24]
    {
      SET_BIT(tmp_mcr, CAN_MCR_TTCM);
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 8000762:	69e1      	ldr	r1, [r4, #28]
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
    {
      SET_BIT(tmp_mcr, CAN_MCR_TTCM);
 8000764:	2b01      	cmp	r3, #1
 8000766:	bf0c      	ite	eq
 8000768:	2380      	moveq	r3, #128	; 0x80
 800076a:	2300      	movne	r3, #0
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 800076c:	2901      	cmp	r1, #1
    {
      SET_BIT(tmp_mcr, CAN_MCR_ABOM);
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 800076e:	6a21      	ldr	r1, [r4, #32]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
    {
      SET_BIT(tmp_mcr, CAN_MCR_ABOM);
 8000770:	bf08      	it	eq
 8000772:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 8000776:	2901      	cmp	r1, #1
    {
      SET_BIT(tmp_mcr, CAN_MCR_AWUM);
    }
    
    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 8000778:	6a61      	ldr	r1, [r4, #36]	; 0x24
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
    {
      SET_BIT(tmp_mcr, CAN_MCR_AWUM);
 800077a:	bf08      	it	eq
 800077c:	f043 0320 	orreq.w	r3, r3, #32
    }
    
    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 8000780:	2901      	cmp	r1, #1
    {
      SET_BIT(tmp_mcr, CAN_MCR_NART);
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 8000782:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    }
    
    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
    {
      SET_BIT(tmp_mcr, CAN_MCR_NART);
 8000784:	bf08      	it	eq
 8000786:	f043 0310 	orreq.w	r3, r3, #16
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 800078a:	2901      	cmp	r1, #1
    {
      SET_BIT(tmp_mcr, CAN_MCR_RFLM);
    }
    
    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 800078c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
    {
      SET_BIT(tmp_mcr, CAN_MCR_RFLM);
 800078e:	bf08      	it	eq
 8000790:	f043 0308 	orreq.w	r3, r3, #8
    }
    
    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 8000794:	2901      	cmp	r1, #1
    {
      SET_BIT(tmp_mcr, CAN_MCR_TXFP);
    }
    
    /* Update register MCR */
    MODIFY_REG(hcan->Instance->MCR,
 8000796:	6811      	ldr	r1, [r2, #0]
    }
    
    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
    {
      SET_BIT(tmp_mcr, CAN_MCR_TXFP);
 8000798:	bf08      	it	eq
 800079a:	f043 0304 	orreq.w	r3, r3, #4
    }
    
    /* Update register MCR */
    MODIFY_REG(hcan->Instance->MCR,
 800079e:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
 80007a2:	430b      	orrs	r3, r1
 80007a4:	6013      	str	r3, [r2, #0]
               CAN_MCR_RFLM |
               CAN_MCR_TXFP,
               tmp_mcr);
    
    /* Set the bit timing register */
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80007a6:	68a1      	ldr	r1, [r4, #8]
 80007a8:	68e3      	ldr	r3, [r4, #12]
 80007aa:	4319      	orrs	r1, r3
 80007ac:	6923      	ldr	r3, [r4, #16]
 80007ae:	4319      	orrs	r1, r3
 80007b0:	6963      	ldr	r3, [r4, #20]
 80007b2:	4319      	orrs	r1, r3
 80007b4:	6863      	ldr	r3, [r4, #4]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	430b      	orrs	r3, r1
 80007ba:	61d3      	str	r3, [r2, #28]
                                              hcan->Init.BS1            |
                                              hcan->Init.BS2            |
                                              (hcan->Init.Prescaler - 1) ));

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007bc:	6813      	ldr	r3, [r2, #0]
 80007be:	f023 0301 	bic.w	r3, r3, #1
 80007c2:	6013      	str	r3, [r2, #0]

    /* Get timeout */
    tickstart = HAL_GetTick();   
 80007c4:	f7ff ff2a 	bl	800061c <HAL_GetTick>
 80007c8:	4606      	mov	r6, r0
   
    /* Wait the acknowledge */
    while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 80007ca:	6822      	ldr	r2, [r4, #0]
 80007cc:	6853      	ldr	r3, [r2, #4]
 80007ce:	f013 0501 	ands.w	r5, r3, #1
 80007d2:	d10a      	bne.n	80007ea <HAL_CAN_Init+0xde>
    {
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 80007d4:	f7ff ff22 	bl	800061c <HAL_GetTick>
 80007d8:	1b80      	subs	r0, r0, r6
 80007da:	280a      	cmp	r0, #10
 80007dc:	d9f5      	bls.n	80007ca <HAL_CAN_Init+0xbe>
      {
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 80007de:	2003      	movs	r0, #3
 80007e0:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hcan);
 80007e4:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38

        return HAL_TIMEOUT;
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
      }
    }

    /* Check acknowledged */
    if (HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 80007ea:	6853      	ldr	r3, [r2, #4]
 80007ec:	07db      	lsls	r3, r3, #31
 80007ee:	d505      	bpl.n	80007fc <HAL_CAN_Init+0xf0>
  }
 
  if(status == CAN_INITSTATUS_SUCCESS)
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007f0:	2000      	movs	r0, #0
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 80007f2:	2301      	movs	r3, #1
  }
 
  if(status == CAN_INITSTATUS_SUCCESS)
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007f4:	63e0      	str	r0, [r4, #60]	; 0x3c
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 80007f6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
    /* Return function status */
    return HAL_OK;
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 80007fc:	2304      	movs	r3, #4
 80007fe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
    /* Return function status */
    return HAL_ERROR;
 8000802:	2001      	movs	r0, #1
  }
}
 8000804:	bd70      	pop	{r4, r5, r6, pc}
	...

08000808 <HAL_CAN_Transmit>:
  *         the configuration information for the specified CAN.  
  * @param  Timeout: Specify Timeout value   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Transmit(CAN_HandleTypeDef* hcan, uint32_t Timeout)
{
 8000808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));
  
  /* Process locked */
  __HAL_LOCK(hcan);
 800080c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  *         the configuration information for the specified CAN.  
  * @param  Timeout: Specify Timeout value   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Transmit(CAN_HandleTypeDef* hcan, uint32_t Timeout)
{
 8000810:	4604      	mov	r4, r0
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));
  
  /* Process locked */
  __HAL_LOCK(hcan);
 8000812:	2b01      	cmp	r3, #1
  *         the configuration information for the specified CAN.  
  * @param  Timeout: Specify Timeout value   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Transmit(CAN_HandleTypeDef* hcan, uint32_t Timeout)
{
 8000814:	460e      	mov	r6, r1
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));
  
  /* Process locked */
  __HAL_LOCK(hcan);
 8000816:	d01d      	beq.n	8000854 <HAL_CAN_Transmit+0x4c>
 8000818:	2301      	movs	r3, #1
 800081a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  if(hcan->State == HAL_CAN_STATE_BUSY_RX) 
 800081e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX;
  }
  
  /* Select one empty transmit mailbox */
  if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 8000822:	6807      	ldr	r7, [r0, #0]
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));
  
  /* Process locked */
  __HAL_LOCK(hcan);
  
  if(hcan->State == HAL_CAN_STATE_BUSY_RX) 
 8000824:	2b22      	cmp	r3, #34	; 0x22
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
 8000826:	bf0c      	ite	eq
 8000828:	2332      	moveq	r3, #50	; 0x32
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX;
 800082a:	2312      	movne	r3, #18
 800082c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  }
  
  /* Select one empty transmit mailbox */
  if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	0159      	lsls	r1, r3, #5
 8000834:	d411      	bmi.n	800085a <HAL_CAN_Transmit+0x52>
  {
    transmitmailbox = 0;
  }
  else if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME1))
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	011a      	lsls	r2, r3, #4
 800083a:	d410      	bmi.n	800085e <HAL_CAN_Transmit+0x56>
  {
    transmitmailbox = 1;
  }
  else if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME2))
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8000842:	d10e      	bne.n	8000862 <HAL_CAN_Transmit+0x5a>
    return HAL_OK;
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_ERROR; 
 8000844:	2204      	movs	r2, #4
 8000846:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    
    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 800084a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    /* Return function status */
    return HAL_ERROR;
 800084e:	2001      	movs	r0, #1
 8000850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));
  
  /* Process locked */
  __HAL_LOCK(hcan);
 8000854:	2002      	movs	r0, #2
 8000856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  }
  
  /* Select one empty transmit mailbox */
  if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
  {
    transmitmailbox = 0;
 800085a:	2500      	movs	r5, #0
 800085c:	e002      	b.n	8000864 <HAL_CAN_Transmit+0x5c>
  }
  else if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME1))
  {
    transmitmailbox = 1;
 800085e:	2501      	movs	r5, #1
 8000860:	e000      	b.n	8000864 <HAL_CAN_Transmit+0x5c>
  }
  else if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME2))
  {
    transmitmailbox = 2;
 8000862:	2502      	movs	r5, #2
 8000864:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 8000868:	eb07 030e 	add.w	r3, r7, lr
  }

  if (transmitmailbox != CAN_TXSTATUS_NOMAILBOX)
  {
    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 800086c:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 8000870:	6b21      	ldr	r1, [r4, #48]	; 0x30
  }

  if (transmitmailbox != CAN_TXSTATUS_NOMAILBOX)
  {
    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 8000872:	f002 0201 	and.w	r2, r2, #1
 8000876:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 800087a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800087e:	68ca      	ldr	r2, [r1, #12]
 8000880:	f1bc 0f00 	cmp.w	ip, #0
 8000884:	d106      	bne.n	8000894 <HAL_CAN_Transmit+0x8c>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_BIT_POSITION) |
 8000886:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 800088a:	4302      	orrs	r2, r0
 800088c:	6808      	ldr	r0, [r1, #0]
 800088e:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8000892:	e007      	b.n	80008a4 <HAL_CAN_Transmit+0x9c>
                                                           hcan->pTxMsg->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_BIT_POSITION) |
 8000894:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 8000898:	ea4c 0000 	orr.w	r0, ip, r0
 800089c:	4302      	orrs	r2, r0
 800089e:	6848      	ldr	r0, [r1, #4]
 80008a0:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80008a4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
                                                           hcan->pTxMsg->IDE |
                                                           hcan->pTxMsg->RTR);
    }
    
    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 80008a8:	690a      	ldr	r2, [r1, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;

    /* Set up the data field */
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_BIT_POSITION) | 
 80008aa:	4477      	add	r7, lr
                                                           hcan->pTxMsg->IDE |
                                                           hcan->pTxMsg->RTR);
    }
    
    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 80008ac:	f002 020f 	and.w	r2, r2, #15
 80008b0:	610a      	str	r2, [r1, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 80008b2:	f8d3 0184 	ldr.w	r0, [r3, #388]	; 0x184
  
    /* Get timeout */
    tickstart = HAL_GetTick();   
  
    /* Check End of transmission flag */
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 80008b6:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8000960 <HAL_CAN_Transmit+0x158>
                                                           hcan->pTxMsg->RTR);
    }
    
    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 80008ba:	f020 000f 	bic.w	r0, r0, #15
 80008be:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 80008c2:	f8d3 0184 	ldr.w	r0, [r3, #388]	; 0x184
  
    /* Get timeout */
    tickstart = HAL_GetTick();   
  
    /* Check End of transmission flag */
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 80008c6:	f8df 9094 	ldr.w	r9, [pc, #148]	; 800095c <HAL_CAN_Transmit+0x154>
    }
    
    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 80008ca:	4302      	orrs	r2, r0
 80008cc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    /* Set up the data field */
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_BIT_POSITION) | 
 80008d0:	694a      	ldr	r2, [r1, #20]
 80008d2:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
                                                                ((uint32_t)hcan->pTxMsg->Data[2] << CAN_TDL0R_DATA2_BIT_POSITION) |
                                                                ((uint32_t)hcan->pTxMsg->Data[1] << CAN_TDL0R_DATA1_BIT_POSITION) | 
                                                                ((uint32_t)hcan->pTxMsg->Data[0] << CAN_TDL0R_DATA0_BIT_POSITION)  );
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR, ((uint32_t)hcan->pTxMsg->Data[7] << CAN_TDL0R_DATA3_BIT_POSITION) | 
 80008d6:	698a      	ldr	r2, [r1, #24]
 80008d8:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
                                                                ((uint32_t)hcan->pTxMsg->Data[6] << CAN_TDL0R_DATA2_BIT_POSITION) |
                                                                ((uint32_t)hcan->pTxMsg->Data[5] << CAN_TDL0R_DATA1_BIT_POSITION) |
                                                                ((uint32_t)hcan->pTxMsg->Data[4] << CAN_TDL0R_DATA0_BIT_POSITION)  );
    /* Request transmission */
    SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80008dc:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80008e0:	f042 0201 	orr.w	r2, r2, #1
 80008e4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  
    /* Get timeout */
    tickstart = HAL_GetTick();   
 80008e8:	f7ff fe98 	bl	800061c <HAL_GetTick>
 80008ec:	4607      	mov	r7, r0
  
    /* Check End of transmission flag */
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 80008ee:	4a1a      	ldr	r2, [pc, #104]	; (8000958 <HAL_CAN_Transmit+0x150>)
 80008f0:	6823      	ldr	r3, [r4, #0]
 80008f2:	6899      	ldr	r1, [r3, #8]
 80008f4:	b91d      	cbnz	r5, 80008fe <HAL_CAN_Transmit+0xf6>
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <HAL_CAN_Transmit+0x150>)
 80008f8:	400b      	ands	r3, r1
 80008fa:	1a9b      	subs	r3, r3, r2
 80008fc:	e00a      	b.n	8000914 <HAL_CAN_Transmit+0x10c>
 80008fe:	2d01      	cmp	r5, #1
 8000900:	d104      	bne.n	800090c <HAL_CAN_Transmit+0x104>
 8000902:	4b16      	ldr	r3, [pc, #88]	; (800095c <HAL_CAN_Transmit+0x154>)
 8000904:	400b      	ands	r3, r1
 8000906:	ebb3 0309 	subs.w	r3, r3, r9
 800090a:	e003      	b.n	8000914 <HAL_CAN_Transmit+0x10c>
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <HAL_CAN_Transmit+0x158>)
 800090e:	400b      	ands	r3, r1
 8000910:	ebb3 0308 	subs.w	r3, r3, r8
 8000914:	bf18      	it	ne
 8000916:	2301      	movne	r3, #1
 8000918:	b183      	cbz	r3, 800093c <HAL_CAN_Transmit+0x134>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800091a:	1c73      	adds	r3, r6, #1
 800091c:	d0e8      	beq.n	80008f0 <HAL_CAN_Transmit+0xe8>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800091e:	b93e      	cbnz	r6, 8000930 <HAL_CAN_Transmit+0x128>
        {
          hcan->State = HAL_CAN_STATE_TIMEOUT;
 8000920:	2003      	movs	r0, #3
          
          /* Process unlocked */
          __HAL_UNLOCK(hcan);
 8000922:	2300      	movs	r3, #0
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
        {
          hcan->State = HAL_CAN_STATE_TIMEOUT;
 8000924:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          
          /* Process unlocked */
          __HAL_UNLOCK(hcan);
 8000928:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          
          return HAL_TIMEOUT;
 800092c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000930:	f7ff fe74 	bl	800061c <HAL_GetTick>
 8000934:	1bc0      	subs	r0, r0, r7
 8000936:	4286      	cmp	r6, r0
 8000938:	d2d9      	bcs.n	80008ee <HAL_CAN_Transmit+0xe6>
 800093a:	e7f1      	b.n	8000920 <HAL_CAN_Transmit+0x118>
          
          return HAL_TIMEOUT;
        }
      }
    }
    if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
 800093c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_READY;
    }
    
    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 8000940:	2000      	movs	r0, #0
          
          return HAL_TIMEOUT;
        }
      }
    }
    if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
 8000942:	2b32      	cmp	r3, #50	; 0x32
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_BUSY_RX;
 8000944:	bf0c      	ite	eq
 8000946:	2322      	moveq	r3, #34	; 0x22
      __HAL_UNLOCK(hcan);
    }
    else
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_READY;
 8000948:	2301      	movne	r3, #1
 800094a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    }
    
    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 800094e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    
    /* Return function status */
    return HAL_OK;
 8000952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000956:	bf00      	nop
 8000958:	04000003 	.word	0x04000003
 800095c:	08000300 	.word	0x08000300
 8000960:	10030000 	.word	0x10030000

08000964 <HAL_CAN_Receive_IT>:
HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));
  
  if((hcan->State == HAL_CAN_STATE_READY) || (hcan->State == HAL_CAN_STATE_BUSY_TX))
 8000964:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
  * @param  FIFONumber: Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 8000968:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));
  
  if((hcan->State == HAL_CAN_STATE_READY) || (hcan->State == HAL_CAN_STATE_BUSY_TX))
 800096a:	2b01      	cmp	r3, #1
 800096c:	d003      	beq.n	8000976 <HAL_CAN_Receive_IT+0x12>
 800096e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000972:	2b12      	cmp	r3, #18
 8000974:	d126      	bne.n	80009c4 <HAL_CAN_Receive_IT+0x60>
  {
    /* Process locked */
    __HAL_LOCK(hcan);
 8000976:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800097a:	2b01      	cmp	r3, #1
 800097c:	d022      	beq.n	80009c4 <HAL_CAN_Receive_IT+0x60>
 800097e:	2301      	movs	r3, #1
 8000980:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
    if(hcan->State == HAL_CAN_STATE_BUSY_TX) 
 8000984:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
    /*  - Enable Error passive Interrupt */
    /*  - Enable Bus-off Interrupt */
    /*  - Enable Last error code Interrupt */
    /*  - Enable Error Interrupt */
    /*  - Enable Transmit mailbox empty Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 8000988:	6802      	ldr	r2, [r0, #0]
  if((hcan->State == HAL_CAN_STATE_READY) || (hcan->State == HAL_CAN_STATE_BUSY_TX))
  {
    /* Process locked */
    __HAL_LOCK(hcan);
  
    if(hcan->State == HAL_CAN_STATE_BUSY_TX) 
 800098a:	2b12      	cmp	r3, #18
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
 800098c:	bf0c      	ite	eq
 800098e:	2332      	moveq	r3, #50	; 0x32
    }
    else
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_BUSY_RX;
 8000990:	2322      	movne	r3, #34	; 0x22
 8000992:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    }
    
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000996:	2300      	movs	r3, #0
 8000998:	63c3      	str	r3, [r0, #60]	; 0x3c
    /*  - Enable Error passive Interrupt */
    /*  - Enable Bus-off Interrupt */
    /*  - Enable Last error code Interrupt */
    /*  - Enable Error Interrupt */
    /*  - Enable Transmit mailbox empty Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 800099a:	6954      	ldr	r4, [r2, #20]
 800099c:	f444 440f 	orr.w	r4, r4, #36608	; 0x8f00
 80009a0:	f044 0401 	orr.w	r4, r4, #1
 80009a4:	6154      	str	r4, [r2, #20]
                              CAN_IT_LEC |
                              CAN_IT_ERR |
                              CAN_IT_TME  );

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 80009a6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    if(FIFONumber == CAN_FIFO0)
 80009aa:	b929      	cbnz	r1, 80009b8 <HAL_CAN_Receive_IT+0x54>
    {
      /* Enable FIFO 0 message pending Interrupt */
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP0);
 80009ac:	6953      	ldr	r3, [r2, #20]
  {
    return HAL_BUSY;
  }
  
  /* Return function status */
  return HAL_OK;
 80009ae:	4608      	mov	r0, r1
    __HAL_UNLOCK(hcan);

    if(FIFONumber == CAN_FIFO0)
    {
      /* Enable FIFO 0 message pending Interrupt */
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP0);
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	6153      	str	r3, [r2, #20]
 80009b6:	bd10      	pop	{r4, pc}
    }
    else
    {
      /* Enable FIFO 1 message pending Interrupt */
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP1);
 80009b8:	6951      	ldr	r1, [r2, #20]
  {
    return HAL_BUSY;
  }
  
  /* Return function status */
  return HAL_OK;
 80009ba:	4618      	mov	r0, r3
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP0);
    }
    else
    {
      /* Enable FIFO 1 message pending Interrupt */
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP1);
 80009bc:	f041 0110 	orr.w	r1, r1, #16
 80009c0:	6151      	str	r1, [r2, #20]
 80009c2:	bd10      	pop	{r4, pc}
    }
    
  }
  else
  {
    return HAL_BUSY;
 80009c4:	2002      	movs	r0, #2
  }
  
  /* Return function status */
  return HAL_OK;
}
 80009c6:	bd10      	pop	{r4, pc}

080009c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c8:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80009ca:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009cc:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80009ce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80009d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009d6:	041b      	lsls	r3, r3, #16
 80009d8:	0c1b      	lsrs	r3, r3, #16
 80009da:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e2:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80009e4:	60d3      	str	r3, [r2, #12]
 80009e6:	4770      	bx	lr
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ee:	b530      	push	{r4, r5, lr}
 80009f0:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f2:	f3c3 2302 	ubfx	r3, r3, #8, #3
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f6:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fa:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009fc:	2c04      	cmp	r4, #4
 80009fe:	bf28      	it	cs
 8000a00:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a02:	2d06      	cmp	r5, #6

  return (
 8000a04:	f04f 0501 	mov.w	r5, #1
 8000a08:	fa05 f404 	lsl.w	r4, r5, r4
 8000a0c:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a10:	bf8c      	ite	hi
 8000a12:	3b03      	subhi	r3, #3
 8000a14:	2300      	movls	r3, #0

  return (
 8000a16:	400c      	ands	r4, r1
 8000a18:	409c      	lsls	r4, r3
 8000a1a:	fa05 f303 	lsl.w	r3, r5, r3
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000a22:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000a24:	ea42 0204 	orr.w	r2, r2, r4
 8000a28:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2c:	bfaf      	iteee	ge
 8000a2e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a32:	4b07      	ldrlt	r3, [pc, #28]	; (8000a50 <HAL_NVIC_SetPriority+0x64>)
 8000a34:	f000 000f 	andlt.w	r0, r0, #15
 8000a38:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3a:	bfa5      	ittet	ge
 8000a3c:	b2d2      	uxtbge	r2, r2
 8000a3e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a42:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a44:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000a48:	bd30      	pop	{r4, r5, pc}
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00
 8000a50:	e000ed14 	.word	0xe000ed14

08000a54 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000a54:	0942      	lsrs	r2, r0, #5
 8000a56:	2301      	movs	r3, #1
 8000a58:	f000 001f 	and.w	r0, r0, #31
 8000a5c:	fa03 f000 	lsl.w	r0, r3, r0
 8000a60:	4b01      	ldr	r3, [pc, #4]	; (8000a68 <HAL_NVIC_EnableIRQ+0x14>)
 8000a62:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000a66:	4770      	bx	lr
 8000a68:	e000e100 	.word	0xe000e100

08000a6c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a6c:	3801      	subs	r0, #1
 8000a6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a72:	d20a      	bcs.n	8000a8a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a76:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <HAL_SYSTICK_Config+0x28>)
 8000a78:	21f0      	movs	r1, #240	; 0xf0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a7a:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a80:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a82:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a84:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a8a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000e010 	.word	0xe000e010
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000a9a:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	bf0c      	ite	eq
 8000aa0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000aa4:	f022 0204 	bicne.w	r2, r2, #4
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	4770      	bx	lr
 8000aac:	e000e010 	.word	0xe000e010

08000ab0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000ab0:	4770      	bx	lr

08000ab2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000ab2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000ab4:	f7ff fffc 	bl	8000ab0 <HAL_SYSTICK_Callback>
 8000ab8:	bd08      	pop	{r3, pc}
	...

08000abc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000abc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 8000ac0:	2400      	movs	r4, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000ac2:	4626      	mov	r6, r4
 8000ac4:	4b62      	ldr	r3, [pc, #392]	; (8000c50 <HAL_GPIO_Init+0x194>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ac6:	f8df e194 	ldr.w	lr, [pc, #404]	; 8000c5c <HAL_GPIO_Init+0x1a0>
 8000aca:	f8df c194 	ldr.w	ip, [pc, #404]	; 8000c60 <HAL_GPIO_Init+0x1a4>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ace:	2201      	movs	r2, #1
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 8000ad0:	680d      	ldr	r5, [r1, #0]

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ad2:	40b2      	lsls	r2, r6
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 8000ad4:	ea32 0505 	bics.w	r5, r2, r5
 8000ad8:	f040 80b3 	bne.w	8000c42 <HAL_GPIO_Init+0x186>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000adc:	684d      	ldr	r5, [r1, #4]
 8000ade:	2d12      	cmp	r5, #18
 8000ae0:	d028      	beq.n	8000b34 <HAL_GPIO_Init+0x78>
 8000ae2:	d80e      	bhi.n	8000b02 <HAL_GPIO_Init+0x46>
 8000ae4:	2d02      	cmp	r5, #2
 8000ae6:	d022      	beq.n	8000b2e <HAL_GPIO_Init+0x72>
 8000ae8:	d804      	bhi.n	8000af4 <HAL_GPIO_Init+0x38>
 8000aea:	b335      	cbz	r5, 8000b3a <HAL_GPIO_Init+0x7e>
 8000aec:	2d01      	cmp	r5, #1
 8000aee:	d12d      	bne.n	8000b4c <HAL_GPIO_Init+0x90>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000af0:	68cc      	ldr	r4, [r1, #12]
          break;
 8000af2:	e02b      	b.n	8000b4c <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000af4:	2d03      	cmp	r5, #3
 8000af6:	d018      	beq.n	8000b2a <HAL_GPIO_Init+0x6e>
 8000af8:	2d11      	cmp	r5, #17
 8000afa:	d127      	bne.n	8000b4c <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000afc:	68cc      	ldr	r4, [r1, #12]
 8000afe:	3404      	adds	r4, #4
          break;
 8000b00:	e024      	b.n	8000b4c <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b02:	4f54      	ldr	r7, [pc, #336]	; (8000c54 <HAL_GPIO_Init+0x198>)
 8000b04:	42bd      	cmp	r5, r7
 8000b06:	d018      	beq.n	8000b3a <HAL_GPIO_Init+0x7e>
 8000b08:	d806      	bhi.n	8000b18 <HAL_GPIO_Init+0x5c>
 8000b0a:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8000c64 <HAL_GPIO_Init+0x1a8>
 8000b0e:	4545      	cmp	r5, r8
 8000b10:	d013      	beq.n	8000b3a <HAL_GPIO_Init+0x7e>
 8000b12:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8000b16:	e005      	b.n	8000b24 <HAL_GPIO_Init+0x68>
 8000b18:	4575      	cmp	r5, lr
 8000b1a:	d00e      	beq.n	8000b3a <HAL_GPIO_Init+0x7e>
 8000b1c:	4565      	cmp	r5, ip
 8000b1e:	d00c      	beq.n	8000b3a <HAL_GPIO_Init+0x7e>
 8000b20:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8000c68 <HAL_GPIO_Init+0x1ac>
 8000b24:	4545      	cmp	r5, r8
 8000b26:	d111      	bne.n	8000b4c <HAL_GPIO_Init+0x90>
 8000b28:	e007      	b.n	8000b3a <HAL_GPIO_Init+0x7e>
          }
          break; 
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b2a:	2400      	movs	r4, #0
 8000b2c:	e00e      	b.n	8000b4c <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b2e:	68cc      	ldr	r4, [r1, #12]
 8000b30:	3408      	adds	r4, #8
          break;
 8000b32:	e00b      	b.n	8000b4c <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b34:	68cc      	ldr	r4, [r1, #12]
 8000b36:	340c      	adds	r4, #12
          break;
 8000b38:	e008      	b.n	8000b4c <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8000b3a:	688c      	ldr	r4, [r1, #8]
 8000b3c:	b12c      	cbz	r4, 8000b4a <HAL_GPIO_Init+0x8e>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000b3e:	2c01      	cmp	r4, #1
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 8000b40:	bf0c      	ite	eq
 8000b42:	6102      	streq	r2, [r0, #16]
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000b44:	6142      	strne	r2, [r0, #20]
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b46:	2408      	movs	r4, #8
 8000b48:	e000      	b.n	8000b4c <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b4a:	2404      	movs	r4, #4
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b4c:	2aff      	cmp	r2, #255	; 0xff
 8000b4e:	bf97      	itett	ls
 8000b50:	4683      	movls	fp, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8000b52:	f1a6 0508 	subhi.w	r5, r6, #8
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b56:	f8d0 9000 	ldrls.w	r9, [r0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8000b5a:	00b5      	lslls	r5, r6, #2
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b5c:	bf84      	itt	hi
 8000b5e:	f8d0 9004 	ldrhi.w	r9, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8000b62:	00ad      	lslhi	r5, r5, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000b64:	f04f 080f 	mov.w	r8, #15
 8000b68:	fa08 fa05 	lsl.w	sl, r8, r5
 8000b6c:	ea29 090a 	bic.w	r9, r9, sl
 8000b70:	fa04 f505 	lsl.w	r5, r4, r5
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b74:	bf88      	it	hi
 8000b76:	f100 0b04 	addhi.w	fp, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000b7a:	ea49 0505 	orr.w	r5, r9, r5
 8000b7e:	f8cb 5000 	str.w	r5, [fp]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000b82:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8000b86:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 8000b8a:	d05a      	beq.n	8000c42 <HAL_GPIO_Init+0x186>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b8c:	4d32      	ldr	r5, [pc, #200]	; (8000c58 <HAL_GPIO_Init+0x19c>)
 8000b8e:	4f32      	ldr	r7, [pc, #200]	; (8000c58 <HAL_GPIO_Init+0x19c>)
 8000b90:	69ad      	ldr	r5, [r5, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b92:	f006 0a03 	and.w	sl, r6, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b96:	f045 0501 	orr.w	r5, r5, #1
 8000b9a:	61bd      	str	r5, [r7, #24]
 8000b9c:	69bd      	ldr	r5, [r7, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b9e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ba2:	f005 0501 	and.w	r5, r5, #1
 8000ba6:	9501      	str	r5, [sp, #4]
 8000ba8:	9d01      	ldr	r5, [sp, #4]
 8000baa:	f026 0503 	bic.w	r5, r6, #3
 8000bae:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8000bb2:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
 8000bb6:	f8d5 b008 	ldr.w	fp, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bba:	f5a7 3784 	sub.w	r7, r7, #67584	; 0x10800
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bbe:	fa08 f80a 	lsl.w	r8, r8, sl
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bc2:	42b8      	cmp	r0, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bc4:	ea2b 0808 	bic.w	r8, fp, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bc8:	d010      	beq.n	8000bec <HAL_GPIO_Init+0x130>
 8000bca:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000bce:	42b8      	cmp	r0, r7
 8000bd0:	d00f      	beq.n	8000bf2 <HAL_GPIO_Init+0x136>
 8000bd2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000bd6:	42b8      	cmp	r0, r7
 8000bd8:	d00e      	beq.n	8000bf8 <HAL_GPIO_Init+0x13c>
 8000bda:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000bde:	42b8      	cmp	r0, r7
 8000be0:	bf0c      	ite	eq
 8000be2:	f04f 0b03 	moveq.w	fp, #3
 8000be6:	f04f 0b04 	movne.w	fp, #4
 8000bea:	e007      	b.n	8000bfc <HAL_GPIO_Init+0x140>
 8000bec:	f04f 0b00 	mov.w	fp, #0
 8000bf0:	e004      	b.n	8000bfc <HAL_GPIO_Init+0x140>
 8000bf2:	f04f 0b01 	mov.w	fp, #1
 8000bf6:	e001      	b.n	8000bfc <HAL_GPIO_Init+0x140>
 8000bf8:	f04f 0b02 	mov.w	fp, #2
 8000bfc:	fa0b fa0a 	lsl.w	sl, fp, sl
 8000c00:	ea4a 0a08 	orr.w	sl, sl, r8
        AFIO->EXTICR[position >> 2] = temp;
 8000c04:	f8c5 a008 	str.w	sl, [r5, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000c08:	681d      	ldr	r5, [r3, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        AFIO->EXTICR[position >> 2] = temp;
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c0a:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000c0e:	bf14      	ite	ne
 8000c10:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000c12:	4395      	biceq	r5, r2
 8000c14:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000c16:	685d      	ldr	r5, [r3, #4]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c18:	f419 3f00 	tst.w	r9, #131072	; 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000c1c:	bf14      	ite	ne
 8000c1e:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8000c20:	4395      	biceq	r5, r2
 8000c22:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000c24:	689d      	ldr	r5, [r3, #8]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c26:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000c2a:	bf14      	ite	ne
 8000c2c:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000c2e:	4395      	biceq	r5, r2
 8000c30:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000c32:	68dd      	ldr	r5, [r3, #12]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c34:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000c38:	bf14      	ite	ne
 8000c3a:	432a      	orrne	r2, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000c3c:	ea25 0202 	biceq.w	r2, r5, r2
 8000c40:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000c42:	3601      	adds	r6, #1
 8000c44:	2e10      	cmp	r6, #16
 8000c46:	f47f af42 	bne.w	8000ace <HAL_GPIO_Init+0x12>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 8000c4a:	b003      	add	sp, #12
 8000c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c50:	40010400 	.word	0x40010400
 8000c54:	10210000 	.word	0x10210000
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	10310000 	.word	0x10310000
 8000c60:	10320000 	.word	0x10320000
 8000c64:	10110000 	.word	0x10110000
 8000c68:	10220000 	.word	0x10220000

08000c6c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c6c:	b902      	cbnz	r2, 8000c70 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000c6e:	0409      	lsls	r1, r1, #16
 8000c70:	6101      	str	r1, [r0, #16]
 8000c72:	4770      	bx	lr

08000c74 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c74:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c76:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c7a:	07dc      	lsls	r4, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c7c:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c7e:	d403      	bmi.n	8000c88 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c80:	682b      	ldr	r3, [r5, #0]
 8000c82:	0798      	lsls	r0, r3, #30
 8000c84:	d473      	bmi.n	8000d6e <HAL_RCC_OscConfig+0xfa>
 8000c86:	e0f2      	b.n	8000e6e <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c88:	4cb9      	ldr	r4, [pc, #740]	; (8000f70 <HAL_RCC_OscConfig+0x2fc>)
 8000c8a:	6863      	ldr	r3, [r4, #4]
 8000c8c:	f003 030c 	and.w	r3, r3, #12
 8000c90:	2b04      	cmp	r3, #4
 8000c92:	d007      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c94:	6863      	ldr	r3, [r4, #4]
 8000c96:	f003 030c 	and.w	r3, r3, #12
 8000c9a:	2b08      	cmp	r3, #8
 8000c9c:	d116      	bne.n	8000ccc <HAL_RCC_OscConfig+0x58>
 8000c9e:	6863      	ldr	r3, [r4, #4]
 8000ca0:	03d9      	lsls	r1, r3, #15
 8000ca2:	d513      	bpl.n	8000ccc <HAL_RCC_OscConfig+0x58>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ca4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ca8:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cac:	6822      	ldr	r2, [r4, #0]
 8000cae:	fa93 f3a3 	rbit	r3, r3
 8000cb2:	fab3 f383 	clz	r3, r3
 8000cb6:	f003 031f 	and.w	r3, r3, #31
 8000cba:	fa22 f303 	lsr.w	r3, r2, r3
 8000cbe:	07da      	lsls	r2, r3, #31
 8000cc0:	d5de      	bpl.n	8000c80 <HAL_RCC_OscConfig+0xc>
 8000cc2:	686b      	ldr	r3, [r5, #4]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d1db      	bne.n	8000c80 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000cc8:	2001      	movs	r0, #1
 8000cca:	e22d      	b.n	8001128 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ccc:	686b      	ldr	r3, [r5, #4]
 8000cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd2:	d015      	beq.n	8000d00 <HAL_RCC_OscConfig+0x8c>
 8000cd4:	b96b      	cbnz	r3, 8000cf2 <HAL_RCC_OscConfig+0x7e>
 8000cd6:	6823      	ldr	r3, [r4, #0]
 8000cd8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ce0:	6023      	str	r3, [r4, #0]
 8000ce2:	6823      	ldr	r3, [r4, #0]
 8000ce4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ce8:	6023      	str	r3, [r4, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cea:	f7ff fc97 	bl	800061c <HAL_GetTick>
 8000cee:	4607      	mov	r7, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cf0:	e02f      	b.n	8000d52 <HAL_RCC_OscConfig+0xde>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cf2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cf6:	6823      	ldr	r3, [r4, #0]
 8000cf8:	d106      	bne.n	8000d08 <HAL_RCC_OscConfig+0x94>
 8000cfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cfe:	6023      	str	r3, [r4, #0]
 8000d00:	6823      	ldr	r3, [r4, #0]
 8000d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d06:	e005      	b.n	8000d14 <HAL_RCC_OscConfig+0xa0>
 8000d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d0c:	6023      	str	r3, [r4, #0]
 8000d0e:	6823      	ldr	r3, [r4, #0]
 8000d10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d14:	6023      	str	r3, [r4, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d16:	f7ff fc81 	bl	800061c <HAL_GetTick>
 8000d1a:	4607      	mov	r7, r0
 8000d1c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000d20:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d24:	6822      	ldr	r2, [r4, #0]
 8000d26:	fa96 f3a6 	rbit	r3, r6
 8000d2a:	fab3 f383 	clz	r3, r3
 8000d2e:	f003 031f 	and.w	r3, r3, #31
 8000d32:	fa22 f303 	lsr.w	r3, r2, r3
 8000d36:	07db      	lsls	r3, r3, #31
 8000d38:	d4a2      	bmi.n	8000c80 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d3a:	f7ff fc6f 	bl	800061c <HAL_GetTick>
 8000d3e:	1bc0      	subs	r0, r0, r7
 8000d40:	2864      	cmp	r0, #100	; 0x64
 8000d42:	d9ed      	bls.n	8000d20 <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 8000d44:	2003      	movs	r0, #3
 8000d46:	e1ef      	b.n	8001128 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d48:	f7ff fc68 	bl	800061c <HAL_GetTick>
 8000d4c:	1bc0      	subs	r0, r0, r7
 8000d4e:	2864      	cmp	r0, #100	; 0x64
 8000d50:	d8f8      	bhi.n	8000d44 <HAL_RCC_OscConfig+0xd0>
 8000d52:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d56:	6822      	ldr	r2, [r4, #0]
 8000d58:	fa96 f3a6 	rbit	r3, r6
 8000d5c:	fab3 f383 	clz	r3, r3
 8000d60:	f003 031f 	and.w	r3, r3, #31
 8000d64:	fa22 f303 	lsr.w	r3, r2, r3
 8000d68:	07d8      	lsls	r0, r3, #31
 8000d6a:	d4ed      	bmi.n	8000d48 <HAL_RCC_OscConfig+0xd4>
 8000d6c:	e788      	b.n	8000c80 <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d6e:	4c80      	ldr	r4, [pc, #512]	; (8000f70 <HAL_RCC_OscConfig+0x2fc>)
 8000d70:	6863      	ldr	r3, [r4, #4]
 8000d72:	f013 0f0c 	tst.w	r3, #12
 8000d76:	d007      	beq.n	8000d88 <HAL_RCC_OscConfig+0x114>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d78:	6863      	ldr	r3, [r4, #4]
 8000d7a:	f003 030c 	and.w	r3, r3, #12
 8000d7e:	2b08      	cmp	r3, #8
 8000d80:	d121      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x152>
 8000d82:	6863      	ldr	r3, [r4, #4]
 8000d84:	03d9      	lsls	r1, r3, #15
 8000d86:	d41e      	bmi.n	8000dc6 <HAL_RCC_OscConfig+0x152>
 8000d88:	2302      	movs	r3, #2
 8000d8a:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d8e:	6822      	ldr	r2, [r4, #0]
 8000d90:	fa93 f3a3 	rbit	r3, r3
 8000d94:	fab3 f383 	clz	r3, r3
 8000d98:	f003 031f 	and.w	r3, r3, #31
 8000d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000da0:	07da      	lsls	r2, r3, #31
 8000da2:	d502      	bpl.n	8000daa <HAL_RCC_OscConfig+0x136>
 8000da4:	692b      	ldr	r3, [r5, #16]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d18e      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000daa:	6823      	ldr	r3, [r4, #0]
 8000dac:	22f8      	movs	r2, #248	; 0xf8
 8000dae:	fa92 f2a2 	rbit	r2, r2
 8000db2:	fab2 f282 	clz	r2, r2
 8000db6:	6969      	ldr	r1, [r5, #20]
 8000db8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dc4:	e053      	b.n	8000e6e <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dc6:	692a      	ldr	r2, [r5, #16]
 8000dc8:	2301      	movs	r3, #1
 8000dca:	b37a      	cbz	r2, 8000e2c <HAL_RCC_OscConfig+0x1b8>
 8000dcc:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	0092      	lsls	r2, r2, #2
 8000dd6:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8000dda:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 8000dde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de0:	f7ff fc1c 	bl	800061c <HAL_GetTick>
 8000de4:	4607      	mov	r7, r0
 8000de6:	2602      	movs	r6, #2
 8000de8:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dec:	4860      	ldr	r0, [pc, #384]	; (8000f70 <HAL_RCC_OscConfig+0x2fc>)
 8000dee:	6822      	ldr	r2, [r4, #0]
 8000df0:	fa96 f3a6 	rbit	r3, r6
 8000df4:	fab3 f383 	clz	r3, r3
 8000df8:	f003 031f 	and.w	r3, r3, #31
 8000dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8000e00:	07db      	lsls	r3, r3, #31
 8000e02:	d405      	bmi.n	8000e10 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e04:	f7ff fc0a 	bl	800061c <HAL_GetTick>
 8000e08:	1bc0      	subs	r0, r0, r7
 8000e0a:	2802      	cmp	r0, #2
 8000e0c:	d9ec      	bls.n	8000de8 <HAL_RCC_OscConfig+0x174>
 8000e0e:	e799      	b.n	8000d44 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e10:	6803      	ldr	r3, [r0, #0]
 8000e12:	22f8      	movs	r2, #248	; 0xf8
 8000e14:	fa92 f2a2 	rbit	r2, r2
 8000e18:	fab2 f282 	clz	r2, r2
 8000e1c:	6969      	ldr	r1, [r5, #20]
 8000e1e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e22:	fa01 f202 	lsl.w	r2, r1, r2
 8000e26:	4313      	orrs	r3, r2
 8000e28:	6003      	str	r3, [r0, #0]
 8000e2a:	e020      	b.n	8000e6e <HAL_RCC_OscConfig+0x1fa>
 8000e2c:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e30:	fab3 f383 	clz	r3, r3
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000e3a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000e3e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e40:	f7ff fbec 	bl	800061c <HAL_GetTick>
 8000e44:	4607      	mov	r7, r0
 8000e46:	2602      	movs	r6, #2
 8000e48:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e4c:	6822      	ldr	r2, [r4, #0]
 8000e4e:	fa96 f3a6 	rbit	r3, r6
 8000e52:	fab3 f383 	clz	r3, r3
 8000e56:	f003 031f 	and.w	r3, r3, #31
 8000e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e5e:	07d9      	lsls	r1, r3, #31
 8000e60:	d505      	bpl.n	8000e6e <HAL_RCC_OscConfig+0x1fa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e62:	f7ff fbdb 	bl	800061c <HAL_GetTick>
 8000e66:	1bc0      	subs	r0, r0, r7
 8000e68:	2802      	cmp	r0, #2
 8000e6a:	d9ed      	bls.n	8000e48 <HAL_RCC_OscConfig+0x1d4>
 8000e6c:	e76a      	b.n	8000d44 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e6e:	682b      	ldr	r3, [r5, #0]
 8000e70:	071a      	lsls	r2, r3, #28
 8000e72:	d546      	bpl.n	8000f02 <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e74:	69aa      	ldr	r2, [r5, #24]
 8000e76:	4c3e      	ldr	r4, [pc, #248]	; (8000f70 <HAL_RCC_OscConfig+0x2fc>)
 8000e78:	2301      	movs	r3, #1
 8000e7a:	493e      	ldr	r1, [pc, #248]	; (8000f74 <HAL_RCC_OscConfig+0x300>)
 8000e7c:	b312      	cbz	r2, 8000ec4 <HAL_RCC_OscConfig+0x250>
 8000e7e:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e82:	fab2 f282 	clz	r2, r2
 8000e86:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e8a:	f7ff fbc7 	bl	800061c <HAL_GetTick>
 8000e8e:	4607      	mov	r7, r0
 8000e90:	2602      	movs	r6, #2
 8000e92:	fa96 f3a6 	rbit	r3, r6
 8000e96:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e9c:	fa96 f3a6 	rbit	r3, r6
 8000ea0:	fab3 f383 	clz	r3, r3
 8000ea4:	f003 031f 	and.w	r3, r3, #31
 8000ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8000eac:	07db      	lsls	r3, r3, #31
 8000eae:	d405      	bmi.n	8000ebc <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eb0:	f7ff fbb4 	bl	800061c <HAL_GetTick>
 8000eb4:	1bc0      	subs	r0, r0, r7
 8000eb6:	2802      	cmp	r0, #2
 8000eb8:	d9eb      	bls.n	8000e92 <HAL_RCC_OscConfig+0x21e>
 8000eba:	e743      	b.n	8000d44 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f7ff fbb3 	bl	8000628 <HAL_Delay>
 8000ec2:	e01e      	b.n	8000f02 <HAL_RCC_OscConfig+0x28e>
 8000ec4:	fa93 f3a3 	rbit	r3, r3
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ec8:	fab3 f383 	clz	r3, r3
 8000ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed0:	f7ff fba4 	bl	800061c <HAL_GetTick>
 8000ed4:	4607      	mov	r7, r0
 8000ed6:	2602      	movs	r6, #2
 8000ed8:	fa96 f3a6 	rbit	r3, r6
 8000edc:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ee2:	fa96 f3a6 	rbit	r3, r6
 8000ee6:	fab3 f383 	clz	r3, r3
 8000eea:	f003 031f 	and.w	r3, r3, #31
 8000eee:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef2:	07d8      	lsls	r0, r3, #31
 8000ef4:	d505      	bpl.n	8000f02 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ef6:	f7ff fb91 	bl	800061c <HAL_GetTick>
 8000efa:	1bc0      	subs	r0, r0, r7
 8000efc:	2802      	cmp	r0, #2
 8000efe:	d9eb      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x264>
 8000f00:	e720      	b.n	8000d44 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f02:	682b      	ldr	r3, [r5, #0]
 8000f04:	0759      	lsls	r1, r3, #29
 8000f06:	d404      	bmi.n	8000f12 <HAL_RCC_OscConfig+0x29e>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f08:	69ea      	ldr	r2, [r5, #28]
 8000f0a:	2a00      	cmp	r2, #0
 8000f0c:	f040 8081 	bne.w	8001012 <HAL_RCC_OscConfig+0x39e>
 8000f10:	e0d8      	b.n	80010c4 <HAL_RCC_OscConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f12:	4c17      	ldr	r4, [pc, #92]	; (8000f70 <HAL_RCC_OscConfig+0x2fc>)
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f14:	4e18      	ldr	r6, [pc, #96]	; (8000f78 <HAL_RCC_OscConfig+0x304>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	69e3      	ldr	r3, [r4, #28]
 8000f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f1c:	61e3      	str	r3, [r4, #28]
 8000f1e:	69e3      	ldr	r3, [r4, #28]
 8000f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f24:	9301      	str	r3, [sp, #4]
 8000f26:	9b01      	ldr	r3, [sp, #4]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f28:	6833      	ldr	r3, [r6, #0]
 8000f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2e:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f30:	f7ff fb74 	bl	800061c <HAL_GetTick>
 8000f34:	4607      	mov	r7, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000f36:	6833      	ldr	r3, [r6, #0]
 8000f38:	05da      	lsls	r2, r3, #23
 8000f3a:	d405      	bmi.n	8000f48 <HAL_RCC_OscConfig+0x2d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f3c:	f7ff fb6e 	bl	800061c <HAL_GetTick>
 8000f40:	1bc0      	subs	r0, r0, r7
 8000f42:	2864      	cmp	r0, #100	; 0x64
 8000f44:	d9f7      	bls.n	8000f36 <HAL_RCC_OscConfig+0x2c2>
 8000f46:	e6fd      	b.n	8000d44 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f48:	68eb      	ldr	r3, [r5, #12]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d01c      	beq.n	8000f88 <HAL_RCC_OscConfig+0x314>
 8000f4e:	b9ab      	cbnz	r3, 8000f7c <HAL_RCC_OscConfig+0x308>
 8000f50:	6a23      	ldr	r3, [r4, #32]
 8000f52:	2602      	movs	r6, #2
 8000f54:	f023 0301 	bic.w	r3, r3, #1
 8000f58:	6223      	str	r3, [r4, #32]
 8000f5a:	6a23      	ldr	r3, [r4, #32]
 8000f5c:	4637      	mov	r7, r6
 8000f5e:	f023 0304 	bic.w	r3, r3, #4
 8000f62:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f64:	f7ff fb5a 	bl	800061c <HAL_GetTick>
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f68:	f241 3988 	movw	r9, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f6c:	4680      	mov	r8, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f6e:	e048      	b.n	8001002 <HAL_RCC_OscConfig+0x38e>
 8000f70:	40021000 	.word	0x40021000
 8000f74:	42420480 	.word	0x42420480
 8000f78:	40007000 	.word	0x40007000
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f7c:	2b05      	cmp	r3, #5
 8000f7e:	6a23      	ldr	r3, [r4, #32]
 8000f80:	d106      	bne.n	8000f90 <HAL_RCC_OscConfig+0x31c>
 8000f82:	f043 0304 	orr.w	r3, r3, #4
 8000f86:	6223      	str	r3, [r4, #32]
 8000f88:	6a23      	ldr	r3, [r4, #32]
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	e005      	b.n	8000f9c <HAL_RCC_OscConfig+0x328>
 8000f90:	f023 0301 	bic.w	r3, r3, #1
 8000f94:	6223      	str	r3, [r4, #32]
 8000f96:	6a23      	ldr	r3, [r4, #32]
 8000f98:	f023 0304 	bic.w	r3, r3, #4
 8000f9c:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f9e:	f7ff fb3d 	bl	800061c <HAL_GetTick>
 8000fa2:	2602      	movs	r6, #2
 8000fa4:	4681      	mov	r9, r0
 8000fa6:	46b0      	mov	r8, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fa8:	f241 3788 	movw	r7, #5000	; 0x1388
 8000fac:	fa96 f3a6 	rbit	r3, r6
 8000fb0:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb4:	b10b      	cbz	r3, 8000fba <HAL_RCC_OscConfig+0x346>
 8000fb6:	6a22      	ldr	r2, [r4, #32]
 8000fb8:	e000      	b.n	8000fbc <HAL_RCC_OscConfig+0x348>
 8000fba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000fbc:	fa98 f3a8 	rbit	r3, r8
 8000fc0:	fab3 f383 	clz	r3, r3
 8000fc4:	f003 031f 	and.w	r3, r3, #31
 8000fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fcc:	07db      	lsls	r3, r3, #31
 8000fce:	d49b      	bmi.n	8000f08 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fd0:	f7ff fb24 	bl	800061c <HAL_GetTick>
 8000fd4:	ebc9 0000 	rsb	r0, r9, r0
 8000fd8:	42b8      	cmp	r0, r7
 8000fda:	d9e7      	bls.n	8000fac <HAL_RCC_OscConfig+0x338>
 8000fdc:	e6b2      	b.n	8000d44 <HAL_RCC_OscConfig+0xd0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fde:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000fe0:	fa97 f3a7 	rbit	r3, r7
 8000fe4:	fab3 f383 	clz	r3, r3
 8000fe8:	f003 031f 	and.w	r3, r3, #31
 8000fec:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff0:	07d8      	lsls	r0, r3, #31
 8000ff2:	d589      	bpl.n	8000f08 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ff4:	f7ff fb12 	bl	800061c <HAL_GetTick>
 8000ff8:	ebc8 0000 	rsb	r0, r8, r0
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	f63f aea1 	bhi.w	8000d44 <HAL_RCC_OscConfig+0xd0>
 8001002:	fa96 f3a6 	rbit	r3, r6
 8001006:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0e7      	beq.n	8000fde <HAL_RCC_OscConfig+0x36a>
 800100e:	6a22      	ldr	r2, [r4, #32]
 8001010:	e7e6      	b.n	8000fe0 <HAL_RCC_OscConfig+0x36c>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001012:	4c47      	ldr	r4, [pc, #284]	; (8001130 <HAL_RCC_OscConfig+0x4bc>)
 8001014:	6863      	ldr	r3, [r4, #4]
 8001016:	f003 030c 	and.w	r3, r3, #12
 800101a:	2b08      	cmp	r3, #8
 800101c:	f43f ae54 	beq.w	8000cc8 <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001020:	2a02      	cmp	r2, #2
 8001022:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001026:	d15c      	bne.n	80010e2 <HAL_RCC_OscConfig+0x46e>
 8001028:	fa93 f3a3 	rbit	r3, r3
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800102c:	fab3 f383 	clz	r3, r3
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001036:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103e:	f7ff faed 	bl	800061c <HAL_GetTick>
 8001042:	4680      	mov	r8, r0
 8001044:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8001048:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800104c:	4f38      	ldr	r7, [pc, #224]	; (8001130 <HAL_RCC_OscConfig+0x4bc>)
 800104e:	6822      	ldr	r2, [r4, #0]
 8001050:	fa96 f3a6 	rbit	r3, r6
 8001054:	fab3 f383 	clz	r3, r3
 8001058:	f003 031f 	and.w	r3, r3, #31
 800105c:	fa22 f303 	lsr.w	r3, r2, r3
 8001060:	07d9      	lsls	r1, r3, #31
 8001062:	d431      	bmi.n	80010c8 <HAL_RCC_OscConfig+0x454>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001064:	6a2e      	ldr	r6, [r5, #32]
 8001066:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 800106a:	d105      	bne.n	8001078 <HAL_RCC_OscConfig+0x404>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	f421 3000 	bic.w	r0, r1, #131072	; 0x20000
 8001072:	68a9      	ldr	r1, [r5, #8]
 8001074:	4301      	orrs	r1, r0
 8001076:	6079      	str	r1, [r7, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001078:	6863      	ldr	r3, [r4, #4]
 800107a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800107c:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001080:	4332      	orrs	r2, r6
 8001082:	4313      	orrs	r3, r2
 8001084:	6063      	str	r3, [r4, #4]
 8001086:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800108a:	fa93 f3a3 	rbit	r3, r3
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800108e:	fab3 f383 	clz	r3, r3
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001098:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800109c:	2201      	movs	r2, #1
 800109e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a0:	f7ff fabc 	bl	800061c <HAL_GetTick>
 80010a4:	4606      	mov	r6, r0
 80010a6:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80010aa:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010ae:	6822      	ldr	r2, [r4, #0]
 80010b0:	fa95 f3a5 	rbit	r3, r5
 80010b4:	fab3 f383 	clz	r3, r3
 80010b8:	f003 031f 	and.w	r3, r3, #31
 80010bc:	fa22 f303 	lsr.w	r3, r2, r3
 80010c0:	07da      	lsls	r2, r3, #31
 80010c2:	d508      	bpl.n	80010d6 <HAL_RCC_OscConfig+0x462>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80010c4:	2000      	movs	r0, #0
 80010c6:	e02f      	b.n	8001128 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010c8:	f7ff faa8 	bl	800061c <HAL_GetTick>
 80010cc:	ebc8 0000 	rsb	r0, r8, r0
 80010d0:	2802      	cmp	r0, #2
 80010d2:	d9b9      	bls.n	8001048 <HAL_RCC_OscConfig+0x3d4>
 80010d4:	e636      	b.n	8000d44 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010d6:	f7ff faa1 	bl	800061c <HAL_GetTick>
 80010da:	1b80      	subs	r0, r0, r6
 80010dc:	2802      	cmp	r0, #2
 80010de:	d9e4      	bls.n	80010aa <HAL_RCC_OscConfig+0x436>
 80010e0:	e630      	b.n	8000d44 <HAL_RCC_OscConfig+0xd0>
 80010e2:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010e6:	fab3 f383 	clz	r3, r3
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80010f0:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f8:	f7ff fa90 	bl	800061c <HAL_GetTick>
 80010fc:	4606      	mov	r6, r0
 80010fe:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001102:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001106:	6822      	ldr	r2, [r4, #0]
 8001108:	fa95 f3a5 	rbit	r3, r5
 800110c:	fab3 f383 	clz	r3, r3
 8001110:	f003 031f 	and.w	r3, r3, #31
 8001114:	fa22 f303 	lsr.w	r3, r2, r3
 8001118:	07db      	lsls	r3, r3, #31
 800111a:	d5d3      	bpl.n	80010c4 <HAL_RCC_OscConfig+0x450>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800111c:	f7ff fa7e 	bl	800061c <HAL_GetTick>
 8001120:	1b80      	subs	r0, r0, r6
 8001122:	2802      	cmp	r0, #2
 8001124:	d9ed      	bls.n	8001102 <HAL_RCC_OscConfig+0x48e>
 8001126:	e60d      	b.n	8000d44 <HAL_RCC_OscConfig+0xd0>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8001128:	b003      	add	sp, #12
 800112a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000

08001134 <HAL_RCC_GetSysClockFreq>:
{
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001134:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <HAL_RCC_GetSysClockFreq+0x80>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001136:	b570      	push	{r4, r5, r6, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001138:	f103 0510 	add.w	r5, r3, #16
 800113c:	462e      	mov	r6, r5
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800113e:	b086      	sub	sp, #24
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001140:	ac02      	add	r4, sp, #8
 8001142:	4622      	mov	r2, r4
 8001144:	6818      	ldr	r0, [r3, #0]
 8001146:	6859      	ldr	r1, [r3, #4]
 8001148:	3308      	adds	r3, #8
 800114a:	c203      	stmia	r2!, {r0, r1}
 800114c:	42ab      	cmp	r3, r5
 800114e:	4614      	mov	r4, r2
 8001150:	d1f7      	bne.n	8001142 <HAL_RCC_GetSysClockFreq+0xe>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8001152:	8833      	ldrh	r3, [r6, #0]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8001154:	4c18      	ldr	r4, [pc, #96]	; (80011b8 <HAL_RCC_GetSysClockFreq+0x84>)
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8001156:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 800115a:	6860      	ldr	r0, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800115c:	f000 030c 	and.w	r3, r0, #12
 8001160:	2b08      	cmp	r3, #8
 8001162:	d124      	bne.n	80011ae <HAL_RCC_GetSysClockFreq+0x7a>
 8001164:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001168:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 800116c:	fab3 f383 	clz	r3, r3
 8001170:	f400 1270 	and.w	r2, r0, #3932160	; 0x3c0000
 8001174:	fa22 f303 	lsr.w	r3, r2, r3
 8001178:	aa06      	add	r2, sp, #24
 800117a:	4413      	add	r3, r2
 800117c:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001180:	03c3      	lsls	r3, r0, #15
 8001182:	d511      	bpl.n	80011a8 <HAL_RCC_GetSysClockFreq+0x74>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8001184:	6862      	ldr	r2, [r4, #4]
 8001186:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800118a:	fa93 f3a3 	rbit	r3, r3
 800118e:	fab3 f083 	clz	r0, r3
 8001192:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8001196:	40c3      	lsrs	r3, r0
 8001198:	aa06      	add	r2, sp, #24
 800119a:	4413      	add	r3, r2
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 800119c:	f813 0c14 	ldrb.w	r0, [r3, #-20]
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_RCC_GetSysClockFreq+0x88>)
 80011a2:	fbb3 f0f0 	udiv	r0, r3, r0
 80011a6:	e000      	b.n	80011aa <HAL_RCC_GetSysClockFreq+0x76>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <HAL_RCC_GetSysClockFreq+0x8c>)
 80011aa:	4348      	muls	r0, r1
 80011ac:	e000      	b.n	80011b0 <HAL_RCC_GetSysClockFreq+0x7c>
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011ae:	4803      	ldr	r0, [pc, #12]	; (80011bc <HAL_RCC_GetSysClockFreq+0x88>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80011b0:	b006      	add	sp, #24
 80011b2:	bd70      	pop	{r4, r5, r6, pc}
 80011b4:	08001888 	.word	0x08001888
 80011b8:	40021000 	.word	0x40021000
 80011bc:	007a1200 	.word	0x007a1200
 80011c0:	003d0900 	.word	0x003d0900

080011c4 <HAL_RCC_ClockConfig>:
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011c4:	4a54      	ldr	r2, [pc, #336]	; (8001318 <HAL_RCC_ClockConfig+0x154>)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011ca:	6813      	ldr	r3, [r2, #0]
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011cc:	4606      	mov	r6, r0
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011d4:	460d      	mov	r5, r1
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011d6:	d30a      	bcc.n	80011ee <HAL_RCC_ClockConfig+0x2a>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011d8:	6831      	ldr	r1, [r6, #0]
 80011da:	078c      	lsls	r4, r1, #30
 80011dc:	d514      	bpl.n	8001208 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011de:	484f      	ldr	r0, [pc, #316]	; (800131c <HAL_RCC_ClockConfig+0x158>)
 80011e0:	6843      	ldr	r3, [r0, #4]
 80011e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011e6:	68b3      	ldr	r3, [r6, #8]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	6043      	str	r3, [r0, #4]
 80011ec:	e00c      	b.n	8001208 <HAL_RCC_ClockConfig+0x44>
#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ee:	6813      	ldr	r3, [r2, #0]
 80011f0:	f023 0307 	bic.w	r3, r3, #7
 80011f4:	430b      	orrs	r3, r1
 80011f6:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011f8:	6813      	ldr	r3, [r2, #0]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	4299      	cmp	r1, r3
 8001200:	d0ea      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8001202:	2001      	movs	r0, #1
 8001204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001208:	07c8      	lsls	r0, r1, #31
 800120a:	d406      	bmi.n	800121a <HAL_RCC_ClockConfig+0x56>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800120c:	4a42      	ldr	r2, [pc, #264]	; (8001318 <HAL_RCC_ClockConfig+0x154>)
 800120e:	6813      	ldr	r3, [r2, #0]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	429d      	cmp	r5, r3
 8001216:	d34a      	bcc.n	80012ae <HAL_RCC_ClockConfig+0xea>
 8001218:	e053      	b.n	80012c2 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800121a:	6872      	ldr	r2, [r6, #4]
 800121c:	4c3f      	ldr	r4, [pc, #252]	; (800131c <HAL_RCC_ClockConfig+0x158>)
 800121e:	2a01      	cmp	r2, #1
 8001220:	d102      	bne.n	8001228 <HAL_RCC_ClockConfig+0x64>
 8001222:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001226:	e004      	b.n	8001232 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001228:	2a02      	cmp	r2, #2
 800122a:	bf0c      	ite	eq
 800122c:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001230:	2302      	movne	r3, #2
 8001232:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001236:	6821      	ldr	r1, [r4, #0]
 8001238:	fa93 f3a3 	rbit	r3, r3
 800123c:	fab3 f383 	clz	r3, r3
 8001240:	f003 031f 	and.w	r3, r3, #31
 8001244:	fa21 f303 	lsr.w	r3, r1, r3
 8001248:	07d9      	lsls	r1, r3, #31
 800124a:	d5da      	bpl.n	8001202 <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800124c:	6863      	ldr	r3, [r4, #4]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800124e:	f241 3888 	movw	r8, #5000	; 0x1388
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001252:	f023 0303 	bic.w	r3, r3, #3
 8001256:	431a      	orrs	r2, r3
 8001258:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800125a:	f7ff f9df 	bl	800061c <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800125e:	6873      	ldr	r3, [r6, #4]
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001260:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001262:	2b01      	cmp	r3, #1
 8001264:	d10c      	bne.n	8001280 <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001266:	6863      	ldr	r3, [r4, #4]
 8001268:	f003 030c 	and.w	r3, r3, #12
 800126c:	2b04      	cmp	r3, #4
 800126e:	d0cd      	beq.n	800120c <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001270:	f7ff f9d4 	bl	800061c <HAL_GetTick>
 8001274:	1bc0      	subs	r0, r0, r7
 8001276:	4540      	cmp	r0, r8
 8001278:	d9f5      	bls.n	8001266 <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 800127a:	2003      	movs	r0, #3
 800127c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001280:	2b02      	cmp	r3, #2
 8001282:	d10f      	bne.n	80012a4 <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001284:	6863      	ldr	r3, [r4, #4]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b08      	cmp	r3, #8
 800128c:	d0be      	beq.n	800120c <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800128e:	f7ff f9c5 	bl	800061c <HAL_GetTick>
 8001292:	1bc0      	subs	r0, r0, r7
 8001294:	4540      	cmp	r0, r8
 8001296:	d9f5      	bls.n	8001284 <HAL_RCC_ClockConfig+0xc0>
 8001298:	e7ef      	b.n	800127a <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800129a:	f7ff f9bf 	bl	800061c <HAL_GetTick>
 800129e:	1bc0      	subs	r0, r0, r7
 80012a0:	4540      	cmp	r0, r8
 80012a2:	d8ea      	bhi.n	800127a <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80012a4:	6863      	ldr	r3, [r4, #4]
 80012a6:	f013 0f0c 	tst.w	r3, #12
 80012aa:	d1f6      	bne.n	800129a <HAL_RCC_ClockConfig+0xd6>
 80012ac:	e7ae      	b.n	800120c <HAL_RCC_ClockConfig+0x48>
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ae:	6813      	ldr	r3, [r2, #0]
 80012b0:	f023 0307 	bic.w	r3, r3, #7
 80012b4:	432b      	orrs	r3, r5
 80012b6:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012b8:	6813      	ldr	r3, [r2, #0]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	429d      	cmp	r5, r3
 80012c0:	d19f      	bne.n	8001202 <HAL_RCC_ClockConfig+0x3e>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c2:	6831      	ldr	r1, [r6, #0]
 80012c4:	4c15      	ldr	r4, [pc, #84]	; (800131c <HAL_RCC_ClockConfig+0x158>)
 80012c6:	f011 0f04 	tst.w	r1, #4
 80012ca:	d005      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012cc:	6863      	ldr	r3, [r4, #4]
 80012ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012d2:	68f3      	ldr	r3, [r6, #12]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012d8:	070b      	lsls	r3, r1, #28
 80012da:	d506      	bpl.n	80012ea <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012dc:	6863      	ldr	r3, [r4, #4]
 80012de:	6932      	ldr	r2, [r6, #16]
 80012e0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80012e4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80012e8:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80012ea:	f7ff ff23 	bl	8001134 <HAL_RCC_GetSysClockFreq>
 80012ee:	6863      	ldr	r3, [r4, #4]
 80012f0:	22f0      	movs	r2, #240	; 0xf0
 80012f2:	fa92 f2a2 	rbit	r2, r2
 80012f6:	fab2 f282 	clz	r2, r2
 80012fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012fe:	40d3      	lsrs	r3, r2
 8001300:	4a07      	ldr	r2, [pc, #28]	; (8001320 <HAL_RCC_ClockConfig+0x15c>)
 8001302:	5cd3      	ldrb	r3, [r2, r3]
 8001304:	40d8      	lsrs	r0, r3
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <HAL_RCC_ClockConfig+0x160>)
 8001308:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800130a:	2000      	movs	r0, #0
 800130c:	f7ff f95a 	bl	80005c4 <HAL_InitTick>
  
  return HAL_OK;
 8001310:	2000      	movs	r0, #0
}
 8001312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001316:	bf00      	nop
 8001318:	40022000 	.word	0x40022000
 800131c:	40021000 	.word	0x40021000
 8001320:	0800189a 	.word	0x0800189a
 8001324:	20000000 	.word	0x20000000

08001328 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001328:	4b01      	ldr	r3, [pc, #4]	; (8001330 <HAL_RCC_GetHCLKFreq+0x8>)
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000000 	.word	0x20000000

08001334 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001336:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	fa92 f2a2 	rbit	r2, r2
 8001340:	fab2 f282 	clz	r2, r2
 8001344:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001348:	40d3      	lsrs	r3, r2
 800134a:	4a04      	ldr	r2, [pc, #16]	; (800135c <HAL_RCC_GetPCLK1Freq+0x28>)
 800134c:	5cd3      	ldrb	r3, [r2, r3]
 800134e:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001350:	6810      	ldr	r0, [r2, #0]
}    
 8001352:	40d8      	lsrs	r0, r3
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000
 800135c:	080018aa 	.word	0x080018aa
 8001360:	20000000 	.word	0x20000000

08001364 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001366:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	fa92 f2a2 	rbit	r2, r2
 8001370:	fab2 f282 	clz	r2, r2
 8001374:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001378:	40d3      	lsrs	r3, r2
 800137a:	4a04      	ldr	r2, [pc, #16]	; (800138c <HAL_RCC_GetPCLK2Freq+0x28>)
 800137c:	5cd3      	ldrb	r3, [r2, r3]
 800137e:	4a04      	ldr	r2, [pc, #16]	; (8001390 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001380:	6810      	ldr	r0, [r2, #0]
} 
 8001382:	40d8      	lsrs	r0, r3
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000
 800138c:	080018aa 	.word	0x080018aa
 8001390:	20000000 	.word	0x20000000

08001394 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001398:	6806      	ldr	r6, [r0, #0]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
  MODIFY_REG(huart->Instance->CR1, 
 800139a:	6881      	ldr	r1, [r0, #8]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800139c:	6933      	ldr	r3, [r6, #16]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800139e:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80013a4:	68c3      	ldr	r3, [r0, #12]
 80013a6:	2419      	movs	r4, #25
 80013a8:	4313      	orrs	r3, r2
 80013aa:	6133      	str	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
  MODIFY_REG(huart->Instance->CR1, 
 80013ac:	6903      	ldr	r3, [r0, #16]
 80013ae:	68f2      	ldr	r2, [r6, #12]
 80013b0:	4319      	orrs	r1, r3
 80013b2:	6943      	ldr	r3, [r0, #20]
 80013b4:	4319      	orrs	r1, r3
 80013b6:	f422 53b0 	bic.w	r3, r2, #5632	; 0x1600
 80013ba:	f023 030c 	bic.w	r3, r3, #12
 80013be:	430b      	orrs	r3, r1
 80013c0:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80013c2:	6973      	ldr	r3, [r6, #20]
 80013c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80013c8:	6983      	ldr	r3, [r0, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	6173      	str	r3, [r6, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 80013ce:	4b3d      	ldr	r3, [pc, #244]	; (80014c4 <UART_SetConfig+0x130>)
 80013d0:	429e      	cmp	r6, r3
 80013d2:	d131      	bne.n	8001438 <UART_SetConfig+0xa4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80013d4:	f7ff ffc6 	bl	8001364 <HAL_RCC_GetPCLK2Freq>
 80013d8:	4360      	muls	r0, r4
 80013da:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80013de:	f04f 0864 	mov.w	r8, #100	; 0x64
 80013e2:	00bf      	lsls	r7, r7, #2
 80013e4:	fbb0 f7f7 	udiv	r7, r0, r7
 80013e8:	f7ff ffbc 	bl	8001364 <HAL_RCC_GetPCLK2Freq>
 80013ec:	4360      	muls	r0, r4
 80013ee:	f8d9 5004 	ldr.w	r5, [r9, #4]
 80013f2:	fbb7 f7f8 	udiv	r7, r7, r8
 80013f6:	00ad      	lsls	r5, r5, #2
 80013f8:	fbb0 f5f5 	udiv	r5, r0, r5
 80013fc:	f7ff ffb2 	bl	8001364 <HAL_RCC_GetPCLK2Freq>
 8001400:	4360      	muls	r0, r4
 8001402:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001406:	013f      	lsls	r7, r7, #4
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	fbb0 f0f3 	udiv	r0, r0, r3
 800140e:	fbb0 f0f8 	udiv	r0, r0, r8
 8001412:	fb08 5510 	mls	r5, r8, r0, r5
 8001416:	f7ff ffa5 	bl	8001364 <HAL_RCC_GetPCLK2Freq>
 800141a:	012d      	lsls	r5, r5, #4
 800141c:	3532      	adds	r5, #50	; 0x32
 800141e:	fbb5 f5f8 	udiv	r5, r5, r8
 8001422:	4360      	muls	r0, r4
 8001424:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8001428:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800142c:	0089      	lsls	r1, r1, #2
 800142e:	fbb0 faf1 	udiv	sl, r0, r1
 8001432:	f7ff ff97 	bl	8001364 <HAL_RCC_GetPCLK2Freq>
 8001436:	e030      	b.n	800149a <UART_SetConfig+0x106>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001438:	f7ff ff7c 	bl	8001334 <HAL_RCC_GetPCLK1Freq>
 800143c:	4360      	muls	r0, r4
 800143e:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8001442:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001446:	00bf      	lsls	r7, r7, #2
 8001448:	fbb0 f7f7 	udiv	r7, r0, r7
 800144c:	f7ff ff72 	bl	8001334 <HAL_RCC_GetPCLK1Freq>
 8001450:	4360      	muls	r0, r4
 8001452:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8001456:	fbb7 f7f8 	udiv	r7, r7, r8
 800145a:	00ad      	lsls	r5, r5, #2
 800145c:	fbb0 f5f5 	udiv	r5, r0, r5
 8001460:	f7ff ff68 	bl	8001334 <HAL_RCC_GetPCLK1Freq>
 8001464:	4360      	muls	r0, r4
 8001466:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800146a:	013f      	lsls	r7, r7, #4
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001472:	fbb0 f0f8 	udiv	r0, r0, r8
 8001476:	fb08 5510 	mls	r5, r8, r0, r5
 800147a:	f7ff ff5b 	bl	8001334 <HAL_RCC_GetPCLK1Freq>
 800147e:	012d      	lsls	r5, r5, #4
 8001480:	3532      	adds	r5, #50	; 0x32
 8001482:	fbb5 f5f8 	udiv	r5, r5, r8
 8001486:	4360      	muls	r0, r4
 8001488:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800148c:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001490:	0089      	lsls	r1, r1, #2
 8001492:	fbb0 faf1 	udiv	sl, r0, r1
 8001496:	f7ff ff4d 	bl	8001334 <HAL_RCC_GetPCLK1Freq>
 800149a:	4344      	muls	r4, r0
 800149c:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80014a0:	0080      	lsls	r0, r0, #2
 80014a2:	fbb4 f0f0 	udiv	r0, r4, r0
 80014a6:	fbb0 f0f8 	udiv	r0, r0, r8
 80014aa:	fb08 a210 	mls	r2, r8, r0, sl
 80014ae:	0112      	lsls	r2, r2, #4
 80014b0:	3232      	adds	r2, #50	; 0x32
 80014b2:	fbb2 f3f8 	udiv	r3, r2, r8
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	442b      	add	r3, r5
 80014bc:	441f      	add	r7, r3
 80014be:	60b7      	str	r7, [r6, #8]
 80014c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014c4:	40013800 	.word	0x40013800

080014c8 <UART_WaitOnFlagUntilTimeout.constprop.1>:
  * @param  Flag: specifies the UART flag to check.
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 80014c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ca:	4604      	mov	r4, r0
 80014cc:	460e      	mov	r6, r1
 80014ce:	4615      	mov	r5, r2
{
  uint32_t tickstart = 0;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80014d0:	f7ff f8a4 	bl	800061c <HAL_GetTick>
 80014d4:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80014d6:	6822      	ldr	r2, [r4, #0]
 80014d8:	6813      	ldr	r3, [r2, #0]
 80014da:	ea36 0303 	bics.w	r3, r6, r3
 80014de:	d021      	beq.n	8001524 <UART_WaitOnFlagUntilTimeout.constprop.1+0x5c>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80014e0:	1c6b      	adds	r3, r5, #1
 80014e2:	d0f9      	beq.n	80014d8 <UART_WaitOnFlagUntilTimeout.constprop.1+0x10>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80014e4:	b9c5      	cbnz	r5, 8001518 <UART_WaitOnFlagUntilTimeout.constprop.1+0x50>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80014e6:	6823      	ldr	r3, [r4, #0]
          huart->State= HAL_UART_STATE_READY;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_TIMEOUT;
 80014e8:	2003      	movs	r0, #3
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014f0:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80014f2:	68da      	ldr	r2, [r3, #12]
 80014f4:	f022 0220 	bic.w	r2, r2, #32
 80014f8:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001500:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001502:	695a      	ldr	r2, [r3, #20]
 8001504:	f022 0201 	bic.w	r2, r2, #1
 8001508:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 800150a:	2301      	movs	r3, #1
 800150c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001510:	2300      	movs	r3, #0
 8001512:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001518:	f7ff f880 	bl	800061c <HAL_GetTick>
 800151c:	1bc0      	subs	r0, r0, r7
 800151e:	4285      	cmp	r5, r0
 8001520:	d2d9      	bcs.n	80014d6 <UART_WaitOnFlagUntilTimeout.constprop.1+0xe>
 8001522:	e7e0      	b.n	80014e6 <UART_WaitOnFlagUntilTimeout.constprop.1+0x1e>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8001524:	2000      	movs	r0, #0
}
 8001526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001528 <HAL_UART_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001528:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 800152a:	4604      	mov	r4, r0
 800152c:	b330      	cbz	r0, 800157c <HAL_UART_Init+0x54>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 800152e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001532:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001536:	b91b      	cbnz	r3, 8001540 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001538:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800153c:	f7fe ffd2 	bl	80004e4 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001540:	6822      	ldr	r2, [r4, #0]
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->State = HAL_UART_STATE_BUSY;
 8001542:	2302      	movs	r3, #2
 8001544:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001548:	68d3      	ldr	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800154a:	4620      	mov	r0, r4
  }

  huart->State = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800154c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001550:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001552:	f7ff ff1f 	bl	8001394 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001556:	6823      	ldr	r3, [r4, #0]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001558:	2000      	movs	r0, #0
  UART_SetConfig(huart);
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800155a:	691a      	ldr	r2, [r3, #16]
 800155c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001562:	695a      	ldr	r2, [r3, #20]
 8001564:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001568:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800156a:	68da      	ldr	r2, [r3, #12]
 800156c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001570:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State= HAL_UART_STATE_READY;
 8001572:	2301      	movs	r3, #1
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001574:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8001576:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 800157a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 800157c:	2001      	movs	r0, #1
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 800157e:	bd10      	pop	{r4, pc}

08001580 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001580:	b570      	push	{r4, r5, r6, lr}
 8001582:	460d      	mov	r5, r1
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
 8001584:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001588:	4604      	mov	r4, r0
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
 800158a:	b2c9      	uxtb	r1, r1
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 800158c:	2901      	cmp	r1, #1
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800158e:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8001590:	d001      	beq.n	8001596 <HAL_UART_Transmit+0x16>
 8001592:	2922      	cmp	r1, #34	; 0x22
 8001594:	d14e      	bne.n	8001634 <HAL_UART_Transmit+0xb4>
  {
    if((pData == NULL) || (Size == 0))
 8001596:	2d00      	cmp	r5, #0
 8001598:	d04a      	beq.n	8001630 <HAL_UART_Transmit+0xb0>
 800159a:	2a00      	cmp	r2, #0
 800159c:	d048      	beq.n	8001630 <HAL_UART_Transmit+0xb0>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800159e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d046      	beq.n	8001634 <HAL_UART_Transmit+0xb4>
 80015a6:	2301      	movs	r3, #1
 80015a8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	63e3      	str	r3, [r4, #60]	; 0x3c
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 80015b0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }

    huart->TxXferSize = Size;
 80015b4:	84a2      	strh	r2, [r4, #36]	; 0x24
    /* Process Locked */
    __HAL_LOCK(huart);

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 80015b6:	2b22      	cmp	r3, #34	; 0x22
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80015b8:	bf0c      	ite	eq
 80015ba:	2332      	moveq	r3, #50	; 0x32
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 80015bc:	2312      	movne	r3, #18
 80015be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    }

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 80015c2:	84e2      	strh	r2, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0)
 80015c4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80015c6:	b302      	cbz	r2, 800160a <HAL_UART_Transmit+0x8a>
    {
      huart->TxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80015c8:	68a3      	ldr	r3, [r4, #8]

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
    {
      huart->TxXferCount--;
 80015ca:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80015cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
    {
      huart->TxXferCount--;
 80015d0:	84e2      	strh	r2, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80015d2:	f04f 0180 	mov.w	r1, #128	; 0x80
 80015d6:	4632      	mov	r2, r6
 80015d8:	4620      	mov	r0, r4
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
    {
      huart->TxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80015da:	d10d      	bne.n	80015f8 <HAL_UART_Transmit+0x78>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80015dc:	f7ff ff74 	bl	80014c8 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80015e0:	b108      	cbz	r0, 80015e6 <HAL_UART_Transmit+0x66>
        {
          return HAL_TIMEOUT;
 80015e2:	2003      	movs	r0, #3
 80015e4:	bd70      	pop	{r4, r5, r6, pc}
        }
        tmp = (uint16_t*) pData;
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80015e6:	882b      	ldrh	r3, [r5, #0]
 80015e8:	6822      	ldr	r2, [r4, #0]
 80015ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015ee:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80015f0:	6923      	ldr	r3, [r4, #16]
 80015f2:	b943      	cbnz	r3, 8001606 <HAL_UART_Transmit+0x86>
        {
          pData +=2;
 80015f4:	3502      	adds	r5, #2
 80015f6:	e7e5      	b.n	80015c4 <HAL_UART_Transmit+0x44>
          pData +=1;
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80015f8:	f7ff ff66 	bl	80014c8 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80015fc:	2800      	cmp	r0, #0
 80015fe:	d1f0      	bne.n	80015e2 <HAL_UART_Transmit+0x62>
        {
          return HAL_TIMEOUT;
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001600:	6823      	ldr	r3, [r4, #0]
 8001602:	782a      	ldrb	r2, [r5, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	3501      	adds	r5, #1
 8001608:	e7dc      	b.n	80015c4 <HAL_UART_Transmit+0x44>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 800160a:	4632      	mov	r2, r6
 800160c:	2140      	movs	r1, #64	; 0x40
 800160e:	4620      	mov	r0, r4
 8001610:	f7ff ff5a 	bl	80014c8 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8001614:	2800      	cmp	r0, #0
 8001616:	d1e4      	bne.n	80015e2 <HAL_UART_Transmit+0x62>
    { 
      return HAL_TIMEOUT;
    }

    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001618:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800161c:	2b32      	cmp	r3, #50	; 0x32
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 800161e:	bf0c      	ite	eq
 8001620:	2322      	moveq	r3, #34	; 0x22
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8001622:	2301      	movne	r3, #1
 8001624:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001628:	2300      	movs	r3, #0
 800162a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

    return HAL_OK;
 800162e:	bd70      	pop	{r4, r5, r6, pc}
  tmp_state = huart->State;
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
  {
    if((pData == NULL) || (Size == 0))
    {
      return  HAL_ERROR;
 8001630:	2001      	movs	r0, #1
 8001632:	bd70      	pop	{r4, r5, r6, pc}

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001634:	2002      	movs	r0, #2
  }
}
 8001636:	bd70      	pop	{r4, r5, r6, pc}

08001638 <HAL_UART_Receive_IT>:
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
 8001638:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800163c:	b2db      	uxtb	r3, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 800163e:	2b01      	cmp	r3, #1
 8001640:	d001      	beq.n	8001646 <HAL_UART_Receive_IT+0xe>
 8001642:	2b12      	cmp	r3, #18
 8001644:	d128      	bne.n	8001698 <HAL_UART_Receive_IT+0x60>
  {
    if((pData == NULL ) || (Size == 0))
 8001646:	b329      	cbz	r1, 8001694 <HAL_UART_Receive_IT+0x5c>
 8001648:	b322      	cbz	r2, 8001694 <HAL_UART_Receive_IT+0x5c>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800164a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800164e:	2b01      	cmp	r3, #1
 8001650:	d022      	beq.n	8001698 <HAL_UART_Receive_IT+0x60>
 8001652:	2301      	movs	r3, #1
 8001654:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001658:	2300      	movs	r3, #0
 800165a:	63c3      	str	r3, [r0, #60]	; 0x3c

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
 800165c:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 800165e:	85c2      	strh	r2, [r0, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8001660:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001664:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8001668:	2a12      	cmp	r2, #18

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800166a:	6803      	ldr	r3, [r0, #0]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 800166c:	bf0c      	ite	eq
 800166e:	2232      	moveq	r2, #50	; 0x32
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8001670:	2222      	movne	r2, #34	; 0x22
 8001672:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001676:	68da      	ldr	r2, [r3, #12]
    }

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pRxBuffPtr = pData;
 8001678:	6281      	str	r1, [r0, #40]	; 0x28

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800167a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800167e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001680:	695a      	ldr	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);

    return HAL_OK;
 8001682:	2000      	movs	r0, #0

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001684:	f042 0201 	orr.w	r2, r2, #1
 8001688:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	f042 0220 	orr.w	r2, r2, #32
 8001690:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001692:	4770      	bx	lr
  tmp_state = huart->State;
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
  {
    if((pData == NULL ) || (Size == 0))
    {
      return HAL_ERROR;
 8001694:	2001      	movs	r0, #1
 8001696:	4770      	bx	lr

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001698:	2002      	movs	r0, #2
  }
}
 800169a:	4770      	bx	lr

0800169c <HAL_UART_TxCpltCallback>:
 800169c:	4770      	bx	lr

0800169e <HAL_UART_ErrorCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800169e:	4770      	bx	lr

080016a0 <HAL_UART_IRQHandler>:
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 80016a0:	6802      	ldr	r2, [r0, #0]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80016a2:	b513      	push	{r0, r1, r4, lr}
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 80016a4:	6811      	ldr	r1, [r2, #0]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80016a6:	4604      	mov	r4, r0
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80016a8:	07c9      	lsls	r1, r1, #31
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 80016aa:	68d3      	ldr	r3, [r2, #12]
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80016ac:	d505      	bpl.n	80016ba <HAL_UART_IRQHandler+0x1a>
 80016ae:	05db      	lsls	r3, r3, #23
  { 
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 80016b0:	bf42      	ittt	mi
 80016b2:	6bc3      	ldrmi	r3, [r0, #60]	; 0x3c
 80016b4:	f043 0301 	orrmi.w	r3, r3, #1
 80016b8:	63c3      	strmi	r3, [r0, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 80016ba:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 80016bc:	6953      	ldr	r3, [r2, #20]
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80016be:	0788      	lsls	r0, r1, #30
  { 
    huart->ErrorCode |= HAL_UART_ERROR_PE;
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 80016c0:	f003 0301 	and.w	r3, r3, #1
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80016c4:	d504      	bpl.n	80016d0 <HAL_UART_IRQHandler+0x30>
 80016c6:	b11b      	cbz	r3, 80016d0 <HAL_UART_IRQHandler+0x30>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80016c8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80016ca:	f041 0104 	orr.w	r1, r1, #4
 80016ce:	63e1      	str	r1, [r4, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 80016d0:	6811      	ldr	r1, [r2, #0]
  /* UART noise error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80016d2:	0749      	lsls	r1, r1, #29
 80016d4:	d504      	bpl.n	80016e0 <HAL_UART_IRQHandler+0x40>
 80016d6:	b11b      	cbz	r3, 80016e0 <HAL_UART_IRQHandler+0x40>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80016d8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80016da:	f041 0102 	orr.w	r1, r1, #2
 80016de:	63e1      	str	r1, [r4, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 80016e0:	6811      	ldr	r1, [r2, #0]
  /* UART Over-Run interrupt occurred ----------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80016e2:	0708      	lsls	r0, r1, #28
 80016e4:	d504      	bpl.n	80016f0 <HAL_UART_IRQHandler+0x50>
 80016e6:	b11b      	cbz	r3, 80016f0 <HAL_UART_IRQHandler+0x50>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80016e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016ea:	f043 0308 	orr.w	r3, r3, #8
 80016ee:	63e3      	str	r3, [r4, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 80016f0:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 80016f2:	68d3      	ldr	r3, [r2, #12]
  /* UART in mode Receiver ---------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80016f4:	0689      	lsls	r1, r1, #26
 80016f6:	d542      	bpl.n	800177e <HAL_UART_IRQHandler+0xde>
 80016f8:	0698      	lsls	r0, r3, #26
 80016fa:	d540      	bpl.n	800177e <HAL_UART_IRQHandler+0xde>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State; 
 80016fc:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8001700:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8001704:	2b22      	cmp	r3, #34	; 0x22
 8001706:	d13a      	bne.n	800177e <HAL_UART_IRQHandler+0xde>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001708:	68a3      	ldr	r3, [r4, #8]
 800170a:	6921      	ldr	r1, [r4, #16]
 800170c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001710:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001712:	d10b      	bne.n	800172c <HAL_UART_IRQHandler+0x8c>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001714:	6852      	ldr	r2, [r2, #4]
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001716:	b921      	cbnz	r1, 8001722 <HAL_UART_IRQHandler+0x82>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800171c:	f823 2b02 	strh.w	r2, [r3], #2
 8001720:	e002      	b.n	8001728 <HAL_UART_IRQHandler+0x88>
        huart->pRxBuffPtr += 2;
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1;
 8001728:	62a3      	str	r3, [r4, #40]	; 0x28
 800172a:	e00a      	b.n	8001742 <HAL_UART_IRQHandler+0xa2>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800172c:	b919      	cbnz	r1, 8001736 <HAL_UART_IRQHandler+0x96>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800172e:	1c59      	adds	r1, r3, #1
 8001730:	62a1      	str	r1, [r4, #40]	; 0x28
 8001732:	6852      	ldr	r2, [r2, #4]
 8001734:	e004      	b.n	8001740 <HAL_UART_IRQHandler+0xa0>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001736:	6852      	ldr	r2, [r2, #4]
 8001738:	1c59      	adds	r1, r3, #1
 800173a:	62a1      	str	r1, [r4, #40]	; 0x28
 800173c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001740:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0)
 8001742:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001744:	3b01      	subs	r3, #1
 8001746:	b29b      	uxth	r3, r3
 8001748:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800174a:	b9c3      	cbnz	r3, 800177e <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800174c:	6823      	ldr	r3, [r4, #0]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);

        huart->State = HAL_UART_STATE_READY;
      }
      HAL_UART_RxCpltCallback(huart);
 800174e:	4620      	mov	r0, r4
      }
    }

    if(--huart->RxXferCount == 0)
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001750:	68da      	ldr	r2, [r3, #12]
 8001752:	f022 0220 	bic.w	r2, r2, #32
 8001756:	60da      	str	r2, [r3, #12]

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001758:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800175c:	2a32      	cmp	r2, #50	; 0x32
        huart->State = HAL_UART_STATE_BUSY_TX;
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800175e:	bf17      	itett	ne
 8001760:	68da      	ldrne	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
      {
        huart->State = HAL_UART_STATE_BUSY_TX;
 8001762:	2312      	moveq	r3, #18
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001764:	f422 7280 	bicne.w	r2, r2, #256	; 0x100
 8001768:	60da      	strne	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800176a:	bf1f      	itttt	ne
 800176c:	695a      	ldrne	r2, [r3, #20]
 800176e:	f022 0201 	bicne.w	r2, r2, #1
 8001772:	615a      	strne	r2, [r3, #20]

        huart->State = HAL_UART_STATE_READY;
 8001774:	2301      	movne	r3, #1
 8001776:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      }
      HAL_UART_RxCpltCallback(huart);
 800177a:	f7fe fd3d 	bl	80001f8 <HAL_UART_RxCpltCallback>
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
  { 
    UART_Receive_IT(huart);
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 800177e:	6823      	ldr	r3, [r4, #0]
 8001780:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8001782:	68da      	ldr	r2, [r3, #12]
  /* UART in mode Transmitter ------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001784:	0609      	lsls	r1, r1, #24
 8001786:	d528      	bpl.n	80017da <HAL_UART_IRQHandler+0x13a>
 8001788:	0610      	lsls	r0, r2, #24
 800178a:	d526      	bpl.n	80017da <HAL_UART_IRQHandler+0x13a>
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
 800178c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8001790:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8001794:	2a12      	cmp	r2, #18
 8001796:	d120      	bne.n	80017da <HAL_UART_IRQHandler+0x13a>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001798:	68a2      	ldr	r2, [r4, #8]
 800179a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800179e:	6a22      	ldr	r2, [r4, #32]
 80017a0:	d10a      	bne.n	80017b8 <HAL_UART_IRQHandler+0x118>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80017a2:	8811      	ldrh	r1, [r2, #0]
 80017a4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80017a8:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80017aa:	6921      	ldr	r1, [r4, #16]
 80017ac:	b909      	cbnz	r1, 80017b2 <HAL_UART_IRQHandler+0x112>
      {
        huart->pTxBuffPtr += 2;
 80017ae:	3202      	adds	r2, #2
 80017b0:	e000      	b.n	80017b4 <HAL_UART_IRQHandler+0x114>
      }
      else
      {
        huart->pTxBuffPtr += 1;
 80017b2:	3201      	adds	r2, #1
 80017b4:	6222      	str	r2, [r4, #32]
 80017b6:	e003      	b.n	80017c0 <HAL_UART_IRQHandler+0x120>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80017b8:	1c51      	adds	r1, r2, #1
 80017ba:	6221      	str	r1, [r4, #32]
 80017bc:	7812      	ldrb	r2, [r2, #0]
 80017be:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0)
 80017c0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80017c2:	3a01      	subs	r2, #1
 80017c4:	b292      	uxth	r2, r2
 80017c6:	84e2      	strh	r2, [r4, #38]	; 0x26
 80017c8:	b93a      	cbnz	r2, 80017da <HAL_UART_IRQHandler+0x13a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80017d2:	68da      	ldr	r2, [r3, #12]
 80017d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017d8:	60da      	str	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
  {
    UART_Transmit_IT(huart);
  }

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 80017da:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 80017dc:	68da      	ldr	r2, [r3, #12]
  /* UART in mode Transmitter end --------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80017de:	0649      	lsls	r1, r1, #25
 80017e0:	d510      	bpl.n	8001804 <HAL_UART_IRQHandler+0x164>
 80017e2:	0652      	lsls	r2, r2, #25
 80017e4:	d50e      	bpl.n	8001804 <HAL_UART_IRQHandler+0x164>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80017e6:	68da      	ldr	r2, [r3, #12]
  else
  {
    huart->State = HAL_UART_STATE_READY;
  }
  
  HAL_UART_TxCpltCallback(huart);
 80017e8:	4620      	mov	r0, r4
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80017ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017ee:	60da      	str	r2, [r3, #12]
  
  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80017f0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80017f4:	2b32      	cmp	r3, #50	; 0x32
  {
    huart->State = HAL_UART_STATE_BUSY_RX;
 80017f6:	bf0c      	ite	eq
 80017f8:	2322      	moveq	r3, #34	; 0x22
  }
  else
  {
    huart->State = HAL_UART_STATE_READY;
 80017fa:	2301      	movne	r3, #1
 80017fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  }
  
  HAL_UART_TxCpltCallback(huart);
 8001800:	f7ff ff4c 	bl	800169c <HAL_UART_TxCpltCallback>
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
  {
    UART_EndTransmit_IT(huart);
  }  

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001804:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001806:	b15b      	cbz	r3, 8001820 <HAL_UART_IRQHandler+0x180>
  {
    /* Clear all the error flag at once */
    __HAL_UART_CLEAR_PEFLAG(huart);
 8001808:	6823      	ldr	r3, [r4, #0]
    
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
    
    HAL_UART_ErrorCallback(huart);
 800180a:	4620      	mov	r0, r4
  }  

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
  {
    /* Clear all the error flag at once */
    __HAL_UART_CLEAR_PEFLAG(huart);
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	9201      	str	r2, [sp, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	9b01      	ldr	r3, [sp, #4]
    
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 8001816:	2301      	movs	r3, #1
 8001818:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
    HAL_UART_ErrorCallback(huart);
 800181c:	f7ff ff3f 	bl	800169e <HAL_UART_ErrorCallback>
  }  
}
 8001820:	b002      	add	sp, #8
 8001822:	bd10      	pop	{r4, pc}

08001824 <__libc_init_array>:
 8001824:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <__libc_init_array+0x3c>)
 8001826:	b570      	push	{r4, r5, r6, lr}
 8001828:	461e      	mov	r6, r3
 800182a:	4c0e      	ldr	r4, [pc, #56]	; (8001864 <__libc_init_array+0x40>)
 800182c:	2500      	movs	r5, #0
 800182e:	1ae4      	subs	r4, r4, r3
 8001830:	10a4      	asrs	r4, r4, #2
 8001832:	42a5      	cmp	r5, r4
 8001834:	d004      	beq.n	8001840 <__libc_init_array+0x1c>
 8001836:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800183a:	4798      	blx	r3
 800183c:	3501      	adds	r5, #1
 800183e:	e7f8      	b.n	8001832 <__libc_init_array+0xe>
 8001840:	f000 f816 	bl	8001870 <_init>
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <__libc_init_array+0x44>)
 8001846:	4c09      	ldr	r4, [pc, #36]	; (800186c <__libc_init_array+0x48>)
 8001848:	461e      	mov	r6, r3
 800184a:	1ae4      	subs	r4, r4, r3
 800184c:	10a4      	asrs	r4, r4, #2
 800184e:	2500      	movs	r5, #0
 8001850:	42a5      	cmp	r5, r4
 8001852:	d004      	beq.n	800185e <__libc_init_array+0x3a>
 8001854:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001858:	4798      	blx	r3
 800185a:	3501      	adds	r5, #1
 800185c:	e7f8      	b.n	8001850 <__libc_init_array+0x2c>
 800185e:	bd70      	pop	{r4, r5, r6, pc}
 8001860:	080018b4 	.word	0x080018b4
 8001864:	080018b4 	.word	0x080018b4
 8001868:	080018b4 	.word	0x080018b4
 800186c:	080018b8 	.word	0x080018b8

08001870 <_init>:
 8001870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001872:	bf00      	nop
 8001874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001876:	bc08      	pop	{r3}
 8001878:	469e      	mov	lr, r3
 800187a:	4770      	bx	lr

0800187c <_fini>:
 800187c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800187e:	bf00      	nop
 8001880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001882:	bc08      	pop	{r3}
 8001884:	469e      	mov	lr, r3
 8001886:	4770      	bx	lr
