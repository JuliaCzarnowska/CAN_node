
C:\Users\Julia\Documents\stm_projekty\CAN_node\TrueSTUDIO\CAN_node\Debug\CAN_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001594  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080016a0  080016a0  000116a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080016cc  080016cc  000116cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080016d0  080016d0  000116d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080016d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000100  20000004  080016d8  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000104  080016d8  00020104  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_line   00002e44  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000718c  00000000  00000000  00022e71  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000161e  00000000  00000000  00029ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000004d0  00000000  00000000  0002b620  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006c8  00000000  00000000  0002baf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000254f  00000000  00000000  0002c1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001bdc  00000000  00000000  0002e707  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  000302e3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000bc4  00000000  00000000  00030364  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08001688 	.word	0x08001688

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08001688 	.word	0x08001688

0800014c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800014c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800014e:	e003      	b.n	8000158 <LoopCopyDataInit>

08000150 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000150:	4b0b      	ldr	r3, [pc, #44]	; (8000180 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000152:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000154:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000156:	3104      	adds	r1, #4

08000158 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000158:	480a      	ldr	r0, [pc, #40]	; (8000184 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800015c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800015e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000160:	d3f6      	bcc.n	8000150 <CopyDataInit>
  ldr r2, =_sbss
 8000162:	4a0a      	ldr	r2, [pc, #40]	; (800018c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000164:	e002      	b.n	800016c <LoopFillZerobss>

08000166 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000166:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000168:	f842 3b04 	str.w	r3, [r2], #4

0800016c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800016c:	4b08      	ldr	r3, [pc, #32]	; (8000190 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800016e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000170:	d3f9      	bcc.n	8000166 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000172:	f000 f9ed 	bl	8000550 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000176:	f001 fa61 	bl	800163c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800017a:	f000 f897 	bl	80002ac <main>
  bx lr
 800017e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000180:	080016d4 	.word	0x080016d4
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000184:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000188:	20000004 	.word	0x20000004
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 800018c:	20000004 	.word	0x20000004
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000190:	20000104 	.word	0x20000104

08000194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000194:	e7fe      	b.n	8000194 <ADC1_2_IRQHandler>
	...

08000198 <UART_TO_CAN_Transfer>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

void UART_TO_CAN_Transfer()
{
 8000198:	b538      	push	{r3, r4, r5, lr}
	if(uartRxMsg[1] == BYTE_COUNT){HAL_GPIO_WritePin( LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);}
 800019a:	4c13      	ldr	r4, [pc, #76]	; (80001e8 <UART_TO_CAN_Transfer+0x50>)
 800019c:	7863      	ldrb	r3, [r4, #1]
 800019e:	2b08      	cmp	r3, #8
 80001a0:	d104      	bne.n	80001ac <UART_TO_CAN_Transfer+0x14>
 80001a2:	2201      	movs	r2, #1
 80001a4:	2120      	movs	r1, #32
 80001a6:	4811      	ldr	r0, [pc, #68]	; (80001ec <UART_TO_CAN_Transfer+0x54>)
 80001a8:	f000 fc6c 	bl	8000a84 <HAL_GPIO_WritePin>
	hcan.pTxMsg->DLC = uartRxMsg[1];
 80001ac:	4b10      	ldr	r3, [pc, #64]	; (80001f0 <UART_TO_CAN_Transfer+0x58>)
 80001ae:	4a11      	ldr	r2, [pc, #68]	; (80001f4 <UART_TO_CAN_Transfer+0x5c>)
 80001b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80001b2:	7863      	ldrb	r3, [r4, #1]
 80001b4:	f101 0015 	add.w	r0, r1, #21
 80001b8:	610b      	str	r3, [r1, #16]
 80001ba:	3301      	adds	r3, #1
 80001bc:	4423      	add	r3, r4
	for(int i = 0; i < hcan.pTxMsg->DLC; i++)
 80001be:	4293      	cmp	r3, r2
 80001c0:	d004      	beq.n	80001cc <UART_TO_CAN_Transfer+0x34>
	{
		hcan.pTxMsg->Data[i+2] = uartRxMsg[i+2];
 80001c2:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80001c6:	f800 5f01 	strb.w	r5, [r0, #1]!
 80001ca:	e7f8      	b.n	80001be <UART_TO_CAN_Transfer+0x26>
	unsigned int id[4];
	id[0] = (unsigned int) ((uartRxMsg[11] << 24) & 0x1F000000);
	id[1] = (unsigned int) ((uartRxMsg[12] << 16) & 0xFF0000);
	id[2] = (unsigned int) ((uartRxMsg[13] << 8) & 0xFF00);
	id[3] = (unsigned int) (uartRxMsg[14] & 0xFF);
	hcan.pTxMsg->ExtId = id[0]|id[1]|id[2]|id[3];
 80001cc:	7b62      	ldrb	r2, [r4, #13]
 80001ce:	7ba3      	ldrb	r3, [r4, #14]
 80001d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80001d4:	7ae2      	ldrb	r2, [r4, #11]
 80001d6:	0612      	lsls	r2, r2, #24
 80001d8:	f002 52f8 	and.w	r2, r2, #520093696	; 0x1f000000
 80001dc:	4313      	orrs	r3, r2
 80001de:	7b22      	ldrb	r2, [r4, #12]
 80001e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80001e4:	604b      	str	r3, [r1, #4]
 80001e6:	bd38      	pop	{r3, r4, r5, pc}
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	40010800 	.word	0x40010800
 80001f0:	20000064 	.word	0x20000064
 80001f4:	200000a5 	.word	0x200000a5

080001f8 <HAL_UART_RxCpltCallback>:
/* Private function prototypes -----------------------------------------------*/
void UART_TO_CAN_Transfer();
void CAN_TO_UART_Transfer();

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 80001f8:	b508      	push	{r3, lr}

	if(uartRxMsg[0] == ARINC_MSG){
 80001fa:	4b0e      	ldr	r3, [pc, #56]	; (8000234 <HAL_UART_RxCpltCallback+0x3c>)
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	2b01      	cmp	r3, #1
 8000200:	d102      	bne.n	8000208 <HAL_UART_RxCpltCallback+0x10>
		UART_TO_CAN_Transfer();
 8000202:	f7ff ffc9 	bl	8000198 <UART_TO_CAN_Transfer>
 8000206:	e00d      	b.n	8000224 <HAL_UART_RxCpltCallback+0x2c>

	}else if(uartRxMsg[0] == CTRL_MSG){
 8000208:	2b02      	cmp	r3, #2
 800020a:	d10b      	bne.n	8000224 <HAL_UART_RxCpltCallback+0x2c>
		HAL_UART_Transmit(&huart2, (uint8_t*) &uartTxMsg, 15, 100);
 800020c:	2364      	movs	r3, #100	; 0x64
 800020e:	220f      	movs	r2, #15
 8000210:	4909      	ldr	r1, [pc, #36]	; (8000238 <HAL_UART_RxCpltCallback+0x40>)
 8000212:	480a      	ldr	r0, [pc, #40]	; (800023c <HAL_UART_RxCpltCallback+0x44>)
 8000214:	f001 f8c0 	bl	8001398 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) &uartTxMsg, 15, 100);
 8000218:	2364      	movs	r3, #100	; 0x64
 800021a:	220f      	movs	r2, #15
 800021c:	4906      	ldr	r1, [pc, #24]	; (8000238 <HAL_UART_RxCpltCallback+0x40>)
 800021e:	4807      	ldr	r0, [pc, #28]	; (800023c <HAL_UART_RxCpltCallback+0x44>)
 8000220:	f001 f8ba 	bl	8001398 <HAL_UART_Transmit>

	}

	HAL_UART_Receive_IT(&huart2, uartRxMsg, MSG_PKT_SIZE);
}
 8000224:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_UART_Transmit(&huart2, (uint8_t*) &uartTxMsg, 15, 100);
		HAL_UART_Transmit(&huart2, (uint8_t*) &uartTxMsg, 15, 100);

	}

	HAL_UART_Receive_IT(&huart2, uartRxMsg, MSG_PKT_SIZE);
 8000228:	220f      	movs	r2, #15
 800022a:	4902      	ldr	r1, [pc, #8]	; (8000234 <HAL_UART_RxCpltCallback+0x3c>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <HAL_UART_RxCpltCallback+0x44>)
 800022e:	f001 b90f 	b.w	8001450 <HAL_UART_Receive_IT>
 8000232:	bf00      	nop
 8000234:	200000a4 	.word	0x200000a4
 8000238:	200000b3 	.word	0x200000b3
 800023c:	200000c4 	.word	0x200000c4

08000240 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000240:	b510      	push	{r4, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000242:	2301      	movs	r3, #1
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000244:	b090      	sub	sp, #64	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000246:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000248:	2310      	movs	r3, #16
 800024a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800024c:	2300      	movs	r3, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800024e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000250:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000252:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000254:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000258:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025a:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800025c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f000 fc15 	bl	8000a8c <HAL_RCC_OscConfig>
 8000262:	b100      	cbz	r0, 8000266 <SystemClock_Config+0x26>
 8000264:	e7fe      	b.n	8000264 <SystemClock_Config+0x24>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000266:	230f      	movs	r3, #15
 8000268:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026a:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000270:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000272:	4621      	mov	r1, r4
 8000274:	a801      	add	r0, sp, #4

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000276:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000278:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800027a:	f000 feaf 	bl	8000fdc <HAL_RCC_ClockConfig>
 800027e:	4604      	mov	r4, r0
 8000280:	b100      	cbz	r0, 8000284 <SystemClock_Config+0x44>
 8000282:	e7fe      	b.n	8000282 <SystemClock_Config+0x42>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000284:	f000 ff5c 	bl	8001140 <HAL_RCC_GetHCLKFreq>
 8000288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800028c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000290:	f000 faf8 	bl	8000884 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000294:	2004      	movs	r0, #4
 8000296:	f000 fb0b 	bl	80008b0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800029a:	4622      	mov	r2, r4
 800029c:	4621      	mov	r1, r4
 800029e:	f04f 30ff 	mov.w	r0, #4294967295
 80002a2:	f000 faaf 	bl	8000804 <HAL_NVIC_SetPriority>
}
 80002a6:	b010      	add	sp, #64	; 0x40
 80002a8:	bd10      	pop	{r4, pc}
	...

080002ac <main>:

}
/* USER CODE END 0 */

int main(void)
{
 80002ac:	b500      	push	{lr}
 80002ae:	b08d      	sub	sp, #52	; 0x34
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b0:	f000 f986 	bl	80005c0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80002b4:	f7ff ffc4 	bl	8000240 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b8:	4b3c      	ldr	r3, [pc, #240]	; (80003ac <main+0x100>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002ba:	2120      	movs	r1, #32
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002bc:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002be:	483c      	ldr	r0, [pc, #240]	; (80003b0 <main+0x104>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c0:	f042 0204 	orr.w	r2, r2, #4
 80002c4:	619a      	str	r2, [r3, #24]
 80002c6:	699b      	ldr	r3, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002c8:	2200      	movs	r2, #0
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ca:	f003 0304 	and.w	r3, r3, #4
 80002ce:	9301      	str	r3, [sp, #4]
 80002d0:	9b01      	ldr	r3, [sp, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002d2:	f000 fbd7 	bl	8000a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80002d6:	2320      	movs	r3, #32
 80002d8:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002da:	4835      	ldr	r0, [pc, #212]	; (80003b0 <main+0x104>)
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002dc:	2302      	movs	r3, #2
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002de:	2501      	movs	r5, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002e0:	a902      	add	r1, sp, #8
  CAN_FilterConfTypeDef  sFilterConfig;
  static CanTxMsgTypeDef        TxMessage;
  static CanRxMsgTypeDef        RxMessage;

  /*##-1- Configure the CAN peripheral #######################################*/
  hcan.pTxMsg = &TxMessage;
 80002e2:	4c34      	ldr	r4, [pc, #208]	; (80003b4 <main+0x108>)
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e4:	9305      	str	r3, [sp, #20]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e6:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002e8:	f000 faf4 	bl	80008d4 <HAL_GPIO_Init>
  CAN_FilterConfTypeDef  sFilterConfig;
  static CanTxMsgTypeDef        TxMessage;
  static CanRxMsgTypeDef        RxMessage;

  /*##-1- Configure the CAN peripheral #######################################*/
  hcan.pTxMsg = &TxMessage;
 80002ec:	4b32      	ldr	r3, [pc, #200]	; (80003b8 <main+0x10c>)
  hcan.pRxMsg = &RxMessage;

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 16;
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 80002ee:	f04f 0c10 	mov.w	ip, #16
  CAN_FilterConfTypeDef  sFilterConfig;
  static CanTxMsgTypeDef        TxMessage;
  static CanRxMsgTypeDef        RxMessage;

  /*##-1- Configure the CAN peripheral #######################################*/
  hcan.pTxMsg = &TxMessage;
 80002f2:	6323      	str	r3, [r4, #48]	; 0x30
  hcan.pRxMsg = &RxMessage;
 80002f4:	4b31      	ldr	r3, [pc, #196]	; (80003bc <main+0x110>)

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 16;
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 80002f6:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
  static CanTxMsgTypeDef        TxMessage;
  static CanRxMsgTypeDef        RxMessage;

  /*##-1- Configure the CAN peripheral #######################################*/
  hcan.pTxMsg = &TxMessage;
  hcan.pRxMsg = &RxMessage;
 80002fa:	6363      	str	r3, [r4, #52]	; 0x34

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 16;
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 80002fc:	4b30      	ldr	r3, [pc, #192]	; (80003c0 <main+0x114>)
  hcan.Init.ABOM = DISABLE;
  hcan.Init.AWUM = DISABLE;
  hcan.Init.NART = DISABLE;
  hcan.Init.RFLM = DISABLE;
  hcan.Init.TXFP = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002fe:	4620      	mov	r0, r4
  hcan.pTxMsg = &TxMessage;
  hcan.pRxMsg = &RxMessage;

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 16;
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000300:	e884 5008 	stmia.w	r4, {r3, ip, lr}
  hcan.Init.SJW = CAN_SJW_1TQ;
 8000304:	2300      	movs	r3, #0
 8000306:	60e3      	str	r3, [r4, #12]
  hcan.Init.BS1 = CAN_BS1_1TQ;
 8000308:	6123      	str	r3, [r4, #16]
  hcan.Init.BS2 = CAN_BS2_1TQ;
 800030a:	6163      	str	r3, [r4, #20]
  hcan.Init.TTCM = DISABLE;
 800030c:	61a3      	str	r3, [r4, #24]
  hcan.Init.ABOM = DISABLE;
 800030e:	61e3      	str	r3, [r4, #28]
  hcan.Init.AWUM = DISABLE;
 8000310:	6223      	str	r3, [r4, #32]
  hcan.Init.NART = DISABLE;
 8000312:	6263      	str	r3, [r4, #36]	; 0x24
  hcan.Init.RFLM = DISABLE;
 8000314:	62a3      	str	r3, [r4, #40]	; 0x28
  hcan.Init.TXFP = DISABLE;
 8000316:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000318:	f000 f9e4 	bl	80006e4 <HAL_CAN_Init>
 800031c:	b100      	cbz	r0, 8000320 <main+0x74>
 800031e:	e7fe      	b.n	800031e <main+0x72>
  {
    Error_Handler();
  }

  /*##-2- Configure the CAN Filter ###########################################*/
  sFilterConfig.FilterNumber = 0;
 8000320:	9007      	str	r0, [sp, #28]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000322:	9008      	str	r0, [sp, #32]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
  sFilterConfig.FilterIdHigh = 0x0000;
 8000324:	9002      	str	r0, [sp, #8]
  sFilterConfig.FilterIdLow = 0x0000;
 8000326:	9003      	str	r0, [sp, #12]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000328:	9004      	str	r0, [sp, #16]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800032a:	9005      	str	r0, [sp, #20]
  sFilterConfig.FilterFIFOAssignment = 0;
 800032c:	9006      	str	r0, [sp, #24]
  sFilterConfig.FilterActivation = ENABLE;
  sFilterConfig.BankNumber = 14;
 800032e:	230e      	movs	r3, #14

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000330:	a902      	add	r1, sp, #8
 8000332:	4620      	mov	r0, r4
  }

  /*##-2- Configure the CAN Filter ###########################################*/
  sFilterConfig.FilterNumber = 0;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000334:	9509      	str	r5, [sp, #36]	; 0x24
  sFilterConfig.FilterIdHigh = 0x0000;
  sFilterConfig.FilterIdLow = 0x0000;
  sFilterConfig.FilterMaskIdHigh = 0x0000;
  sFilterConfig.FilterMaskIdLow = 0x0000;
  sFilterConfig.FilterFIFOAssignment = 0;
  sFilterConfig.FilterActivation = ENABLE;
 8000336:	950a      	str	r5, [sp, #40]	; 0x28
  sFilterConfig.BankNumber = 14;
 8000338:	930b      	str	r3, [sp, #44]	; 0x2c

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800033a:	f000 f96e 	bl	800061a <HAL_CAN_ConfigFilter>
 800033e:	b100      	cbz	r0, 8000342 <main+0x96>
 8000340:	e7fe      	b.n	8000340 <main+0x94>
    /* Filter configuration Error */
    Error_Handler();
  }

  /*##-3- Configure Transmission process #####################################*/
  hcan.pTxMsg->StdId = 0x00;
 8000342:	6b23      	ldr	r3, [r4, #48]	; 0x30
  hcan.pTxMsg->ExtId = 0xE9E1AC3;
 8000344:	4a1f      	ldr	r2, [pc, #124]	; (80003c4 <main+0x118>)

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8000346:	4c20      	ldr	r4, [pc, #128]	; (80003c8 <main+0x11c>)
    Error_Handler();
  }

  /*##-3- Configure Transmission process #####################################*/
  hcan.pTxMsg->StdId = 0x00;
  hcan.pTxMsg->ExtId = 0xE9E1AC3;
 8000348:	605a      	str	r2, [r3, #4]
  hcan.pTxMsg->RTR = CAN_RTR_DATA;
  hcan.pTxMsg->IDE = CAN_ID_EXT;
 800034a:	2204      	movs	r2, #4
 800034c:	609a      	str	r2, [r3, #8]
  hcan.pTxMsg->DLC = 8;
 800034e:	2608      	movs	r6, #8
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8000350:	4a1e      	ldr	r2, [pc, #120]	; (80003cc <main+0x120>)
    /* Filter configuration Error */
    Error_Handler();
  }

  /*##-3- Configure Transmission process #####################################*/
  hcan.pTxMsg->StdId = 0x00;
 8000352:	6018      	str	r0, [r3, #0]
  hcan.pTxMsg->ExtId = 0xE9E1AC3;
  hcan.pTxMsg->RTR = CAN_RTR_DATA;
 8000354:	60d8      	str	r0, [r3, #12]
  hcan.pTxMsg->IDE = CAN_ID_EXT;
  hcan.pTxMsg->DLC = 8;
 8000356:	611e      	str	r6, [r3, #16]
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8000358:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800035c:	e884 000c 	stmia.w	r4, {r2, r3}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000360:	60a0      	str	r0, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000362:	60e0      	str	r0, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000364:	6120      	str	r0, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000366:	230c      	movs	r3, #12
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000368:	61a0      	str	r0, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800036a:	61e0      	str	r0, [r4, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800036c:	4620      	mov	r0, r4
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800036e:	6163      	str	r3, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000370:	f000 ffe6 	bl	8001340 <HAL_UART_Init>
 8000374:	b100      	cbz	r0, 8000378 <main+0xcc>
 8000376:	e7fe      	b.n	8000376 <main+0xca>


  /* USER CODE BEGIN 2 */

  //start listening for uart messages
  HAL_UART_Receive_IT(&huart2, uartRxMsg, 15);
 8000378:	220f      	movs	r2, #15
 800037a:	4915      	ldr	r1, [pc, #84]	; (80003d0 <main+0x124>)
 800037c:	4620      	mov	r0, r4
 800037e:	f001 f867 	bl	8001450 <HAL_UART_Receive_IT>


  //creating an UART message

  // byte count
  uartTxMsg[0] = 0x08;
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <main+0x128>)
  // CAN_MSG.data[8]
  uartTxMsg[1] = 0x13;
 8000384:	2213      	movs	r2, #19
 8000386:	705a      	strb	r2, [r3, #1]
  uartTxMsg[2] = 0x43;
 8000388:	2243      	movs	r2, #67	; 0x43
 800038a:	709a      	strb	r2, [r3, #2]
  uartTxMsg[3] = 0x43;
 800038c:	70da      	strb	r2, [r3, #3]
  uartTxMsg[4] = 0x43;
 800038e:	711a      	strb	r2, [r3, #4]
  uartTxMsg[5] = 0x43;
 8000390:	715a      	strb	r2, [r3, #5]
  uartTxMsg[6] = 0x43;
 8000392:	719a      	strb	r2, [r3, #6]
  uartTxMsg[7] = 0x43;
 8000394:	71da      	strb	r2, [r3, #7]
  uartTxMsg[8] = 0x43;
 8000396:	721a      	strb	r2, [r3, #8]
  // frame type
  uartTxMsg[9] = DATA_FRAME;
  // identifier
  uartTxMsg[10] = 0x08;
  uartTxMsg[11] = 0x26;
 8000398:	2226      	movs	r2, #38	; 0x26
 800039a:	72da      	strb	r2, [r3, #11]
  uartTxMsg[12] = 0x01;
  uartTxMsg[13] = 0xC0;
 800039c:	22c0      	movs	r2, #192	; 0xc0


  //creating an UART message

  // byte count
  uartTxMsg[0] = 0x08;
 800039e:	701e      	strb	r6, [r3, #0]
  uartTxMsg[5] = 0x43;
  uartTxMsg[6] = 0x43;
  uartTxMsg[7] = 0x43;
  uartTxMsg[8] = 0x43;
  // frame type
  uartTxMsg[9] = DATA_FRAME;
 80003a0:	725d      	strb	r5, [r3, #9]
  // identifier
  uartTxMsg[10] = 0x08;
 80003a2:	729e      	strb	r6, [r3, #10]
  uartTxMsg[11] = 0x26;
  uartTxMsg[12] = 0x01;
 80003a4:	731d      	strb	r5, [r3, #12]
  uartTxMsg[13] = 0xC0;
 80003a6:	735a      	strb	r2, [r3, #13]
  // opcode
  uartTxMsg[14] = ARINC_MSG;
 80003a8:	739d      	strb	r5, [r3, #14]
 80003aa:	e7fe      	b.n	80003aa <main+0xfe>
 80003ac:	40021000 	.word	0x40021000
 80003b0:	40010800 	.word	0x40010800
 80003b4:	20000064 	.word	0x20000064
 80003b8:	20000020 	.word	0x20000020
 80003bc:	2000003c 	.word	0x2000003c
 80003c0:	40006400 	.word	0x40006400
 80003c4:	0e9e1ac3 	.word	0x0e9e1ac3
 80003c8:	200000c4 	.word	0x200000c4
 80003cc:	40004400 	.word	0x40004400
 80003d0:	200000a4 	.word	0x200000a4
 80003d4:	200000b3 	.word	0x200000b3

080003d8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003d8:	4b20      	ldr	r3, [pc, #128]	; (800045c <HAL_MspInit+0x84>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003da:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003dc:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003de:	2003      	movs	r0, #3
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003e0:	f042 0201 	orr.w	r2, r2, #1
 80003e4:	619a      	str	r2, [r3, #24]
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0301 	and.w	r3, r3, #1
 80003ec:	9301      	str	r3, [sp, #4]
 80003ee:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003f0:	f000 f9f6 	bl	80007e0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80003f4:	2200      	movs	r2, #0
 80003f6:	4611      	mov	r1, r2
 80003f8:	f06f 000b 	mvn.w	r0, #11
 80003fc:	f000 fa02 	bl	8000804 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000400:	2200      	movs	r2, #0
 8000402:	4611      	mov	r1, r2
 8000404:	f06f 000a 	mvn.w	r0, #10
 8000408:	f000 f9fc 	bl	8000804 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800040c:	2200      	movs	r2, #0
 800040e:	4611      	mov	r1, r2
 8000410:	f06f 0009 	mvn.w	r0, #9
 8000414:	f000 f9f6 	bl	8000804 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000418:	2200      	movs	r2, #0
 800041a:	4611      	mov	r1, r2
 800041c:	f06f 0004 	mvn.w	r0, #4
 8000420:	f000 f9f0 	bl	8000804 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000424:	2200      	movs	r2, #0
 8000426:	4611      	mov	r1, r2
 8000428:	f06f 0003 	mvn.w	r0, #3
 800042c:	f000 f9ea 	bl	8000804 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000430:	2200      	movs	r2, #0
 8000432:	4611      	mov	r1, r2
 8000434:	f06f 0001 	mvn.w	r0, #1
 8000438:	f000 f9e4 	bl	8000804 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800043c:	2200      	movs	r2, #0
 800043e:	4611      	mov	r1, r2
 8000440:	f04f 30ff 	mov.w	r0, #4294967295
 8000444:	f000 f9de 	bl	8000804 <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Disabled 
    */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000448:	4a05      	ldr	r2, [pc, #20]	; (8000460 <HAL_MspInit+0x88>)
 800044a:	6853      	ldr	r3, [r2, #4]
 800044c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000450:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000454:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000456:	b003      	add	sp, #12
 8000458:	f85d fb04 	ldr.w	pc, [sp], #4
 800045c:	40021000 	.word	0x40021000
 8000460:	40010000 	.word	0x40010000

08000464 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000464:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 8000466:	6802      	ldr	r2, [r0, #0]
 8000468:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <HAL_CAN_MspInit+0x50>)
 800046a:	429a      	cmp	r2, r3
 800046c:	d11f      	bne.n	80004ae <HAL_CAN_MspInit+0x4a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800046e:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8000472:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 8000474:	a902      	add	r1, sp, #8
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000476:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800047a:	61da      	str	r2, [r3, #28]
 800047c:	69db      	ldr	r3, [r3, #28]
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 800047e:	480e      	ldr	r0, [pc, #56]	; (80004b8 <HAL_CAN_MspInit+0x54>)
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000484:	9301      	str	r3, [sp, #4]
 8000486:	9b01      	ldr	r3, [sp, #4]
  
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin;
 8000488:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800048c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800048e:	2300      	movs	r3, #0
 8000490:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 8000494:	f000 fa1e 	bl	80008d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAN_TX_Pin;
 8000498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800049c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800049e:	2302      	movs	r3, #2
 80004a0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 80004a2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = CAN_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a4:	2303      	movs	r3, #3
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 80004a6:	4804      	ldr	r0, [pc, #16]	; (80004b8 <HAL_CAN_MspInit+0x54>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = CAN_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 80004aa:	f000 fa13 	bl	80008d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80004ae:	b007      	add	sp, #28
 80004b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80004b4:	40006400 	.word	0x40006400
 80004b8:	40010800 	.word	0x40010800

080004bc <HAL_UART_MspInit>:
  /* USER CODE END CAN1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004bc:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80004be:	6802      	ldr	r2, [r0, #0]
 80004c0:	4b16      	ldr	r3, [pc, #88]	; (800051c <HAL_UART_MspInit+0x60>)
  /* USER CODE END CAN1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004c2:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80004c4:	429a      	cmp	r2, r3
 80004c6:	d126      	bne.n	8000516 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004c8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80004cc:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80004ce:	a902      	add	r1, sp, #8
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004d0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80004d4:	61da      	str	r2, [r3, #28]
 80004d6:	69db      	ldr	r3, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80004d8:	4811      	ldr	r0, [pc, #68]	; (8000520 <HAL_UART_MspInit+0x64>)
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	9b01      	ldr	r3, [sp, #4]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 80004e2:	2304      	movs	r3, #4
 80004e4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e6:	2302      	movs	r3, #2
 80004e8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ea:	2303      	movs	r3, #3
 80004ec:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80004ee:	f000 f9f1 	bl	80008d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART2_RX_Pin;
 80004f2:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f4:	2400      	movs	r4, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 80004f6:	eb0d 0103 	add.w	r1, sp, r3
 80004fa:	4809      	ldr	r0, [pc, #36]	; (8000520 <HAL_UART_MspInit+0x64>)
    GPIO_InitStruct.Pin = USART2_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = USART2_RX_Pin;
 80004fc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004fe:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8000502:	f000 f9e7 	bl	80008d4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000506:	2026      	movs	r0, #38	; 0x26
 8000508:	4622      	mov	r2, r4
 800050a:	4621      	mov	r1, r4
 800050c:	f000 f97a 	bl	8000804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000510:	2026      	movs	r0, #38	; 0x26
 8000512:	f000 f9ab 	bl	800086c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000516:	b006      	add	sp, #24
 8000518:	bd10      	pop	{r4, pc}
 800051a:	bf00      	nop
 800051c:	40004400 	.word	0x40004400
 8000520:	40010800 	.word	0x40010800

08000524 <NMI_Handler>:
 8000524:	4770      	bx	lr

08000526 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000526:	e7fe      	b.n	8000526 <HardFault_Handler>

08000528 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000528:	e7fe      	b.n	8000528 <MemManage_Handler>

0800052a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800052a:	e7fe      	b.n	800052a <BusFault_Handler>

0800052c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800052c:	e7fe      	b.n	800052c <UsageFault_Handler>

0800052e <SVC_Handler>:
 800052e:	4770      	bx	lr

08000530 <DebugMon_Handler>:
 8000530:	4770      	bx	lr

08000532 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000532:	4770      	bx	lr

08000534 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000534:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000536:	f000 f855 	bl	80005e4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800053a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 800053e:	f000 b9c4 	b.w	80008ca <HAL_SYSTICK_IRQHandler>
	...

08000544 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000544:	4801      	ldr	r0, [pc, #4]	; (800054c <USART2_IRQHandler+0x8>)
 8000546:	f000 bfb7 	b.w	80014b8 <HAL_UART_IRQHandler>
 800054a:	bf00      	nop
 800054c:	200000c4 	.word	0x200000c4

08000550 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000550:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <SystemInit+0x40>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	f042 0201 	orr.w	r2, r2, #1
 8000558:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800055a:	6859      	ldr	r1, [r3, #4]
 800055c:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <SystemInit+0x44>)
 800055e:	400a      	ands	r2, r1
 8000560:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000568:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800056c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000574:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000576:	685a      	ldr	r2, [r3, #4]
 8000578:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800057c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800057e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000582:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <SystemInit+0x48>)
 8000586:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	40021000 	.word	0x40021000
 8000594:	f8ff0000 	.word	0xf8ff0000
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800059c:	b510      	push	{r4, lr}
 800059e:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80005a0:	f000 fdce 	bl	8001140 <HAL_RCC_GetHCLKFreq>
 80005a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a8:	fbb0 f0f3 	udiv	r0, r0, r3
 80005ac:	f000 f96a 	bl	8000884 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	4621      	mov	r1, r4
 80005b4:	f04f 30ff 	mov.w	r0, #4294967295
 80005b8:	f000 f924 	bl	8000804 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80005bc:	2000      	movs	r0, #0
 80005be:	bd10      	pop	{r4, pc}

080005c0 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c0:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <HAL_Init+0x20>)
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c2:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c4:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c6:	2003      	movs	r0, #3
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c8:	f043 0310 	orr.w	r3, r3, #16
 80005cc:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ce:	f000 f907 	bl	80007e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005d2:	2000      	movs	r0, #0
 80005d4:	f7ff ffe2 	bl	800059c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d8:	f7ff fefe 	bl	80003d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80005dc:	2000      	movs	r0, #0
 80005de:	bd08      	pop	{r3, pc}
 80005e0:	40022000 	.word	0x40022000

080005e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005e4:	4a02      	ldr	r2, [pc, #8]	; (80005f0 <HAL_IncTick+0xc>)
 80005e6:	6813      	ldr	r3, [r2, #0]
 80005e8:	3301      	adds	r3, #1
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000060 	.word	0x20000060

080005f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005f4:	4b01      	ldr	r3, [pc, #4]	; (80005fc <HAL_GetTick+0x8>)
 80005f6:	6818      	ldr	r0, [r3, #0]
}
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000060 	.word	0x20000060

08000600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000600:	b513      	push	{r0, r1, r4, lr}
 8000602:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000604:	f7ff fff6 	bl	80005f4 <HAL_GetTick>
 8000608:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800060a:	f7ff fff3 	bl	80005f4 <HAL_GetTick>
 800060e:	9b01      	ldr	r3, [sp, #4]
 8000610:	1b00      	subs	r0, r0, r4
 8000612:	4298      	cmp	r0, r3
 8000614:	d3f9      	bcc.n	800060a <HAL_Delay+0xa>
  {
  }
}
 8000616:	b002      	add	sp, #8
 8000618:	bd10      	pop	{r4, pc}

0800061a <HAL_CAN_ConfigFilter>:
  
  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 800061a:	6803      	ldr	r3, [r0, #0]
  * @param  sFilterConfig: pointer to a CAN_FilterConfTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef* hcan, CAN_FilterConfTypeDef* sFilterConfig)
{
 800061c:	b570      	push	{r4, r5, r6, lr}
  
  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 800061e:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 8000622:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;
 8000624:	694a      	ldr	r2, [r1, #20]

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 8000626:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 800062a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;
 800062e:	2401      	movs	r4, #1

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 8000630:	f040 0001 	orr.w	r0, r0, #1
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;
 8000634:	4094      	lsls	r4, r2

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 8000636:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
             CAN_FMR_CAN2SB                              ,
             CAN_FMR_FINIT                              |
             (uint32_t)(sFilterConfig->BankNumber << 8)   );
  
  /* Filter Deactivation */
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 800063a:	43e0      	mvns	r0, r4
 800063c:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
 8000640:	4005      	ands	r5, r0
 8000642:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c
  
  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000646:	69cd      	ldr	r5, [r1, #28]
 8000648:	b97d      	cbnz	r5, 800066a <HAL_CAN_ConfigFilter+0x50>
  {
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 800064a:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
 800064e:	68ce      	ldr	r6, [r1, #12]
  
  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
  {
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8000650:	4005      	ands	r5, r0
 8000652:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
 8000656:	888d      	ldrh	r5, [r1, #4]
 8000658:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800065c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8000660:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 8000664:	688e      	ldr	r6, [r1, #8]
 8000666:	880d      	ldrh	r5, [r1, #0]
 8000668:	e010      	b.n	800068c <HAL_CAN_ConfigFilter+0x72>
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh);
  }

  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800066a:	2d01      	cmp	r5, #1
 800066c:	d112      	bne.n	8000694 <HAL_CAN_ConfigFilter+0x7a>
  {
    /* 32-bit scale for the filter */
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 800066e:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
 8000672:	680e      	ldr	r6, [r1, #0]
  }

  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
  {
    /* 32-bit scale for the filter */
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8000674:	4325      	orrs	r5, r4
 8000676:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
 800067a:	888d      	ldrh	r5, [r1, #4]
 800067c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8000680:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
  {
    /* 32-bit scale for the filter */
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8000684:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 8000688:	688e      	ldr	r6, [r1, #8]
 800068a:	898d      	ldrh	r5, [r1, #12]
 800068c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8000690:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow);
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000694:	698a      	ldr	r2, [r1, #24]
 8000696:	b91a      	cbnz	r2, 80006a0 <HAL_CAN_ConfigFilter+0x86>
  {
    /*Id/Mask mode for the filter*/
    CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 8000698:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800069c:	4002      	ands	r2, r0
 800069e:	e002      	b.n	80006a6 <HAL_CAN_ConfigFilter+0x8c>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 80006a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80006a4:	4322      	orrs	r2, r4
 80006a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80006aa:	690a      	ldr	r2, [r1, #16]
 80006ac:	b92a      	cbnz	r2, 80006ba <HAL_CAN_ConfigFilter+0xa0>
  {
    /* FIFO 0 assignation for the filter */
    CLEAR_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 80006ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80006b2:	4010      	ands	r0, r2
 80006b4:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
 80006b8:	e004      	b.n	80006c4 <HAL_CAN_ConfigFilter+0xaa>
  }
  else
  {
    /* FIFO 1 assignation for the filter */
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 80006ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80006be:	4322      	orrs	r2, r4
 80006c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 80006c4:	6a0a      	ldr	r2, [r1, #32]
  /* Leave the initialisation mode for the filter */
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
  
  /* Return function status */
  return HAL_OK;
}
 80006c6:	2000      	movs	r0, #0
    /* FIFO 1 assignation for the filter */
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 80006c8:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
 80006ca:	bf02      	ittt	eq
 80006cc:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 80006d0:	4314      	orreq	r4, r2
 80006d2:	f8c3 421c 	streq.w	r4, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
 80006d6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80006da:	f022 0201 	bic.w	r2, r2, #1
 80006de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Return function status */
  return HAL_OK;
}
 80006e2:	bd70      	pop	{r4, r5, r6, pc}

080006e4 <HAL_CAN_Init>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 80006e4:	b570      	push	{r4, r5, r6, lr}
  uint32_t status = CAN_INITSTATUS_FAILED;  /* Default init status */
  uint32_t tickstart = 0;
  uint32_t tmp_mcr = 0;
  
  /* Check CAN handle */
  if(hcan == NULL)
 80006e6:	4604      	mov	r4, r0
 80006e8:	2800      	cmp	r0, #0
 80006ea:	d076      	beq.n	80007da <HAL_CAN_Init+0xf6>
  assert_param(IS_CAN_SJW(hcan->Init.SJW));
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  
  if(hcan->State == HAL_CAN_STATE_RESET)
 80006ec:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80006f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80006f4:	b91b      	cbnz	r3, 80006fe <HAL_CAN_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 80006f6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 80006fa:	f7ff feb3 	bl	8000464 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 80006fe:	2302      	movs	r3, #2
 8000700:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000704:	6823      	ldr	r3, [r4, #0]
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	f022 0202 	bic.w	r2, r2, #2
 800070c:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	f042 0201 	orr.w	r2, r2, #1
 8000714:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();   
 8000716:	f7ff ff6d 	bl	80005f4 <HAL_GetTick>
 800071a:	4606      	mov	r6, r0
  
  /* Wait the acknowledge */
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 800071c:	6822      	ldr	r2, [r4, #0]
 800071e:	6853      	ldr	r3, [r2, #4]
 8000720:	f013 0501 	ands.w	r5, r3, #1
 8000724:	d105      	bne.n	8000732 <HAL_CAN_Init+0x4e>
  {
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8000726:	f7ff ff65 	bl	80005f4 <HAL_GetTick>
 800072a:	1b80      	subs	r0, r0, r6
 800072c:	280a      	cmp	r0, #10
 800072e:	d9f5      	bls.n	800071c <HAL_CAN_Init+0x38>
 8000730:	e041      	b.n	80007b6 <HAL_CAN_Init+0xd2>
      return HAL_TIMEOUT;
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000732:	6853      	ldr	r3, [r2, #4]
 8000734:	07d9      	lsls	r1, r3, #31
 8000736:	d54d      	bpl.n	80007d4 <HAL_CAN_Init+0xf0>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 8000738:	69a3      	ldr	r3, [r4, #24]
    {
      SET_BIT(tmp_mcr, CAN_MCR_TTCM);
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 800073a:	69e1      	ldr	r1, [r4, #28]
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
    {
      SET_BIT(tmp_mcr, CAN_MCR_TTCM);
 800073c:	2b01      	cmp	r3, #1
 800073e:	bf0c      	ite	eq
 8000740:	2380      	moveq	r3, #128	; 0x80
 8000742:	2300      	movne	r3, #0
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 8000744:	2901      	cmp	r1, #1
    {
      SET_BIT(tmp_mcr, CAN_MCR_ABOM);
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 8000746:	6a21      	ldr	r1, [r4, #32]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
    {
      SET_BIT(tmp_mcr, CAN_MCR_ABOM);
 8000748:	bf08      	it	eq
 800074a:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 800074e:	2901      	cmp	r1, #1
    {
      SET_BIT(tmp_mcr, CAN_MCR_AWUM);
    }
    
    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 8000750:	6a61      	ldr	r1, [r4, #36]	; 0x24
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
    {
      SET_BIT(tmp_mcr, CAN_MCR_AWUM);
 8000752:	bf08      	it	eq
 8000754:	f043 0320 	orreq.w	r3, r3, #32
    }
    
    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 8000758:	2901      	cmp	r1, #1
    {
      SET_BIT(tmp_mcr, CAN_MCR_NART);
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 800075a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    }
    
    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
    {
      SET_BIT(tmp_mcr, CAN_MCR_NART);
 800075c:	bf08      	it	eq
 800075e:	f043 0310 	orreq.w	r3, r3, #16
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 8000762:	2901      	cmp	r1, #1
    {
      SET_BIT(tmp_mcr, CAN_MCR_RFLM);
    }
    
    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 8000764:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
    {
      SET_BIT(tmp_mcr, CAN_MCR_RFLM);
 8000766:	bf08      	it	eq
 8000768:	f043 0308 	orreq.w	r3, r3, #8
    }
    
    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 800076c:	2901      	cmp	r1, #1
    {
      SET_BIT(tmp_mcr, CAN_MCR_TXFP);
    }
    
    /* Update register MCR */
    MODIFY_REG(hcan->Instance->MCR,
 800076e:	6811      	ldr	r1, [r2, #0]
    }
    
    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
    {
      SET_BIT(tmp_mcr, CAN_MCR_TXFP);
 8000770:	bf08      	it	eq
 8000772:	f043 0304 	orreq.w	r3, r3, #4
    }
    
    /* Update register MCR */
    MODIFY_REG(hcan->Instance->MCR,
 8000776:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
 800077a:	430b      	orrs	r3, r1
 800077c:	6013      	str	r3, [r2, #0]
               CAN_MCR_RFLM |
               CAN_MCR_TXFP,
               tmp_mcr);
    
    /* Set the bit timing register */
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800077e:	68a1      	ldr	r1, [r4, #8]
 8000780:	68e3      	ldr	r3, [r4, #12]
 8000782:	4319      	orrs	r1, r3
 8000784:	6923      	ldr	r3, [r4, #16]
 8000786:	4319      	orrs	r1, r3
 8000788:	6963      	ldr	r3, [r4, #20]
 800078a:	4319      	orrs	r1, r3
 800078c:	6863      	ldr	r3, [r4, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	430b      	orrs	r3, r1
 8000792:	61d3      	str	r3, [r2, #28]
                                              hcan->Init.BS1            |
                                              hcan->Init.BS2            |
                                              (hcan->Init.Prescaler - 1) ));

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000794:	6813      	ldr	r3, [r2, #0]
 8000796:	f023 0301 	bic.w	r3, r3, #1
 800079a:	6013      	str	r3, [r2, #0]

    /* Get timeout */
    tickstart = HAL_GetTick();   
 800079c:	f7ff ff2a 	bl	80005f4 <HAL_GetTick>
 80007a0:	4606      	mov	r6, r0
   
    /* Wait the acknowledge */
    while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 80007a2:	6822      	ldr	r2, [r4, #0]
 80007a4:	6853      	ldr	r3, [r2, #4]
 80007a6:	f013 0501 	ands.w	r5, r3, #1
 80007aa:	d10a      	bne.n	80007c2 <HAL_CAN_Init+0xde>
    {
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 80007ac:	f7ff ff22 	bl	80005f4 <HAL_GetTick>
 80007b0:	1b80      	subs	r0, r0, r6
 80007b2:	280a      	cmp	r0, #10
 80007b4:	d9f5      	bls.n	80007a2 <HAL_CAN_Init+0xbe>
      {
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 80007b6:	2003      	movs	r0, #3
 80007b8:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hcan);
 80007bc:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38

        return HAL_TIMEOUT;
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
      }
    }

    /* Check acknowledged */
    if (HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 80007c2:	6853      	ldr	r3, [r2, #4]
 80007c4:	07db      	lsls	r3, r3, #31
 80007c6:	d505      	bpl.n	80007d4 <HAL_CAN_Init+0xf0>
  }
 
  if(status == CAN_INITSTATUS_SUCCESS)
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007c8:	2000      	movs	r0, #0
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 80007ca:	2301      	movs	r3, #1
  }
 
  if(status == CAN_INITSTATUS_SUCCESS)
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007cc:	63e0      	str	r0, [r4, #60]	; 0x3c
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 80007ce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
    /* Return function status */
    return HAL_OK;
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 80007d4:	2304      	movs	r3, #4
 80007d6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
    /* Return function status */
    return HAL_ERROR;
 80007da:	2001      	movs	r0, #1
  }
}
 80007dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080007e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e0:	4a07      	ldr	r2, [pc, #28]	; (8000800 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80007e2:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e4:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80007e6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80007ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007ee:	041b      	lsls	r3, r3, #16
 80007f0:	0c1b      	lsrs	r3, r3, #16
 80007f2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007fa:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80007fc:	60d3      	str	r3, [r2, #12]
 80007fe:	4770      	bx	lr
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000804:	4b17      	ldr	r3, [pc, #92]	; (8000864 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000806:	b530      	push	{r4, r5, lr}
 8000808:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800080a:	f3c3 2302 	ubfx	r3, r3, #8, #3
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800080e:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000812:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000814:	2c04      	cmp	r4, #4
 8000816:	bf28      	it	cs
 8000818:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081a:	2d06      	cmp	r5, #6

  return (
 800081c:	f04f 0501 	mov.w	r5, #1
 8000820:	fa05 f404 	lsl.w	r4, r5, r4
 8000824:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000828:	bf8c      	ite	hi
 800082a:	3b03      	subhi	r3, #3
 800082c:	2300      	movls	r3, #0

  return (
 800082e:	400c      	ands	r4, r1
 8000830:	409c      	lsls	r4, r3
 8000832:	fa05 f303 	lsl.w	r3, r5, r3
 8000836:	3b01      	subs	r3, #1
 8000838:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800083a:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800083c:	ea42 0204 	orr.w	r2, r2, r4
 8000840:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000844:	bfaf      	iteee	ge
 8000846:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084a:	4b07      	ldrlt	r3, [pc, #28]	; (8000868 <HAL_NVIC_SetPriority+0x64>)
 800084c:	f000 000f 	andlt.w	r0, r0, #15
 8000850:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000852:	bfa5      	ittet	ge
 8000854:	b2d2      	uxtbge	r2, r2
 8000856:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085a:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000860:	bd30      	pop	{r4, r5, pc}
 8000862:	bf00      	nop
 8000864:	e000ed00 	.word	0xe000ed00
 8000868:	e000ed14 	.word	0xe000ed14

0800086c <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800086c:	0942      	lsrs	r2, r0, #5
 800086e:	2301      	movs	r3, #1
 8000870:	f000 001f 	and.w	r0, r0, #31
 8000874:	fa03 f000 	lsl.w	r0, r3, r0
 8000878:	4b01      	ldr	r3, [pc, #4]	; (8000880 <HAL_NVIC_EnableIRQ+0x14>)
 800087a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800087e:	4770      	bx	lr
 8000880:	e000e100 	.word	0xe000e100

08000884 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000884:	3801      	subs	r0, #1
 8000886:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800088a:	d20a      	bcs.n	80008a2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088e:	4a07      	ldr	r2, [pc, #28]	; (80008ac <HAL_SYSTICK_Config+0x28>)
 8000890:	21f0      	movs	r1, #240	; 0xf0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000892:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000894:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000898:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800089a:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800089c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000e010 	.word	0xe000e010
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80008b0:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008b2:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	bf0c      	ite	eq
 80008b8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008bc:	f022 0204 	bicne.w	r2, r2, #4
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	4770      	bx	lr
 80008c4:	e000e010 	.word	0xe000e010

080008c8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80008c8:	4770      	bx	lr

080008ca <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80008ca:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80008cc:	f7ff fffc 	bl	80008c8 <HAL_SYSTICK_Callback>
 80008d0:	bd08      	pop	{r3, pc}
	...

080008d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 80008d8:	2400      	movs	r4, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80008da:	4626      	mov	r6, r4
 80008dc:	4b62      	ldr	r3, [pc, #392]	; (8000a68 <HAL_GPIO_Init+0x194>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008de:	f8df e194 	ldr.w	lr, [pc, #404]	; 8000a74 <HAL_GPIO_Init+0x1a0>
 80008e2:	f8df c194 	ldr.w	ip, [pc, #404]	; 8000a78 <HAL_GPIO_Init+0x1a4>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80008e6:	2201      	movs	r2, #1
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 80008e8:	680d      	ldr	r5, [r1, #0]

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80008ea:	40b2      	lsls	r2, r6
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 80008ec:	ea32 0505 	bics.w	r5, r2, r5
 80008f0:	f040 80b3 	bne.w	8000a5a <HAL_GPIO_Init+0x186>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008f4:	684d      	ldr	r5, [r1, #4]
 80008f6:	2d12      	cmp	r5, #18
 80008f8:	d028      	beq.n	800094c <HAL_GPIO_Init+0x78>
 80008fa:	d80e      	bhi.n	800091a <HAL_GPIO_Init+0x46>
 80008fc:	2d02      	cmp	r5, #2
 80008fe:	d022      	beq.n	8000946 <HAL_GPIO_Init+0x72>
 8000900:	d804      	bhi.n	800090c <HAL_GPIO_Init+0x38>
 8000902:	b335      	cbz	r5, 8000952 <HAL_GPIO_Init+0x7e>
 8000904:	2d01      	cmp	r5, #1
 8000906:	d12d      	bne.n	8000964 <HAL_GPIO_Init+0x90>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000908:	68cc      	ldr	r4, [r1, #12]
          break;
 800090a:	e02b      	b.n	8000964 <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800090c:	2d03      	cmp	r5, #3
 800090e:	d018      	beq.n	8000942 <HAL_GPIO_Init+0x6e>
 8000910:	2d11      	cmp	r5, #17
 8000912:	d127      	bne.n	8000964 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000914:	68cc      	ldr	r4, [r1, #12]
 8000916:	3404      	adds	r4, #4
          break;
 8000918:	e024      	b.n	8000964 <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800091a:	4f54      	ldr	r7, [pc, #336]	; (8000a6c <HAL_GPIO_Init+0x198>)
 800091c:	42bd      	cmp	r5, r7
 800091e:	d018      	beq.n	8000952 <HAL_GPIO_Init+0x7e>
 8000920:	d806      	bhi.n	8000930 <HAL_GPIO_Init+0x5c>
 8000922:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8000a7c <HAL_GPIO_Init+0x1a8>
 8000926:	4545      	cmp	r5, r8
 8000928:	d013      	beq.n	8000952 <HAL_GPIO_Init+0x7e>
 800092a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 800092e:	e005      	b.n	800093c <HAL_GPIO_Init+0x68>
 8000930:	4575      	cmp	r5, lr
 8000932:	d00e      	beq.n	8000952 <HAL_GPIO_Init+0x7e>
 8000934:	4565      	cmp	r5, ip
 8000936:	d00c      	beq.n	8000952 <HAL_GPIO_Init+0x7e>
 8000938:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8000a80 <HAL_GPIO_Init+0x1ac>
 800093c:	4545      	cmp	r5, r8
 800093e:	d111      	bne.n	8000964 <HAL_GPIO_Init+0x90>
 8000940:	e007      	b.n	8000952 <HAL_GPIO_Init+0x7e>
          }
          break; 
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000942:	2400      	movs	r4, #0
 8000944:	e00e      	b.n	8000964 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000946:	68cc      	ldr	r4, [r1, #12]
 8000948:	3408      	adds	r4, #8
          break;
 800094a:	e00b      	b.n	8000964 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800094c:	68cc      	ldr	r4, [r1, #12]
 800094e:	340c      	adds	r4, #12
          break;
 8000950:	e008      	b.n	8000964 <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8000952:	688c      	ldr	r4, [r1, #8]
 8000954:	b12c      	cbz	r4, 8000962 <HAL_GPIO_Init+0x8e>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000956:	2c01      	cmp	r4, #1
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 8000958:	bf0c      	ite	eq
 800095a:	6102      	streq	r2, [r0, #16]
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 800095c:	6142      	strne	r2, [r0, #20]
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800095e:	2408      	movs	r4, #8
 8000960:	e000      	b.n	8000964 <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000962:	2404      	movs	r4, #4
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000964:	2aff      	cmp	r2, #255	; 0xff
 8000966:	bf97      	itett	ls
 8000968:	4683      	movls	fp, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 800096a:	f1a6 0508 	subhi.w	r5, r6, #8
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800096e:	f8d0 9000 	ldrls.w	r9, [r0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8000972:	00b5      	lslls	r5, r6, #2
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000974:	bf84      	itt	hi
 8000976:	f8d0 9004 	ldrhi.w	r9, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 800097a:	00ad      	lslhi	r5, r5, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800097c:	f04f 080f 	mov.w	r8, #15
 8000980:	fa08 fa05 	lsl.w	sl, r8, r5
 8000984:	ea29 090a 	bic.w	r9, r9, sl
 8000988:	fa04 f505 	lsl.w	r5, r4, r5
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800098c:	bf88      	it	hi
 800098e:	f100 0b04 	addhi.w	fp, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000992:	ea49 0505 	orr.w	r5, r9, r5
 8000996:	f8cb 5000 	str.w	r5, [fp]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800099a:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800099e:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 80009a2:	d05a      	beq.n	8000a5a <HAL_GPIO_Init+0x186>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009a4:	4d32      	ldr	r5, [pc, #200]	; (8000a70 <HAL_GPIO_Init+0x19c>)
 80009a6:	4f32      	ldr	r7, [pc, #200]	; (8000a70 <HAL_GPIO_Init+0x19c>)
 80009a8:	69ad      	ldr	r5, [r5, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80009aa:	f006 0a03 	and.w	sl, r6, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009ae:	f045 0501 	orr.w	r5, r5, #1
 80009b2:	61bd      	str	r5, [r7, #24]
 80009b4:	69bd      	ldr	r5, [r7, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80009b6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009ba:	f005 0501 	and.w	r5, r5, #1
 80009be:	9501      	str	r5, [sp, #4]
 80009c0:	9d01      	ldr	r5, [sp, #4]
 80009c2:	f026 0503 	bic.w	r5, r6, #3
 80009c6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80009ca:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
 80009ce:	f8d5 b008 	ldr.w	fp, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80009d2:	f5a7 3784 	sub.w	r7, r7, #67584	; 0x10800
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80009d6:	fa08 f80a 	lsl.w	r8, r8, sl
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80009da:	42b8      	cmp	r0, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80009dc:	ea2b 0808 	bic.w	r8, fp, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80009e0:	d010      	beq.n	8000a04 <HAL_GPIO_Init+0x130>
 80009e2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80009e6:	42b8      	cmp	r0, r7
 80009e8:	d00f      	beq.n	8000a0a <HAL_GPIO_Init+0x136>
 80009ea:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80009ee:	42b8      	cmp	r0, r7
 80009f0:	d00e      	beq.n	8000a10 <HAL_GPIO_Init+0x13c>
 80009f2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80009f6:	42b8      	cmp	r0, r7
 80009f8:	bf0c      	ite	eq
 80009fa:	f04f 0b03 	moveq.w	fp, #3
 80009fe:	f04f 0b04 	movne.w	fp, #4
 8000a02:	e007      	b.n	8000a14 <HAL_GPIO_Init+0x140>
 8000a04:	f04f 0b00 	mov.w	fp, #0
 8000a08:	e004      	b.n	8000a14 <HAL_GPIO_Init+0x140>
 8000a0a:	f04f 0b01 	mov.w	fp, #1
 8000a0e:	e001      	b.n	8000a14 <HAL_GPIO_Init+0x140>
 8000a10:	f04f 0b02 	mov.w	fp, #2
 8000a14:	fa0b fa0a 	lsl.w	sl, fp, sl
 8000a18:	ea4a 0a08 	orr.w	sl, sl, r8
        AFIO->EXTICR[position >> 2] = temp;
 8000a1c:	f8c5 a008 	str.w	sl, [r5, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000a20:	681d      	ldr	r5, [r3, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        AFIO->EXTICR[position >> 2] = temp;
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a22:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000a26:	bf14      	ite	ne
 8000a28:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000a2a:	4395      	biceq	r5, r2
 8000a2c:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000a2e:	685d      	ldr	r5, [r3, #4]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a30:	f419 3f00 	tst.w	r9, #131072	; 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000a34:	bf14      	ite	ne
 8000a36:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8000a38:	4395      	biceq	r5, r2
 8000a3a:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000a3c:	689d      	ldr	r5, [r3, #8]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a3e:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000a42:	bf14      	ite	ne
 8000a44:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000a46:	4395      	biceq	r5, r2
 8000a48:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000a4a:	68dd      	ldr	r5, [r3, #12]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a4c:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000a50:	bf14      	ite	ne
 8000a52:	432a      	orrne	r2, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000a54:	ea25 0202 	biceq.w	r2, r5, r2
 8000a58:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000a5a:	3601      	adds	r6, #1
 8000a5c:	2e10      	cmp	r6, #16
 8000a5e:	f47f af42 	bne.w	80008e6 <HAL_GPIO_Init+0x12>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 8000a62:	b003      	add	sp, #12
 8000a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a68:	40010400 	.word	0x40010400
 8000a6c:	10210000 	.word	0x10210000
 8000a70:	40021000 	.word	0x40021000
 8000a74:	10310000 	.word	0x10310000
 8000a78:	10320000 	.word	0x10320000
 8000a7c:	10110000 	.word	0x10110000
 8000a80:	10220000 	.word	0x10220000

08000a84 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a84:	b902      	cbnz	r2, 8000a88 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000a86:	0409      	lsls	r1, r1, #16
 8000a88:	6101      	str	r1, [r0, #16]
 8000a8a:	4770      	bx	lr

08000a8c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a8c:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a8e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a92:	07dc      	lsls	r4, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a94:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a96:	d403      	bmi.n	8000aa0 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a98:	682b      	ldr	r3, [r5, #0]
 8000a9a:	0798      	lsls	r0, r3, #30
 8000a9c:	d473      	bmi.n	8000b86 <HAL_RCC_OscConfig+0xfa>
 8000a9e:	e0f2      	b.n	8000c86 <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000aa0:	4cb9      	ldr	r4, [pc, #740]	; (8000d88 <HAL_RCC_OscConfig+0x2fc>)
 8000aa2:	6863      	ldr	r3, [r4, #4]
 8000aa4:	f003 030c 	and.w	r3, r3, #12
 8000aa8:	2b04      	cmp	r3, #4
 8000aaa:	d007      	beq.n	8000abc <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000aac:	6863      	ldr	r3, [r4, #4]
 8000aae:	f003 030c 	and.w	r3, r3, #12
 8000ab2:	2b08      	cmp	r3, #8
 8000ab4:	d116      	bne.n	8000ae4 <HAL_RCC_OscConfig+0x58>
 8000ab6:	6863      	ldr	r3, [r4, #4]
 8000ab8:	03d9      	lsls	r1, r3, #15
 8000aba:	d513      	bpl.n	8000ae4 <HAL_RCC_OscConfig+0x58>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000abc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ac0:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ac4:	6822      	ldr	r2, [r4, #0]
 8000ac6:	fa93 f3a3 	rbit	r3, r3
 8000aca:	fab3 f383 	clz	r3, r3
 8000ace:	f003 031f 	and.w	r3, r3, #31
 8000ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ad6:	07da      	lsls	r2, r3, #31
 8000ad8:	d5de      	bpl.n	8000a98 <HAL_RCC_OscConfig+0xc>
 8000ada:	686b      	ldr	r3, [r5, #4]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1db      	bne.n	8000a98 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	e22d      	b.n	8000f40 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ae4:	686b      	ldr	r3, [r5, #4]
 8000ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aea:	d015      	beq.n	8000b18 <HAL_RCC_OscConfig+0x8c>
 8000aec:	b96b      	cbnz	r3, 8000b0a <HAL_RCC_OscConfig+0x7e>
 8000aee:	6823      	ldr	r3, [r4, #0]
 8000af0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000af8:	6023      	str	r3, [r4, #0]
 8000afa:	6823      	ldr	r3, [r4, #0]
 8000afc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b00:	6023      	str	r3, [r4, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b02:	f7ff fd77 	bl	80005f4 <HAL_GetTick>
 8000b06:	4607      	mov	r7, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b08:	e02f      	b.n	8000b6a <HAL_RCC_OscConfig+0xde>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b0e:	6823      	ldr	r3, [r4, #0]
 8000b10:	d106      	bne.n	8000b20 <HAL_RCC_OscConfig+0x94>
 8000b12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b16:	6023      	str	r3, [r4, #0]
 8000b18:	6823      	ldr	r3, [r4, #0]
 8000b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b1e:	e005      	b.n	8000b2c <HAL_RCC_OscConfig+0xa0>
 8000b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b24:	6023      	str	r3, [r4, #0]
 8000b26:	6823      	ldr	r3, [r4, #0]
 8000b28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b2c:	6023      	str	r3, [r4, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b2e:	f7ff fd61 	bl	80005f4 <HAL_GetTick>
 8000b32:	4607      	mov	r7, r0
 8000b34:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000b38:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b3c:	6822      	ldr	r2, [r4, #0]
 8000b3e:	fa96 f3a6 	rbit	r3, r6
 8000b42:	fab3 f383 	clz	r3, r3
 8000b46:	f003 031f 	and.w	r3, r3, #31
 8000b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b4e:	07db      	lsls	r3, r3, #31
 8000b50:	d4a2      	bmi.n	8000a98 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b52:	f7ff fd4f 	bl	80005f4 <HAL_GetTick>
 8000b56:	1bc0      	subs	r0, r0, r7
 8000b58:	2864      	cmp	r0, #100	; 0x64
 8000b5a:	d9ed      	bls.n	8000b38 <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	e1ef      	b.n	8000f40 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b60:	f7ff fd48 	bl	80005f4 <HAL_GetTick>
 8000b64:	1bc0      	subs	r0, r0, r7
 8000b66:	2864      	cmp	r0, #100	; 0x64
 8000b68:	d8f8      	bhi.n	8000b5c <HAL_RCC_OscConfig+0xd0>
 8000b6a:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b6e:	6822      	ldr	r2, [r4, #0]
 8000b70:	fa96 f3a6 	rbit	r3, r6
 8000b74:	fab3 f383 	clz	r3, r3
 8000b78:	f003 031f 	and.w	r3, r3, #31
 8000b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b80:	07d8      	lsls	r0, r3, #31
 8000b82:	d4ed      	bmi.n	8000b60 <HAL_RCC_OscConfig+0xd4>
 8000b84:	e788      	b.n	8000a98 <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b86:	4c80      	ldr	r4, [pc, #512]	; (8000d88 <HAL_RCC_OscConfig+0x2fc>)
 8000b88:	6863      	ldr	r3, [r4, #4]
 8000b8a:	f013 0f0c 	tst.w	r3, #12
 8000b8e:	d007      	beq.n	8000ba0 <HAL_RCC_OscConfig+0x114>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b90:	6863      	ldr	r3, [r4, #4]
 8000b92:	f003 030c 	and.w	r3, r3, #12
 8000b96:	2b08      	cmp	r3, #8
 8000b98:	d121      	bne.n	8000bde <HAL_RCC_OscConfig+0x152>
 8000b9a:	6863      	ldr	r3, [r4, #4]
 8000b9c:	03d9      	lsls	r1, r3, #15
 8000b9e:	d41e      	bmi.n	8000bde <HAL_RCC_OscConfig+0x152>
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ba6:	6822      	ldr	r2, [r4, #0]
 8000ba8:	fa93 f3a3 	rbit	r3, r3
 8000bac:	fab3 f383 	clz	r3, r3
 8000bb0:	f003 031f 	and.w	r3, r3, #31
 8000bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb8:	07da      	lsls	r2, r3, #31
 8000bba:	d502      	bpl.n	8000bc2 <HAL_RCC_OscConfig+0x136>
 8000bbc:	692b      	ldr	r3, [r5, #16]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d18e      	bne.n	8000ae0 <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bc2:	6823      	ldr	r3, [r4, #0]
 8000bc4:	22f8      	movs	r2, #248	; 0xf8
 8000bc6:	fa92 f2a2 	rbit	r2, r2
 8000bca:	fab2 f282 	clz	r2, r2
 8000bce:	6969      	ldr	r1, [r5, #20]
 8000bd0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bdc:	e053      	b.n	8000c86 <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bde:	692a      	ldr	r2, [r5, #16]
 8000be0:	2301      	movs	r3, #1
 8000be2:	b37a      	cbz	r2, 8000c44 <HAL_RCC_OscConfig+0x1b8>
 8000be4:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000be8:	fab2 f282 	clz	r2, r2
 8000bec:	0092      	lsls	r2, r2, #2
 8000bee:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8000bf2:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 8000bf6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf8:	f7ff fcfc 	bl	80005f4 <HAL_GetTick>
 8000bfc:	4607      	mov	r7, r0
 8000bfe:	2602      	movs	r6, #2
 8000c00:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c04:	4860      	ldr	r0, [pc, #384]	; (8000d88 <HAL_RCC_OscConfig+0x2fc>)
 8000c06:	6822      	ldr	r2, [r4, #0]
 8000c08:	fa96 f3a6 	rbit	r3, r6
 8000c0c:	fab3 f383 	clz	r3, r3
 8000c10:	f003 031f 	and.w	r3, r3, #31
 8000c14:	fa22 f303 	lsr.w	r3, r2, r3
 8000c18:	07db      	lsls	r3, r3, #31
 8000c1a:	d405      	bmi.n	8000c28 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c1c:	f7ff fcea 	bl	80005f4 <HAL_GetTick>
 8000c20:	1bc0      	subs	r0, r0, r7
 8000c22:	2802      	cmp	r0, #2
 8000c24:	d9ec      	bls.n	8000c00 <HAL_RCC_OscConfig+0x174>
 8000c26:	e799      	b.n	8000b5c <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c28:	6803      	ldr	r3, [r0, #0]
 8000c2a:	22f8      	movs	r2, #248	; 0xf8
 8000c2c:	fa92 f2a2 	rbit	r2, r2
 8000c30:	fab2 f282 	clz	r2, r2
 8000c34:	6969      	ldr	r1, [r5, #20]
 8000c36:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	6003      	str	r3, [r0, #0]
 8000c42:	e020      	b.n	8000c86 <HAL_RCC_OscConfig+0x1fa>
 8000c44:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c48:	fab3 f383 	clz	r3, r3
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000c52:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000c56:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c58:	f7ff fccc 	bl	80005f4 <HAL_GetTick>
 8000c5c:	4607      	mov	r7, r0
 8000c5e:	2602      	movs	r6, #2
 8000c60:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c64:	6822      	ldr	r2, [r4, #0]
 8000c66:	fa96 f3a6 	rbit	r3, r6
 8000c6a:	fab3 f383 	clz	r3, r3
 8000c6e:	f003 031f 	and.w	r3, r3, #31
 8000c72:	fa22 f303 	lsr.w	r3, r2, r3
 8000c76:	07d9      	lsls	r1, r3, #31
 8000c78:	d505      	bpl.n	8000c86 <HAL_RCC_OscConfig+0x1fa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c7a:	f7ff fcbb 	bl	80005f4 <HAL_GetTick>
 8000c7e:	1bc0      	subs	r0, r0, r7
 8000c80:	2802      	cmp	r0, #2
 8000c82:	d9ed      	bls.n	8000c60 <HAL_RCC_OscConfig+0x1d4>
 8000c84:	e76a      	b.n	8000b5c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c86:	682b      	ldr	r3, [r5, #0]
 8000c88:	071a      	lsls	r2, r3, #28
 8000c8a:	d546      	bpl.n	8000d1a <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c8c:	69aa      	ldr	r2, [r5, #24]
 8000c8e:	4c3e      	ldr	r4, [pc, #248]	; (8000d88 <HAL_RCC_OscConfig+0x2fc>)
 8000c90:	2301      	movs	r3, #1
 8000c92:	493e      	ldr	r1, [pc, #248]	; (8000d8c <HAL_RCC_OscConfig+0x300>)
 8000c94:	b312      	cbz	r2, 8000cdc <HAL_RCC_OscConfig+0x250>
 8000c96:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ca2:	f7ff fca7 	bl	80005f4 <HAL_GetTick>
 8000ca6:	4607      	mov	r7, r0
 8000ca8:	2602      	movs	r6, #2
 8000caa:	fa96 f3a6 	rbit	r3, r6
 8000cae:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000cb4:	fa96 f3a6 	rbit	r3, r6
 8000cb8:	fab3 f383 	clz	r3, r3
 8000cbc:	f003 031f 	and.w	r3, r3, #31
 8000cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc4:	07db      	lsls	r3, r3, #31
 8000cc6:	d405      	bmi.n	8000cd4 <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cc8:	f7ff fc94 	bl	80005f4 <HAL_GetTick>
 8000ccc:	1bc0      	subs	r0, r0, r7
 8000cce:	2802      	cmp	r0, #2
 8000cd0:	d9eb      	bls.n	8000caa <HAL_RCC_OscConfig+0x21e>
 8000cd2:	e743      	b.n	8000b5c <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f7ff fc93 	bl	8000600 <HAL_Delay>
 8000cda:	e01e      	b.n	8000d1a <HAL_RCC_OscConfig+0x28e>
 8000cdc:	fa93 f3a3 	rbit	r3, r3
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ce0:	fab3 f383 	clz	r3, r3
 8000ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ce8:	f7ff fc84 	bl	80005f4 <HAL_GetTick>
 8000cec:	4607      	mov	r7, r0
 8000cee:	2602      	movs	r6, #2
 8000cf0:	fa96 f3a6 	rbit	r3, r6
 8000cf4:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cf8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000cfa:	fa96 f3a6 	rbit	r3, r6
 8000cfe:	fab3 f383 	clz	r3, r3
 8000d02:	f003 031f 	and.w	r3, r3, #31
 8000d06:	fa22 f303 	lsr.w	r3, r2, r3
 8000d0a:	07d8      	lsls	r0, r3, #31
 8000d0c:	d505      	bpl.n	8000d1a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d0e:	f7ff fc71 	bl	80005f4 <HAL_GetTick>
 8000d12:	1bc0      	subs	r0, r0, r7
 8000d14:	2802      	cmp	r0, #2
 8000d16:	d9eb      	bls.n	8000cf0 <HAL_RCC_OscConfig+0x264>
 8000d18:	e720      	b.n	8000b5c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d1a:	682b      	ldr	r3, [r5, #0]
 8000d1c:	0759      	lsls	r1, r3, #29
 8000d1e:	d404      	bmi.n	8000d2a <HAL_RCC_OscConfig+0x29e>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d20:	69ea      	ldr	r2, [r5, #28]
 8000d22:	2a00      	cmp	r2, #0
 8000d24:	f040 8081 	bne.w	8000e2a <HAL_RCC_OscConfig+0x39e>
 8000d28:	e0d8      	b.n	8000edc <HAL_RCC_OscConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d2a:	4c17      	ldr	r4, [pc, #92]	; (8000d88 <HAL_RCC_OscConfig+0x2fc>)
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d2c:	4e18      	ldr	r6, [pc, #96]	; (8000d90 <HAL_RCC_OscConfig+0x304>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	69e3      	ldr	r3, [r4, #28]
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d34:	61e3      	str	r3, [r4, #28]
 8000d36:	69e3      	ldr	r3, [r4, #28]
 8000d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	9301      	str	r3, [sp, #4]
 8000d3e:	9b01      	ldr	r3, [sp, #4]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d40:	6833      	ldr	r3, [r6, #0]
 8000d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d46:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d48:	f7ff fc54 	bl	80005f4 <HAL_GetTick>
 8000d4c:	4607      	mov	r7, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000d4e:	6833      	ldr	r3, [r6, #0]
 8000d50:	05da      	lsls	r2, r3, #23
 8000d52:	d405      	bmi.n	8000d60 <HAL_RCC_OscConfig+0x2d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d54:	f7ff fc4e 	bl	80005f4 <HAL_GetTick>
 8000d58:	1bc0      	subs	r0, r0, r7
 8000d5a:	2864      	cmp	r0, #100	; 0x64
 8000d5c:	d9f7      	bls.n	8000d4e <HAL_RCC_OscConfig+0x2c2>
 8000d5e:	e6fd      	b.n	8000b5c <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d60:	68eb      	ldr	r3, [r5, #12]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d01c      	beq.n	8000da0 <HAL_RCC_OscConfig+0x314>
 8000d66:	b9ab      	cbnz	r3, 8000d94 <HAL_RCC_OscConfig+0x308>
 8000d68:	6a23      	ldr	r3, [r4, #32]
 8000d6a:	2602      	movs	r6, #2
 8000d6c:	f023 0301 	bic.w	r3, r3, #1
 8000d70:	6223      	str	r3, [r4, #32]
 8000d72:	6a23      	ldr	r3, [r4, #32]
 8000d74:	4637      	mov	r7, r6
 8000d76:	f023 0304 	bic.w	r3, r3, #4
 8000d7a:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d7c:	f7ff fc3a 	bl	80005f4 <HAL_GetTick>
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d80:	f241 3988 	movw	r9, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d84:	4680      	mov	r8, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d86:	e048      	b.n	8000e1a <HAL_RCC_OscConfig+0x38e>
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	42420480 	.word	0x42420480
 8000d90:	40007000 	.word	0x40007000
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d94:	2b05      	cmp	r3, #5
 8000d96:	6a23      	ldr	r3, [r4, #32]
 8000d98:	d106      	bne.n	8000da8 <HAL_RCC_OscConfig+0x31c>
 8000d9a:	f043 0304 	orr.w	r3, r3, #4
 8000d9e:	6223      	str	r3, [r4, #32]
 8000da0:	6a23      	ldr	r3, [r4, #32]
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	e005      	b.n	8000db4 <HAL_RCC_OscConfig+0x328>
 8000da8:	f023 0301 	bic.w	r3, r3, #1
 8000dac:	6223      	str	r3, [r4, #32]
 8000dae:	6a23      	ldr	r3, [r4, #32]
 8000db0:	f023 0304 	bic.w	r3, r3, #4
 8000db4:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000db6:	f7ff fc1d 	bl	80005f4 <HAL_GetTick>
 8000dba:	2602      	movs	r6, #2
 8000dbc:	4681      	mov	r9, r0
 8000dbe:	46b0      	mov	r8, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dc0:	f241 3788 	movw	r7, #5000	; 0x1388
 8000dc4:	fa96 f3a6 	rbit	r3, r6
 8000dc8:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dcc:	b10b      	cbz	r3, 8000dd2 <HAL_RCC_OscConfig+0x346>
 8000dce:	6a22      	ldr	r2, [r4, #32]
 8000dd0:	e000      	b.n	8000dd4 <HAL_RCC_OscConfig+0x348>
 8000dd2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000dd4:	fa98 f3a8 	rbit	r3, r8
 8000dd8:	fab3 f383 	clz	r3, r3
 8000ddc:	f003 031f 	and.w	r3, r3, #31
 8000de0:	fa22 f303 	lsr.w	r3, r2, r3
 8000de4:	07db      	lsls	r3, r3, #31
 8000de6:	d49b      	bmi.n	8000d20 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000de8:	f7ff fc04 	bl	80005f4 <HAL_GetTick>
 8000dec:	ebc9 0000 	rsb	r0, r9, r0
 8000df0:	42b8      	cmp	r0, r7
 8000df2:	d9e7      	bls.n	8000dc4 <HAL_RCC_OscConfig+0x338>
 8000df4:	e6b2      	b.n	8000b5c <HAL_RCC_OscConfig+0xd0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000df6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000df8:	fa97 f3a7 	rbit	r3, r7
 8000dfc:	fab3 f383 	clz	r3, r3
 8000e00:	f003 031f 	and.w	r3, r3, #31
 8000e04:	fa22 f303 	lsr.w	r3, r2, r3
 8000e08:	07d8      	lsls	r0, r3, #31
 8000e0a:	d589      	bpl.n	8000d20 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e0c:	f7ff fbf2 	bl	80005f4 <HAL_GetTick>
 8000e10:	ebc8 0000 	rsb	r0, r8, r0
 8000e14:	4548      	cmp	r0, r9
 8000e16:	f63f aea1 	bhi.w	8000b5c <HAL_RCC_OscConfig+0xd0>
 8000e1a:	fa96 f3a6 	rbit	r3, r6
 8000e1e:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d0e7      	beq.n	8000df6 <HAL_RCC_OscConfig+0x36a>
 8000e26:	6a22      	ldr	r2, [r4, #32]
 8000e28:	e7e6      	b.n	8000df8 <HAL_RCC_OscConfig+0x36c>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e2a:	4c47      	ldr	r4, [pc, #284]	; (8000f48 <HAL_RCC_OscConfig+0x4bc>)
 8000e2c:	6863      	ldr	r3, [r4, #4]
 8000e2e:	f003 030c 	and.w	r3, r3, #12
 8000e32:	2b08      	cmp	r3, #8
 8000e34:	f43f ae54 	beq.w	8000ae0 <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e38:	2a02      	cmp	r2, #2
 8000e3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e3e:	d15c      	bne.n	8000efa <HAL_RCC_OscConfig+0x46e>
 8000e40:	fa93 f3a3 	rbit	r3, r3
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e44:	fab3 f383 	clz	r3, r3
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000e4e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e56:	f7ff fbcd 	bl	80005f4 <HAL_GetTick>
 8000e5a:	4680      	mov	r8, r0
 8000e5c:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000e60:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e64:	4f38      	ldr	r7, [pc, #224]	; (8000f48 <HAL_RCC_OscConfig+0x4bc>)
 8000e66:	6822      	ldr	r2, [r4, #0]
 8000e68:	fa96 f3a6 	rbit	r3, r6
 8000e6c:	fab3 f383 	clz	r3, r3
 8000e70:	f003 031f 	and.w	r3, r3, #31
 8000e74:	fa22 f303 	lsr.w	r3, r2, r3
 8000e78:	07d9      	lsls	r1, r3, #31
 8000e7a:	d431      	bmi.n	8000ee0 <HAL_RCC_OscConfig+0x454>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e7c:	6a2e      	ldr	r6, [r5, #32]
 8000e7e:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8000e82:	d105      	bne.n	8000e90 <HAL_RCC_OscConfig+0x404>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e84:	6879      	ldr	r1, [r7, #4]
 8000e86:	f421 3000 	bic.w	r0, r1, #131072	; 0x20000
 8000e8a:	68a9      	ldr	r1, [r5, #8]
 8000e8c:	4301      	orrs	r1, r0
 8000e8e:	6079      	str	r1, [r7, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e90:	6863      	ldr	r3, [r4, #4]
 8000e92:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000e94:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000e98:	4332      	orrs	r2, r6
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	6063      	str	r3, [r4, #4]
 8000e9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ea2:	fa93 f3a3 	rbit	r3, r3
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ea6:	fab3 f383 	clz	r3, r3
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000eb0:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb8:	f7ff fb9c 	bl	80005f4 <HAL_GetTick>
 8000ebc:	4606      	mov	r6, r0
 8000ebe:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000ec2:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ec6:	6822      	ldr	r2, [r4, #0]
 8000ec8:	fa95 f3a5 	rbit	r3, r5
 8000ecc:	fab3 f383 	clz	r3, r3
 8000ed0:	f003 031f 	and.w	r3, r3, #31
 8000ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed8:	07da      	lsls	r2, r3, #31
 8000eda:	d508      	bpl.n	8000eee <HAL_RCC_OscConfig+0x462>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000edc:	2000      	movs	r0, #0
 8000ede:	e02f      	b.n	8000f40 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ee0:	f7ff fb88 	bl	80005f4 <HAL_GetTick>
 8000ee4:	ebc8 0000 	rsb	r0, r8, r0
 8000ee8:	2802      	cmp	r0, #2
 8000eea:	d9b9      	bls.n	8000e60 <HAL_RCC_OscConfig+0x3d4>
 8000eec:	e636      	b.n	8000b5c <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eee:	f7ff fb81 	bl	80005f4 <HAL_GetTick>
 8000ef2:	1b80      	subs	r0, r0, r6
 8000ef4:	2802      	cmp	r0, #2
 8000ef6:	d9e4      	bls.n	8000ec2 <HAL_RCC_OscConfig+0x436>
 8000ef8:	e630      	b.n	8000b5c <HAL_RCC_OscConfig+0xd0>
 8000efa:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000efe:	fab3 f383 	clz	r3, r3
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000f08:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f10:	f7ff fb70 	bl	80005f4 <HAL_GetTick>
 8000f14:	4606      	mov	r6, r0
 8000f16:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000f1a:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f1e:	6822      	ldr	r2, [r4, #0]
 8000f20:	fa95 f3a5 	rbit	r3, r5
 8000f24:	fab3 f383 	clz	r3, r3
 8000f28:	f003 031f 	and.w	r3, r3, #31
 8000f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f30:	07db      	lsls	r3, r3, #31
 8000f32:	d5d3      	bpl.n	8000edc <HAL_RCC_OscConfig+0x450>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f34:	f7ff fb5e 	bl	80005f4 <HAL_GetTick>
 8000f38:	1b80      	subs	r0, r0, r6
 8000f3a:	2802      	cmp	r0, #2
 8000f3c:	d9ed      	bls.n	8000f1a <HAL_RCC_OscConfig+0x48e>
 8000f3e:	e60d      	b.n	8000b5c <HAL_RCC_OscConfig+0xd0>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000f40:	b003      	add	sp, #12
 8000f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000

08000f4c <HAL_RCC_GetSysClockFreq>:
{
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <HAL_RCC_GetSysClockFreq+0x80>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f4e:	b570      	push	{r4, r5, r6, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f50:	f103 0510 	add.w	r5, r3, #16
 8000f54:	462e      	mov	r6, r5
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f56:	b086      	sub	sp, #24
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f58:	ac02      	add	r4, sp, #8
 8000f5a:	4622      	mov	r2, r4
 8000f5c:	6818      	ldr	r0, [r3, #0]
 8000f5e:	6859      	ldr	r1, [r3, #4]
 8000f60:	3308      	adds	r3, #8
 8000f62:	c203      	stmia	r2!, {r0, r1}
 8000f64:	42ab      	cmp	r3, r5
 8000f66:	4614      	mov	r4, r2
 8000f68:	d1f7      	bne.n	8000f5a <HAL_RCC_GetSysClockFreq+0xe>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8000f6a:	8833      	ldrh	r3, [r6, #0]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8000f6c:	4c18      	ldr	r4, [pc, #96]	; (8000fd0 <HAL_RCC_GetSysClockFreq+0x84>)
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8000f6e:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8000f72:	6860      	ldr	r0, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f74:	f000 030c 	and.w	r3, r0, #12
 8000f78:	2b08      	cmp	r3, #8
 8000f7a:	d124      	bne.n	8000fc6 <HAL_RCC_GetSysClockFreq+0x7a>
 8000f7c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000f80:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8000f84:	fab3 f383 	clz	r3, r3
 8000f88:	f400 1270 	and.w	r2, r0, #3932160	; 0x3c0000
 8000f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f90:	aa06      	add	r2, sp, #24
 8000f92:	4413      	add	r3, r2
 8000f94:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f98:	03c3      	lsls	r3, r0, #15
 8000f9a:	d511      	bpl.n	8000fc0 <HAL_RCC_GetSysClockFreq+0x74>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8000f9c:	6862      	ldr	r2, [r4, #4]
 8000f9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fa2:	fa93 f3a3 	rbit	r3, r3
 8000fa6:	fab3 f083 	clz	r0, r3
 8000faa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8000fae:	40c3      	lsrs	r3, r0
 8000fb0:	aa06      	add	r2, sp, #24
 8000fb2:	4413      	add	r3, r2
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8000fb4:	f813 0c14 	ldrb.w	r0, [r3, #-20]
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_RCC_GetSysClockFreq+0x88>)
 8000fba:	fbb3 f0f0 	udiv	r0, r3, r0
 8000fbe:	e000      	b.n	8000fc2 <HAL_RCC_GetSysClockFreq+0x76>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000fc2:	4348      	muls	r0, r1
 8000fc4:	e000      	b.n	8000fc8 <HAL_RCC_GetSysClockFreq+0x7c>
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000fc6:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <HAL_RCC_GetSysClockFreq+0x88>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000fc8:	b006      	add	sp, #24
 8000fca:	bd70      	pop	{r4, r5, r6, pc}
 8000fcc:	080016a0 	.word	0x080016a0
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	007a1200 	.word	0x007a1200
 8000fd8:	003d0900 	.word	0x003d0900

08000fdc <HAL_RCC_ClockConfig>:
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fdc:	4a54      	ldr	r2, [pc, #336]	; (8001130 <HAL_RCC_ClockConfig+0x154>)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fe2:	6813      	ldr	r3, [r2, #0]
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fe4:	4606      	mov	r6, r0
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fec:	460d      	mov	r5, r1
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fee:	d30a      	bcc.n	8001006 <HAL_RCC_ClockConfig+0x2a>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ff0:	6831      	ldr	r1, [r6, #0]
 8000ff2:	078c      	lsls	r4, r1, #30
 8000ff4:	d514      	bpl.n	8001020 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ff6:	484f      	ldr	r0, [pc, #316]	; (8001134 <HAL_RCC_ClockConfig+0x158>)
 8000ff8:	6843      	ldr	r3, [r0, #4]
 8000ffa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ffe:	68b3      	ldr	r3, [r6, #8]
 8001000:	4313      	orrs	r3, r2
 8001002:	6043      	str	r3, [r0, #4]
 8001004:	e00c      	b.n	8001020 <HAL_RCC_ClockConfig+0x44>
#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001006:	6813      	ldr	r3, [r2, #0]
 8001008:	f023 0307 	bic.w	r3, r3, #7
 800100c:	430b      	orrs	r3, r1
 800100e:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001010:	6813      	ldr	r3, [r2, #0]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	4299      	cmp	r1, r3
 8001018:	d0ea      	beq.n	8000ff0 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 800101a:	2001      	movs	r0, #1
 800101c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001020:	07c8      	lsls	r0, r1, #31
 8001022:	d406      	bmi.n	8001032 <HAL_RCC_ClockConfig+0x56>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001024:	4a42      	ldr	r2, [pc, #264]	; (8001130 <HAL_RCC_ClockConfig+0x154>)
 8001026:	6813      	ldr	r3, [r2, #0]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	429d      	cmp	r5, r3
 800102e:	d34a      	bcc.n	80010c6 <HAL_RCC_ClockConfig+0xea>
 8001030:	e053      	b.n	80010da <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001032:	6872      	ldr	r2, [r6, #4]
 8001034:	4c3f      	ldr	r4, [pc, #252]	; (8001134 <HAL_RCC_ClockConfig+0x158>)
 8001036:	2a01      	cmp	r2, #1
 8001038:	d102      	bne.n	8001040 <HAL_RCC_ClockConfig+0x64>
 800103a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800103e:	e004      	b.n	800104a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001040:	2a02      	cmp	r2, #2
 8001042:	bf0c      	ite	eq
 8001044:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001048:	2302      	movne	r3, #2
 800104a:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104e:	6821      	ldr	r1, [r4, #0]
 8001050:	fa93 f3a3 	rbit	r3, r3
 8001054:	fab3 f383 	clz	r3, r3
 8001058:	f003 031f 	and.w	r3, r3, #31
 800105c:	fa21 f303 	lsr.w	r3, r1, r3
 8001060:	07d9      	lsls	r1, r3, #31
 8001062:	d5da      	bpl.n	800101a <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001064:	6863      	ldr	r3, [r4, #4]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001066:	f241 3888 	movw	r8, #5000	; 0x1388
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800106a:	f023 0303 	bic.w	r3, r3, #3
 800106e:	431a      	orrs	r2, r3
 8001070:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001072:	f7ff fabf 	bl	80005f4 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001076:	6873      	ldr	r3, [r6, #4]
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001078:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800107a:	2b01      	cmp	r3, #1
 800107c:	d10c      	bne.n	8001098 <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800107e:	6863      	ldr	r3, [r4, #4]
 8001080:	f003 030c 	and.w	r3, r3, #12
 8001084:	2b04      	cmp	r3, #4
 8001086:	d0cd      	beq.n	8001024 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001088:	f7ff fab4 	bl	80005f4 <HAL_GetTick>
 800108c:	1bc0      	subs	r0, r0, r7
 800108e:	4540      	cmp	r0, r8
 8001090:	d9f5      	bls.n	800107e <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 8001092:	2003      	movs	r0, #3
 8001094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001098:	2b02      	cmp	r3, #2
 800109a:	d10f      	bne.n	80010bc <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800109c:	6863      	ldr	r3, [r4, #4]
 800109e:	f003 030c 	and.w	r3, r3, #12
 80010a2:	2b08      	cmp	r3, #8
 80010a4:	d0be      	beq.n	8001024 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010a6:	f7ff faa5 	bl	80005f4 <HAL_GetTick>
 80010aa:	1bc0      	subs	r0, r0, r7
 80010ac:	4540      	cmp	r0, r8
 80010ae:	d9f5      	bls.n	800109c <HAL_RCC_ClockConfig+0xc0>
 80010b0:	e7ef      	b.n	8001092 <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010b2:	f7ff fa9f 	bl	80005f4 <HAL_GetTick>
 80010b6:	1bc0      	subs	r0, r0, r7
 80010b8:	4540      	cmp	r0, r8
 80010ba:	d8ea      	bhi.n	8001092 <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80010bc:	6863      	ldr	r3, [r4, #4]
 80010be:	f013 0f0c 	tst.w	r3, #12
 80010c2:	d1f6      	bne.n	80010b2 <HAL_RCC_ClockConfig+0xd6>
 80010c4:	e7ae      	b.n	8001024 <HAL_RCC_ClockConfig+0x48>
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010c6:	6813      	ldr	r3, [r2, #0]
 80010c8:	f023 0307 	bic.w	r3, r3, #7
 80010cc:	432b      	orrs	r3, r5
 80010ce:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010d0:	6813      	ldr	r3, [r2, #0]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	429d      	cmp	r5, r3
 80010d8:	d19f      	bne.n	800101a <HAL_RCC_ClockConfig+0x3e>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010da:	6831      	ldr	r1, [r6, #0]
 80010dc:	4c15      	ldr	r4, [pc, #84]	; (8001134 <HAL_RCC_ClockConfig+0x158>)
 80010de:	f011 0f04 	tst.w	r1, #4
 80010e2:	d005      	beq.n	80010f0 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010e4:	6863      	ldr	r3, [r4, #4]
 80010e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80010ea:	68f3      	ldr	r3, [r6, #12]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f0:	070b      	lsls	r3, r1, #28
 80010f2:	d506      	bpl.n	8001102 <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010f4:	6863      	ldr	r3, [r4, #4]
 80010f6:	6932      	ldr	r2, [r6, #16]
 80010f8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80010fc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001100:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001102:	f7ff ff23 	bl	8000f4c <HAL_RCC_GetSysClockFreq>
 8001106:	6863      	ldr	r3, [r4, #4]
 8001108:	22f0      	movs	r2, #240	; 0xf0
 800110a:	fa92 f2a2 	rbit	r2, r2
 800110e:	fab2 f282 	clz	r2, r2
 8001112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001116:	40d3      	lsrs	r3, r2
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <HAL_RCC_ClockConfig+0x15c>)
 800111a:	5cd3      	ldrb	r3, [r2, r3]
 800111c:	40d8      	lsrs	r0, r3
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <HAL_RCC_ClockConfig+0x160>)
 8001120:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001122:	2000      	movs	r0, #0
 8001124:	f7ff fa3a 	bl	800059c <HAL_InitTick>
  
  return HAL_OK;
 8001128:	2000      	movs	r0, #0
}
 800112a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800112e:	bf00      	nop
 8001130:	40022000 	.word	0x40022000
 8001134:	40021000 	.word	0x40021000
 8001138:	080016b2 	.word	0x080016b2
 800113c:	20000000 	.word	0x20000000

08001140 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001140:	4b01      	ldr	r3, [pc, #4]	; (8001148 <HAL_RCC_GetHCLKFreq+0x8>)
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000000 	.word	0x20000000

0800114c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <HAL_RCC_GetPCLK1Freq+0x24>)
 800114e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	fa92 f2a2 	rbit	r2, r2
 8001158:	fab2 f282 	clz	r2, r2
 800115c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001160:	40d3      	lsrs	r3, r2
 8001162:	4a04      	ldr	r2, [pc, #16]	; (8001174 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001164:	5cd3      	ldrb	r3, [r2, r3]
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001168:	6810      	ldr	r0, [r2, #0]
}    
 800116a:	40d8      	lsrs	r0, r3
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000
 8001174:	080016c2 	.word	0x080016c2
 8001178:	20000000 	.word	0x20000000

0800117c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800117e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	fa92 f2a2 	rbit	r2, r2
 8001188:	fab2 f282 	clz	r2, r2
 800118c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001190:	40d3      	lsrs	r3, r2
 8001192:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001194:	5cd3      	ldrb	r3, [r2, r3]
 8001196:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001198:	6810      	ldr	r0, [r2, #0]
} 
 800119a:	40d8      	lsrs	r0, r3
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000
 80011a4:	080016c2 	.word	0x080016c2
 80011a8:	20000000 	.word	0x20000000

080011ac <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80011ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80011b0:	6806      	ldr	r6, [r0, #0]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
  MODIFY_REG(huart->Instance->CR1, 
 80011b2:	6881      	ldr	r1, [r0, #8]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80011b4:	6933      	ldr	r3, [r6, #16]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80011b6:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80011b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80011bc:	68c3      	ldr	r3, [r0, #12]
 80011be:	2419      	movs	r4, #25
 80011c0:	4313      	orrs	r3, r2
 80011c2:	6133      	str	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
  MODIFY_REG(huart->Instance->CR1, 
 80011c4:	6903      	ldr	r3, [r0, #16]
 80011c6:	68f2      	ldr	r2, [r6, #12]
 80011c8:	4319      	orrs	r1, r3
 80011ca:	6943      	ldr	r3, [r0, #20]
 80011cc:	4319      	orrs	r1, r3
 80011ce:	f422 53b0 	bic.w	r3, r2, #5632	; 0x1600
 80011d2:	f023 030c 	bic.w	r3, r3, #12
 80011d6:	430b      	orrs	r3, r1
 80011d8:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80011da:	6973      	ldr	r3, [r6, #20]
 80011dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80011e0:	6983      	ldr	r3, [r0, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	6173      	str	r3, [r6, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 80011e6:	4b3d      	ldr	r3, [pc, #244]	; (80012dc <UART_SetConfig+0x130>)
 80011e8:	429e      	cmp	r6, r3
 80011ea:	d131      	bne.n	8001250 <UART_SetConfig+0xa4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80011ec:	f7ff ffc6 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 80011f0:	4360      	muls	r0, r4
 80011f2:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80011f6:	f04f 0864 	mov.w	r8, #100	; 0x64
 80011fa:	00bf      	lsls	r7, r7, #2
 80011fc:	fbb0 f7f7 	udiv	r7, r0, r7
 8001200:	f7ff ffbc 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 8001204:	4360      	muls	r0, r4
 8001206:	f8d9 5004 	ldr.w	r5, [r9, #4]
 800120a:	fbb7 f7f8 	udiv	r7, r7, r8
 800120e:	00ad      	lsls	r5, r5, #2
 8001210:	fbb0 f5f5 	udiv	r5, r0, r5
 8001214:	f7ff ffb2 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 8001218:	4360      	muls	r0, r4
 800121a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800121e:	013f      	lsls	r7, r7, #4
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	fbb0 f0f3 	udiv	r0, r0, r3
 8001226:	fbb0 f0f8 	udiv	r0, r0, r8
 800122a:	fb08 5510 	mls	r5, r8, r0, r5
 800122e:	f7ff ffa5 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 8001232:	012d      	lsls	r5, r5, #4
 8001234:	3532      	adds	r5, #50	; 0x32
 8001236:	fbb5 f5f8 	udiv	r5, r5, r8
 800123a:	4360      	muls	r0, r4
 800123c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8001240:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001244:	0089      	lsls	r1, r1, #2
 8001246:	fbb0 faf1 	udiv	sl, r0, r1
 800124a:	f7ff ff97 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 800124e:	e030      	b.n	80012b2 <UART_SetConfig+0x106>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001250:	f7ff ff7c 	bl	800114c <HAL_RCC_GetPCLK1Freq>
 8001254:	4360      	muls	r0, r4
 8001256:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800125a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800125e:	00bf      	lsls	r7, r7, #2
 8001260:	fbb0 f7f7 	udiv	r7, r0, r7
 8001264:	f7ff ff72 	bl	800114c <HAL_RCC_GetPCLK1Freq>
 8001268:	4360      	muls	r0, r4
 800126a:	f8d9 5004 	ldr.w	r5, [r9, #4]
 800126e:	fbb7 f7f8 	udiv	r7, r7, r8
 8001272:	00ad      	lsls	r5, r5, #2
 8001274:	fbb0 f5f5 	udiv	r5, r0, r5
 8001278:	f7ff ff68 	bl	800114c <HAL_RCC_GetPCLK1Freq>
 800127c:	4360      	muls	r0, r4
 800127e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001282:	013f      	lsls	r7, r7, #4
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	fbb0 f0f3 	udiv	r0, r0, r3
 800128a:	fbb0 f0f8 	udiv	r0, r0, r8
 800128e:	fb08 5510 	mls	r5, r8, r0, r5
 8001292:	f7ff ff5b 	bl	800114c <HAL_RCC_GetPCLK1Freq>
 8001296:	012d      	lsls	r5, r5, #4
 8001298:	3532      	adds	r5, #50	; 0x32
 800129a:	fbb5 f5f8 	udiv	r5, r5, r8
 800129e:	4360      	muls	r0, r4
 80012a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80012a4:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80012a8:	0089      	lsls	r1, r1, #2
 80012aa:	fbb0 faf1 	udiv	sl, r0, r1
 80012ae:	f7ff ff4d 	bl	800114c <HAL_RCC_GetPCLK1Freq>
 80012b2:	4344      	muls	r4, r0
 80012b4:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80012b8:	0080      	lsls	r0, r0, #2
 80012ba:	fbb4 f0f0 	udiv	r0, r4, r0
 80012be:	fbb0 f0f8 	udiv	r0, r0, r8
 80012c2:	fb08 a210 	mls	r2, r8, r0, sl
 80012c6:	0112      	lsls	r2, r2, #4
 80012c8:	3232      	adds	r2, #50	; 0x32
 80012ca:	fbb2 f3f8 	udiv	r3, r2, r8
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	442b      	add	r3, r5
 80012d4:	441f      	add	r7, r3
 80012d6:	60b7      	str	r7, [r6, #8]
 80012d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012dc:	40013800 	.word	0x40013800

080012e0 <UART_WaitOnFlagUntilTimeout.constprop.1>:
  * @param  Flag: specifies the UART flag to check.
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 80012e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012e2:	4604      	mov	r4, r0
 80012e4:	460e      	mov	r6, r1
 80012e6:	4615      	mov	r5, r2
{
  uint32_t tickstart = 0;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012e8:	f7ff f984 	bl	80005f4 <HAL_GetTick>
 80012ec:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80012ee:	6822      	ldr	r2, [r4, #0]
 80012f0:	6813      	ldr	r3, [r2, #0]
 80012f2:	ea36 0303 	bics.w	r3, r6, r3
 80012f6:	d021      	beq.n	800133c <UART_WaitOnFlagUntilTimeout.constprop.1+0x5c>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80012f8:	1c6b      	adds	r3, r5, #1
 80012fa:	d0f9      	beq.n	80012f0 <UART_WaitOnFlagUntilTimeout.constprop.1+0x10>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80012fc:	b9c5      	cbnz	r5, 8001330 <UART_WaitOnFlagUntilTimeout.constprop.1+0x50>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80012fe:	6823      	ldr	r3, [r4, #0]
          huart->State= HAL_UART_STATE_READY;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_TIMEOUT;
 8001300:	2003      	movs	r0, #3
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001308:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	f022 0220 	bic.w	r2, r2, #32
 8001310:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001312:	68da      	ldr	r2, [r3, #12]
 8001314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001318:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800131a:	695a      	ldr	r2, [r3, #20]
 800131c:	f022 0201 	bic.w	r2, r2, #1
 8001320:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 8001322:	2301      	movs	r3, #1
 8001324:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001328:	2300      	movs	r3, #0
 800132a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800132e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001330:	f7ff f960 	bl	80005f4 <HAL_GetTick>
 8001334:	1bc0      	subs	r0, r0, r7
 8001336:	4285      	cmp	r5, r0
 8001338:	d2d9      	bcs.n	80012ee <UART_WaitOnFlagUntilTimeout.constprop.1+0xe>
 800133a:	e7e0      	b.n	80012fe <UART_WaitOnFlagUntilTimeout.constprop.1+0x1e>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800133c:	2000      	movs	r0, #0
}
 800133e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001340 <HAL_UART_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001340:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001342:	4604      	mov	r4, r0
 8001344:	b330      	cbz	r0, 8001394 <HAL_UART_Init+0x54>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 8001346:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800134a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800134e:	b91b      	cbnz	r3, 8001358 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001350:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001354:	f7ff f8b2 	bl	80004bc <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001358:	6822      	ldr	r2, [r4, #0]
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->State = HAL_UART_STATE_BUSY;
 800135a:	2302      	movs	r3, #2
 800135c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001360:	68d3      	ldr	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001362:	4620      	mov	r0, r4
  }

  huart->State = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001364:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001368:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800136a:	f7ff ff1f 	bl	80011ac <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800136e:	6823      	ldr	r3, [r4, #0]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001370:	2000      	movs	r0, #0
  UART_SetConfig(huart);
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001372:	691a      	ldr	r2, [r3, #16]
 8001374:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800137a:	695a      	ldr	r2, [r3, #20]
 800137c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001380:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001382:	68da      	ldr	r2, [r3, #12]
 8001384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001388:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State= HAL_UART_STATE_READY;
 800138a:	2301      	movs	r3, #1
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800138c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 800138e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8001392:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8001394:	2001      	movs	r0, #1
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8001396:	bd10      	pop	{r4, pc}

08001398 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001398:	b570      	push	{r4, r5, r6, lr}
 800139a:	460d      	mov	r5, r1
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
 800139c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013a0:	4604      	mov	r4, r0
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
 80013a2:	b2c9      	uxtb	r1, r1
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 80013a4:	2901      	cmp	r1, #1
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013a6:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 80013a8:	d001      	beq.n	80013ae <HAL_UART_Transmit+0x16>
 80013aa:	2922      	cmp	r1, #34	; 0x22
 80013ac:	d14e      	bne.n	800144c <HAL_UART_Transmit+0xb4>
  {
    if((pData == NULL) || (Size == 0))
 80013ae:	2d00      	cmp	r5, #0
 80013b0:	d04a      	beq.n	8001448 <HAL_UART_Transmit+0xb0>
 80013b2:	2a00      	cmp	r2, #0
 80013b4:	d048      	beq.n	8001448 <HAL_UART_Transmit+0xb0>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80013b6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d046      	beq.n	800144c <HAL_UART_Transmit+0xb4>
 80013be:	2301      	movs	r3, #1
 80013c0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	63e3      	str	r3, [r4, #60]	; 0x3c
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 80013c8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }

    huart->TxXferSize = Size;
 80013cc:	84a2      	strh	r2, [r4, #36]	; 0x24
    /* Process Locked */
    __HAL_LOCK(huart);

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 80013ce:	2b22      	cmp	r3, #34	; 0x22
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80013d0:	bf0c      	ite	eq
 80013d2:	2332      	moveq	r3, #50	; 0x32
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 80013d4:	2312      	movne	r3, #18
 80013d6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    }

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 80013da:	84e2      	strh	r2, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0)
 80013dc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80013de:	b302      	cbz	r2, 8001422 <HAL_UART_Transmit+0x8a>
    {
      huart->TxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013e0:	68a3      	ldr	r3, [r4, #8]

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
    {
      huart->TxXferCount--;
 80013e2:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
    {
      huart->TxXferCount--;
 80013e8:	84e2      	strh	r2, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80013ea:	f04f 0180 	mov.w	r1, #128	; 0x80
 80013ee:	4632      	mov	r2, r6
 80013f0:	4620      	mov	r0, r4
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
    {
      huart->TxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013f2:	d10d      	bne.n	8001410 <HAL_UART_Transmit+0x78>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80013f4:	f7ff ff74 	bl	80012e0 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80013f8:	b108      	cbz	r0, 80013fe <HAL_UART_Transmit+0x66>
        {
          return HAL_TIMEOUT;
 80013fa:	2003      	movs	r0, #3
 80013fc:	bd70      	pop	{r4, r5, r6, pc}
        }
        tmp = (uint16_t*) pData;
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80013fe:	882b      	ldrh	r3, [r5, #0]
 8001400:	6822      	ldr	r2, [r4, #0]
 8001402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001406:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001408:	6923      	ldr	r3, [r4, #16]
 800140a:	b943      	cbnz	r3, 800141e <HAL_UART_Transmit+0x86>
        {
          pData +=2;
 800140c:	3502      	adds	r5, #2
 800140e:	e7e5      	b.n	80013dc <HAL_UART_Transmit+0x44>
          pData +=1;
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001410:	f7ff ff66 	bl	80012e0 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8001414:	2800      	cmp	r0, #0
 8001416:	d1f0      	bne.n	80013fa <HAL_UART_Transmit+0x62>
        {
          return HAL_TIMEOUT;
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001418:	6823      	ldr	r3, [r4, #0]
 800141a:	782a      	ldrb	r2, [r5, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	3501      	adds	r5, #1
 8001420:	e7dc      	b.n	80013dc <HAL_UART_Transmit+0x44>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8001422:	4632      	mov	r2, r6
 8001424:	2140      	movs	r1, #64	; 0x40
 8001426:	4620      	mov	r0, r4
 8001428:	f7ff ff5a 	bl	80012e0 <UART_WaitOnFlagUntilTimeout.constprop.1>
 800142c:	2800      	cmp	r0, #0
 800142e:	d1e4      	bne.n	80013fa <HAL_UART_Transmit+0x62>
    { 
      return HAL_TIMEOUT;
    }

    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001430:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001434:	2b32      	cmp	r3, #50	; 0x32
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8001436:	bf0c      	ite	eq
 8001438:	2322      	moveq	r3, #34	; 0x22
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 800143a:	2301      	movne	r3, #1
 800143c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001440:	2300      	movs	r3, #0
 8001442:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

    return HAL_OK;
 8001446:	bd70      	pop	{r4, r5, r6, pc}
  tmp_state = huart->State;
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
  {
    if((pData == NULL) || (Size == 0))
    {
      return  HAL_ERROR;
 8001448:	2001      	movs	r0, #1
 800144a:	bd70      	pop	{r4, r5, r6, pc}

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800144c:	2002      	movs	r0, #2
  }
}
 800144e:	bd70      	pop	{r4, r5, r6, pc}

08001450 <HAL_UART_Receive_IT>:
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
 8001450:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001454:	b2db      	uxtb	r3, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 8001456:	2b01      	cmp	r3, #1
 8001458:	d001      	beq.n	800145e <HAL_UART_Receive_IT+0xe>
 800145a:	2b12      	cmp	r3, #18
 800145c:	d128      	bne.n	80014b0 <HAL_UART_Receive_IT+0x60>
  {
    if((pData == NULL ) || (Size == 0))
 800145e:	b329      	cbz	r1, 80014ac <HAL_UART_Receive_IT+0x5c>
 8001460:	b322      	cbz	r2, 80014ac <HAL_UART_Receive_IT+0x5c>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001462:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001466:	2b01      	cmp	r3, #1
 8001468:	d022      	beq.n	80014b0 <HAL_UART_Receive_IT+0x60>
 800146a:	2301      	movs	r3, #1
 800146c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001470:	2300      	movs	r3, #0
 8001472:	63c3      	str	r3, [r0, #60]	; 0x3c

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
 8001474:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001476:	85c2      	strh	r2, [r0, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8001478:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800147c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8001480:	2a12      	cmp	r2, #18

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001482:	6803      	ldr	r3, [r0, #0]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8001484:	bf0c      	ite	eq
 8001486:	2232      	moveq	r2, #50	; 0x32
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8001488:	2222      	movne	r2, #34	; 0x22
 800148a:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800148e:	68da      	ldr	r2, [r3, #12]
    }

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pRxBuffPtr = pData;
 8001490:	6281      	str	r1, [r0, #40]	; 0x28

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001492:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001496:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001498:	695a      	ldr	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);

    return HAL_OK;
 800149a:	2000      	movs	r0, #0

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800149c:	f042 0201 	orr.w	r2, r2, #1
 80014a0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	f042 0220 	orr.w	r2, r2, #32
 80014a8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80014aa:	4770      	bx	lr
  tmp_state = huart->State;
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
  {
    if((pData == NULL ) || (Size == 0))
    {
      return HAL_ERROR;
 80014ac:	2001      	movs	r0, #1
 80014ae:	4770      	bx	lr

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80014b0:	2002      	movs	r0, #2
  }
}
 80014b2:	4770      	bx	lr

080014b4 <HAL_UART_TxCpltCallback>:
 80014b4:	4770      	bx	lr

080014b6 <HAL_UART_ErrorCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80014b6:	4770      	bx	lr

080014b8 <HAL_UART_IRQHandler>:
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 80014b8:	6802      	ldr	r2, [r0, #0]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80014ba:	b513      	push	{r0, r1, r4, lr}
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 80014bc:	6811      	ldr	r1, [r2, #0]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80014be:	4604      	mov	r4, r0
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80014c0:	07c9      	lsls	r1, r1, #31
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 80014c2:	68d3      	ldr	r3, [r2, #12]
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80014c4:	d505      	bpl.n	80014d2 <HAL_UART_IRQHandler+0x1a>
 80014c6:	05db      	lsls	r3, r3, #23
  { 
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 80014c8:	bf42      	ittt	mi
 80014ca:	6bc3      	ldrmi	r3, [r0, #60]	; 0x3c
 80014cc:	f043 0301 	orrmi.w	r3, r3, #1
 80014d0:	63c3      	strmi	r3, [r0, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 80014d2:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 80014d4:	6953      	ldr	r3, [r2, #20]
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80014d6:	0788      	lsls	r0, r1, #30
  { 
    huart->ErrorCode |= HAL_UART_ERROR_PE;
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 80014d8:	f003 0301 	and.w	r3, r3, #1
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80014dc:	d504      	bpl.n	80014e8 <HAL_UART_IRQHandler+0x30>
 80014de:	b11b      	cbz	r3, 80014e8 <HAL_UART_IRQHandler+0x30>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80014e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80014e2:	f041 0104 	orr.w	r1, r1, #4
 80014e6:	63e1      	str	r1, [r4, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 80014e8:	6811      	ldr	r1, [r2, #0]
  /* UART noise error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80014ea:	0749      	lsls	r1, r1, #29
 80014ec:	d504      	bpl.n	80014f8 <HAL_UART_IRQHandler+0x40>
 80014ee:	b11b      	cbz	r3, 80014f8 <HAL_UART_IRQHandler+0x40>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80014f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80014f2:	f041 0102 	orr.w	r1, r1, #2
 80014f6:	63e1      	str	r1, [r4, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 80014f8:	6811      	ldr	r1, [r2, #0]
  /* UART Over-Run interrupt occurred ----------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80014fa:	0708      	lsls	r0, r1, #28
 80014fc:	d504      	bpl.n	8001508 <HAL_UART_IRQHandler+0x50>
 80014fe:	b11b      	cbz	r3, 8001508 <HAL_UART_IRQHandler+0x50>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001500:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001502:	f043 0308 	orr.w	r3, r3, #8
 8001506:	63e3      	str	r3, [r4, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 8001508:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 800150a:	68d3      	ldr	r3, [r2, #12]
  /* UART in mode Receiver ---------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800150c:	0689      	lsls	r1, r1, #26
 800150e:	d542      	bpl.n	8001596 <HAL_UART_IRQHandler+0xde>
 8001510:	0698      	lsls	r0, r3, #26
 8001512:	d540      	bpl.n	8001596 <HAL_UART_IRQHandler+0xde>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State; 
 8001514:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8001518:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800151c:	2b22      	cmp	r3, #34	; 0x22
 800151e:	d13a      	bne.n	8001596 <HAL_UART_IRQHandler+0xde>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001520:	68a3      	ldr	r3, [r4, #8]
 8001522:	6921      	ldr	r1, [r4, #16]
 8001524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001528:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800152a:	d10b      	bne.n	8001544 <HAL_UART_IRQHandler+0x8c>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800152c:	6852      	ldr	r2, [r2, #4]
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
 800152e:	b921      	cbnz	r1, 800153a <HAL_UART_IRQHandler+0x82>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001534:	f823 2b02 	strh.w	r2, [r3], #2
 8001538:	e002      	b.n	8001540 <HAL_UART_IRQHandler+0x88>
        huart->pRxBuffPtr += 2;
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1;
 8001540:	62a3      	str	r3, [r4, #40]	; 0x28
 8001542:	e00a      	b.n	800155a <HAL_UART_IRQHandler+0xa2>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001544:	b919      	cbnz	r1, 800154e <HAL_UART_IRQHandler+0x96>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001546:	1c59      	adds	r1, r3, #1
 8001548:	62a1      	str	r1, [r4, #40]	; 0x28
 800154a:	6852      	ldr	r2, [r2, #4]
 800154c:	e004      	b.n	8001558 <HAL_UART_IRQHandler+0xa0>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800154e:	6852      	ldr	r2, [r2, #4]
 8001550:	1c59      	adds	r1, r3, #1
 8001552:	62a1      	str	r1, [r4, #40]	; 0x28
 8001554:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001558:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0)
 800155a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800155c:	3b01      	subs	r3, #1
 800155e:	b29b      	uxth	r3, r3
 8001560:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8001562:	b9c3      	cbnz	r3, 8001596 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001564:	6823      	ldr	r3, [r4, #0]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);

        huart->State = HAL_UART_STATE_READY;
      }
      HAL_UART_RxCpltCallback(huart);
 8001566:	4620      	mov	r0, r4
      }
    }

    if(--huart->RxXferCount == 0)
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	f022 0220 	bic.w	r2, r2, #32
 800156e:	60da      	str	r2, [r3, #12]

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001570:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001574:	2a32      	cmp	r2, #50	; 0x32
        huart->State = HAL_UART_STATE_BUSY_TX;
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001576:	bf17      	itett	ne
 8001578:	68da      	ldrne	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
      {
        huart->State = HAL_UART_STATE_BUSY_TX;
 800157a:	2312      	moveq	r3, #18
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800157c:	f422 7280 	bicne.w	r2, r2, #256	; 0x100
 8001580:	60da      	strne	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001582:	bf1f      	itttt	ne
 8001584:	695a      	ldrne	r2, [r3, #20]
 8001586:	f022 0201 	bicne.w	r2, r2, #1
 800158a:	615a      	strne	r2, [r3, #20]

        huart->State = HAL_UART_STATE_READY;
 800158c:	2301      	movne	r3, #1
 800158e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      }
      HAL_UART_RxCpltCallback(huart);
 8001592:	f7fe fe31 	bl	80001f8 <HAL_UART_RxCpltCallback>
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
  { 
    UART_Receive_IT(huart);
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8001596:	6823      	ldr	r3, [r4, #0]
 8001598:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 800159a:	68da      	ldr	r2, [r3, #12]
  /* UART in mode Transmitter ------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800159c:	0609      	lsls	r1, r1, #24
 800159e:	d528      	bpl.n	80015f2 <HAL_UART_IRQHandler+0x13a>
 80015a0:	0610      	lsls	r0, r2, #24
 80015a2:	d526      	bpl.n	80015f2 <HAL_UART_IRQHandler+0x13a>
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
 80015a4:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 80015a8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80015ac:	2a12      	cmp	r2, #18
 80015ae:	d120      	bne.n	80015f2 <HAL_UART_IRQHandler+0x13a>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80015b0:	68a2      	ldr	r2, [r4, #8]
 80015b2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80015b6:	6a22      	ldr	r2, [r4, #32]
 80015b8:	d10a      	bne.n	80015d0 <HAL_UART_IRQHandler+0x118>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80015ba:	8811      	ldrh	r1, [r2, #0]
 80015bc:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80015c0:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80015c2:	6921      	ldr	r1, [r4, #16]
 80015c4:	b909      	cbnz	r1, 80015ca <HAL_UART_IRQHandler+0x112>
      {
        huart->pTxBuffPtr += 2;
 80015c6:	3202      	adds	r2, #2
 80015c8:	e000      	b.n	80015cc <HAL_UART_IRQHandler+0x114>
      }
      else
      {
        huart->pTxBuffPtr += 1;
 80015ca:	3201      	adds	r2, #1
 80015cc:	6222      	str	r2, [r4, #32]
 80015ce:	e003      	b.n	80015d8 <HAL_UART_IRQHandler+0x120>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80015d0:	1c51      	adds	r1, r2, #1
 80015d2:	6221      	str	r1, [r4, #32]
 80015d4:	7812      	ldrb	r2, [r2, #0]
 80015d6:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0)
 80015d8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80015da:	3a01      	subs	r2, #1
 80015dc:	b292      	uxth	r2, r2
 80015de:	84e2      	strh	r2, [r4, #38]	; 0x26
 80015e0:	b93a      	cbnz	r2, 80015f2 <HAL_UART_IRQHandler+0x13a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80015e2:	68da      	ldr	r2, [r3, #12]
 80015e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015f0:	60da      	str	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
  {
    UART_Transmit_IT(huart);
  }

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 80015f2:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 80015f4:	68da      	ldr	r2, [r3, #12]
  /* UART in mode Transmitter end --------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80015f6:	0649      	lsls	r1, r1, #25
 80015f8:	d510      	bpl.n	800161c <HAL_UART_IRQHandler+0x164>
 80015fa:	0652      	lsls	r2, r2, #25
 80015fc:	d50e      	bpl.n	800161c <HAL_UART_IRQHandler+0x164>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80015fe:	68da      	ldr	r2, [r3, #12]
  else
  {
    huart->State = HAL_UART_STATE_READY;
  }
  
  HAL_UART_TxCpltCallback(huart);
 8001600:	4620      	mov	r0, r4
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001606:	60da      	str	r2, [r3, #12]
  
  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001608:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800160c:	2b32      	cmp	r3, #50	; 0x32
  {
    huart->State = HAL_UART_STATE_BUSY_RX;
 800160e:	bf0c      	ite	eq
 8001610:	2322      	moveq	r3, #34	; 0x22
  }
  else
  {
    huart->State = HAL_UART_STATE_READY;
 8001612:	2301      	movne	r3, #1
 8001614:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  }
  
  HAL_UART_TxCpltCallback(huart);
 8001618:	f7ff ff4c 	bl	80014b4 <HAL_UART_TxCpltCallback>
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
  {
    UART_EndTransmit_IT(huart);
  }  

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800161c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800161e:	b15b      	cbz	r3, 8001638 <HAL_UART_IRQHandler+0x180>
  {
    /* Clear all the error flag at once */
    __HAL_UART_CLEAR_PEFLAG(huart);
 8001620:	6823      	ldr	r3, [r4, #0]
    
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
    
    HAL_UART_ErrorCallback(huart);
 8001622:	4620      	mov	r0, r4
  }  

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
  {
    /* Clear all the error flag at once */
    __HAL_UART_CLEAR_PEFLAG(huart);
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	9201      	str	r2, [sp, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	9b01      	ldr	r3, [sp, #4]
    
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 800162e:	2301      	movs	r3, #1
 8001630:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
    HAL_UART_ErrorCallback(huart);
 8001634:	f7ff ff3f 	bl	80014b6 <HAL_UART_ErrorCallback>
  }  
}
 8001638:	b002      	add	sp, #8
 800163a:	bd10      	pop	{r4, pc}

0800163c <__libc_init_array>:
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <__libc_init_array+0x3c>)
 800163e:	b570      	push	{r4, r5, r6, lr}
 8001640:	461e      	mov	r6, r3
 8001642:	4c0e      	ldr	r4, [pc, #56]	; (800167c <__libc_init_array+0x40>)
 8001644:	2500      	movs	r5, #0
 8001646:	1ae4      	subs	r4, r4, r3
 8001648:	10a4      	asrs	r4, r4, #2
 800164a:	42a5      	cmp	r5, r4
 800164c:	d004      	beq.n	8001658 <__libc_init_array+0x1c>
 800164e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001652:	4798      	blx	r3
 8001654:	3501      	adds	r5, #1
 8001656:	e7f8      	b.n	800164a <__libc_init_array+0xe>
 8001658:	f000 f816 	bl	8001688 <_init>
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <__libc_init_array+0x44>)
 800165e:	4c09      	ldr	r4, [pc, #36]	; (8001684 <__libc_init_array+0x48>)
 8001660:	461e      	mov	r6, r3
 8001662:	1ae4      	subs	r4, r4, r3
 8001664:	10a4      	asrs	r4, r4, #2
 8001666:	2500      	movs	r5, #0
 8001668:	42a5      	cmp	r5, r4
 800166a:	d004      	beq.n	8001676 <__libc_init_array+0x3a>
 800166c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001670:	4798      	blx	r3
 8001672:	3501      	adds	r5, #1
 8001674:	e7f8      	b.n	8001668 <__libc_init_array+0x2c>
 8001676:	bd70      	pop	{r4, r5, r6, pc}
 8001678:	080016cc 	.word	0x080016cc
 800167c:	080016cc 	.word	0x080016cc
 8001680:	080016cc 	.word	0x080016cc
 8001684:	080016d0 	.word	0x080016d0

08001688 <_init>:
 8001688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800168a:	bf00      	nop
 800168c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800168e:	bc08      	pop	{r3}
 8001690:	469e      	mov	lr, r3
 8001692:	4770      	bx	lr

08001694 <_fini>:
 8001694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001696:	bf00      	nop
 8001698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800169a:	bc08      	pop	{r3}
 800169c:	469e      	mov	lr, r3
 800169e:	4770      	bx	lr
